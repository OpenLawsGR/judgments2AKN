# Generated from /home/plessas/EDBM34/grammars/Legal_ref.g4 by ANTLR 4.7.2
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u0197\u080c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\3\2\3\2\3\2\3\3\3\3")
        buf.write(u"\6\3\u00b4\n\3\r\3\16\3\u00b5\3\4\3\4\3\5\3\5\3\5\3\5")
        buf.write(u"\5\5\u00be\n\5\3\6\3\6\3\7\3\7\3\b\3\b\5\b\u00c6\n\b")
        buf.write(u"\3\b\3\b\5\b\u00ca\n\b\3\b\7\b\u00cd\n\b\f\b\16\b\u00d0")
        buf.write(u"\13\b\3\b\3\b\3\b\5\b\u00d5\n\b\3\b\3\b\5\b\u00d9\n\b")
        buf.write(u"\3\b\3\b\3\b\3\b\3\b\5\b\u00e0\n\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\5\b\u00e8\n\b\5\b\u00ea\n\b\3\b\3\b\3\b\3\b\5")
        buf.write(u"\b\u00f0\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\3\b\5\b\u0100\n\b\5\b\u0102\n\b\3\t\3\t")
        buf.write(u"\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17")
        buf.write(u"\5\17\u0112\n\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u011a")
        buf.write(u"\n\17\3\17\7\17\u011d\n\17\f\17\16\17\u0120\13\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u015f\n\17")
        buf.write(u"\3\17\7\17\u0162\n\17\f\17\16\17\u0165\13\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\5\17\u0181\n\17\3\17\7\17\u0184\n\17")
        buf.write(u"\f\17\16\17\u0187\13\17\5\17\u0189\n\17\3\20\3\20\3\21")
        buf.write(u"\3\21\5\21\u018f\n\21\3\22\3\22\3\23\3\23\3\23\3\23\5")
        buf.write(u"\23\u0197\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u019e\n")
        buf.write(u"\23\5\23\u01a0\n\23\3\24\3\24\3\24\3\24\3\25\3\25\5\25")
        buf.write(u"\u01a8\n\25\3\25\3\25\3\26\3\26\5\26\u01ae\n\26\3\26")
        buf.write(u"\3\26\3\27\3\27\3\27\3\27\3\27\3\27\6\27\u01b8\n\27\r")
        buf.write(u"\27\16\27\u01b9\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5")
        buf.write(u"\27\u01c3\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write(u"\3\27\5\27\u01ce\n\27\3\27\3\27\3\27\3\27\3\27\3\27\5")
        buf.write(u"\27\u01d6\n\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01de")
        buf.write(u"\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u01e5\n\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01f0\n\27")
        buf.write(u"\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01f8\n\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\5\27\u0200\n\27\3\27\3\27\6\27")
        buf.write(u"\u0204\n\27\r\27\16\27\u0205\3\27\3\27\3\27\3\27\3\27")
        buf.write(u"\3\27\5\27\u020e\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write(u"\3\27\3\27\5\27\u0223\n\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0232\n\27")
        buf.write(u"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\5\27\u0240\n\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write(u"\3\27\5\27\u0249\n\27\3\27\6\27\u024c\n\27\r\27\16\27")
        buf.write(u"\u024d\3\27\3\27\3\27\3\27\5\27\u0254\n\27\3\27\3\27")
        buf.write(u"\3\27\3\27\3\27\3\27\5\27\u025c\n\27\3\27\3\27\5\27\u0260")
        buf.write(u"\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\3\27\5\27\u026e\n\27\3\27\3\27\3\27\3\27\3\27")
        buf.write(u"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write(u"\5\27\u028a\n\27\3\27\3\27\3\27\3\27\5\27\u0290\n\27")
        buf.write(u"\3\27\3\27\3\27\6\27\u0295\n\27\r\27\16\27\u0296\3\27")
        buf.write(u"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\6\27")
        buf.write(u"\u02ae\n\27\r\27\16\27\u02af\5\27\u02b2\n\27\3\30\3\30")
        buf.write(u"\3\30\3\30\7\30\u02b8\n\30\f\30\16\30\u02bb\13\30\3\30")
        buf.write(u"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\7")
        buf.write(u"\30\u02c8\n\30\f\30\16\30\u02cb\13\30\3\30\3\30\3\30")
        buf.write(u"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u02d8\n")
        buf.write(u"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write(u"\3\30\3\30\3\30\5\30\u02e7\n\30\3\30\3\30\5\30\u02eb")
        buf.write(u"\n\30\7\30\u02ed\n\30\f\30\16\30\u02f0\13\30\3\30\3\30")
        buf.write(u"\3\30\5\30\u02f5\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write(u"\30\3\30\3\30\3\30\5\30\u0301\n\30\3\30\3\30\3\30\3\30")
        buf.write(u"\3\30\3\30\5\30\u0309\n\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write(u"\30\5\30\u0311\n\30\3\30\3\30\3\30\5\30\u0316\n\30\3")
        buf.write(u"\30\3\30\3\30\3\30\3\30\5\30\u031d\n\30\3\30\3\30\3\30")
        buf.write(u"\5\30\u0322\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write(u"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0334")
        buf.write(u"\n\30\3\31\3\31\5\31\u0338\n\31\3\31\3\31\5\31\u033c")
        buf.write(u"\n\31\5\31\u033e\n\31\3\31\3\31\5\31\u0342\n\31\7\31")
        buf.write(u"\u0344\n\31\f\31\16\31\u0347\13\31\3\31\5\31\u034a\n")
        buf.write(u"\31\3\31\3\31\5\31\u034e\n\31\3\31\3\31\3\31\3\31\3\31")
        buf.write(u"\5\31\u0355\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write(u"\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write(u"\3\31\5\31\u036a\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write(u"\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0379\n\31\3\31")
        buf.write(u"\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write(u"\31\3\31\3\31\3\31\3\31\3\31\3\31\6\31\u038d\n\31\r\31")
        buf.write(u"\16\31\u038e\3\31\3\31\3\31\5\31\u0394\n\31\3\31\3\31")
        buf.write(u"\5\31\u0398\n\31\3\32\3\32\5\32\u039c\n\32\3\32\3\32")
        buf.write(u"\5\32\u03a0\n\32\5\32\u03a2\n\32\3\32\3\32\5\32\u03a6")
        buf.write(u"\n\32\7\32\u03a8\n\32\f\32\16\32\u03ab\13\32\3\32\3\32")
        buf.write(u"\3\32\5\32\u03b0\n\32\3\32\3\32\5\32\u03b4\n\32\3\32")
        buf.write(u"\3\32\3\32\3\32\5\32\u03ba\n\32\3\32\3\32\3\32\3\32\3")
        buf.write(u"\32\3\32\3\32\5\32\u03c3\n\32\3\33\3\33\3\33\3\33\3\33")
        buf.write(u"\3\33\3\33\3\33\3\33\3\33\5\33\u03cf\n\33\3\34\3\34\3")
        buf.write(u"\34\3\34\3\34\3\34\3\34\5\34\u03d8\n\34\3\35\3\35\3\35")
        buf.write(u"\3\35\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\5\37\u03e6")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u03ed\n\37\3 \3 ")
        buf.write(u"\3 \3 \3!\3!\5!\u03f5\n!\3!\3!\3!\5!\u03fa\n!\5!\u03fc")
        buf.write(u"\n!\3!\3!\3!\5!\u0401\n!\3!\3!\3!\3!\3!\5!\u0408\n!\3")
        buf.write(u"\"\3\"\3\"\5\"\u040d\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u0414")
        buf.write(u"\n\"\3\"\3\"\5\"\u0418\n\"\3\"\5\"\u041b\n\"\3\"\3\"")
        buf.write(u"\5\"\u041f\n\"\3\"\3\"\3\"\5\"\u0424\n\"\7\"\u0426\n")
        buf.write(u"\"\f\"\16\"\u0429\13\"\3#\3#\3#\5#\u042e\n#\3#\3#\3#")
        buf.write(u"\3#\5#\u0434\n#\3#\3#\5#\u0438\n#\3#\5#\u043b\n#\3#\3")
        buf.write(u"#\5#\u043f\n#\3#\3#\5#\u0443\n#\7#\u0445\n#\f#\16#\u0448")
        buf.write(u"\13#\3$\3$\3$\3$\5$\u044e\n$\3$\3$\3$\3$\3$\5$\u0455")
        buf.write(u"\n$\3%\3%\5%\u0459\n%\3%\3%\3%\5%\u045e\n%\3&\3&\3&\3")
        buf.write(u"&\5&\u0464\n&\3&\3&\3&\3&\3&\5&\u046b\n&\3\'\3\'\5\'")
        buf.write(u"\u046f\n\'\3\'\3\'\5\'\u0473\n\'\3(\3(\3(\3(\5(\u0479")
        buf.write(u"\n(\3(\3(\3(\3(\3(\5(\u0480\n(\3)\3)\5)\u0484\n)\3)\3")
        buf.write(u")\5)\u0488\n)\3*\3*\3*\3*\5*\u048e\n*\3*\3*\3*\3*\3*")
        buf.write(u"\5*\u0495\n*\3+\3+\3+\3+\5+\u049b\n+\3,\3,\3,\3,\5,\u04a1")
        buf.write(u"\n,\3,\3,\3,\3,\3,\5,\u04a8\n,\3-\3-\5-\u04ac\n-\3-\3")
        buf.write(u"-\3-\3-\3-\5-\u04b3\n-\3-\3-\5-\u04b7\n-\5-\u04b9\n-")
        buf.write(u"\3.\3.\3.\3.\3/\3/\5/\u04c1\n/\3/\3/\3/\3/\5/\u04c7\n")
        buf.write(u"/\3/\3/\3/\3/\3/\3/\5/\u04cf\n/\3\60\3\60\5\60\u04d3")
        buf.write(u"\n\60\3\60\3\60\5\60\u04d7\n\60\3\60\3\60\3\60\3\60\5")
        buf.write(u"\60\u04dd\n\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\5\60\u04e9\n\60\3\61\3\61\5\61\u04ed\n\61")
        buf.write(u"\3\61\3\61\3\61\3\61\3\62\3\62\3\63\3\63\3\63\3\63\3")
        buf.write(u"\63\3\63\5\63\u04fb\n\63\3\64\3\64\3\65\3\65\3\66\3\66")
        buf.write(u"\3\67\3\67\38\38\39\39\3:\3:\3;\5;\u050c\n;\3;\3;\3;")
        buf.write(u"\5;\u0511\n;\3<\3<\5<\u0515\n<\3<\5<\u0518\n<\3<\3<\5")
        buf.write(u"<\u051c\n<\3<\3<\5<\u0520\n<\3=\3=\3>\3>\5>\u0526\n>")
        buf.write(u"\3>\3>\6>\u052a\n>\r>\16>\u052b\3>\3>\3>\3>\3>\5>\u0533")
        buf.write(u"\n>\5>\u0535\n>\3?\3?\3?\5?\u053a\n?\3@\3@\3A\3A\5A\u0540")
        buf.write(u"\nA\3B\3B\3C\3C\5C\u0546\nC\3C\5C\u0549\nC\3C\5C\u054c")
        buf.write(u"\nC\3C\3C\5C\u0550\nC\3C\3C\3C\3C\3C\5C\u0557\nC\7C\u0559")
        buf.write(u"\nC\fC\16C\u055c\13C\3D\3D\5D\u0560\nD\3E\3E\3E\3E\3")
        buf.write(u"E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0572\nE\6E\u0574")
        buf.write(u"\nE\rE\16E\u0575\3E\3E\3E\3E\3E\5E\u057d\nE\3E\3E\3E")
        buf.write(u"\5E\u0582\nE\3E\5E\u0585\nE\3E\5E\u0588\nE\3E\5E\u058b")
        buf.write(u"\nE\3E\3E\3E\5E\u0590\nE\6E\u0592\nE\rE\16E\u0593\3E")
        buf.write(u"\3E\3E\3E\3E\5E\u059b\nE\3E\3E\3E\6E\u05a0\nE\rE\16E")
        buf.write(u"\u05a1\3E\5E\u05a5\nE\3E\3E\5E\u05a9\nE\3E\5E\u05ac\n")
        buf.write(u"E\3E\3E\3E\5E\u05b1\nE\3E\5E\u05b4\nE\3E\3E\5E\u05b8")
        buf.write(u"\nE\3E\6E\u05bb\nE\rE\16E\u05bc\3E\3E\3E\3E\3E\7E\u05c4")
        buf.write(u"\nE\fE\16E\u05c7\13E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5")
        buf.write(u"E\u05d3\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E")
        buf.write(u"\3E\3E\3E\3E\3E\6E\u05e8\nE\rE\16E\u05e9\3E\5E\u05ed")
        buf.write(u"\nE\5E\u05ef\nE\3F\3F\5F\u05f3\nF\3F\3F\3F\5F\u05f8\n")
        buf.write(u"F\3F\3F\3F\3F\3F\5F\u05ff\nF\3F\3F\3F\3F\3F\3F\3F\3F")
        buf.write(u"\3F\3F\3F\3F\3F\3F\3F\5F\u0610\nF\3F\3F\5F\u0614\nF\3")
        buf.write(u"F\3F\3F\5F\u0619\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0624")
        buf.write(u"\nF\3G\3G\3G\3G\3G\3G\3G\3G\3H\3H\3H\5H\u0631\nH\3H\3")
        buf.write(u"H\3H\5H\u0636\nH\3H\3H\5H\u063a\nH\6H\u063c\nH\rH\16")
        buf.write(u"H\u063d\3H\3H\3I\3I\3I\5I\u0645\nI\3I\3I\3I\5I\u064a")
        buf.write(u"\nI\3I\3I\5I\u064e\nI\6I\u0650\nI\rI\16I\u0651\3I\3I")
        buf.write(u"\3J\3J\3K\3K\5K\u065a\nK\3K\3K\3K\5K\u065f\nK\3K\3K\3")
        buf.write(u"K\3K\5K\u0665\nK\3L\3L\5L\u0669\nL\3L\5L\u066c\nL\3L")
        buf.write(u"\3L\3L\3L\3L\5L\u0673\nL\3L\3L\3L\5L\u0678\nL\6L\u067a")
        buf.write(u"\nL\rL\16L\u067b\3M\3M\5M\u0680\nM\3M\3M\3M\5M\u0685")
        buf.write(u"\nM\3N\3N\5N\u0689\nN\3N\3N\5N\u068d\nN\3N\3N\5N\u0691")
        buf.write(u"\nN\5N\u0693\nN\3N\3N\5N\u0697\nN\3N\3N\5N\u069b\nN\3")
        buf.write(u"N\3N\7N\u069f\nN\fN\16N\u06a2\13N\6N\u06a4\nN\rN\16N")
        buf.write(u"\u06a5\3O\3O\5O\u06aa\nO\3O\3O\5O\u06ae\nO\3O\7O\u06b1")
        buf.write(u"\nO\fO\16O\u06b4\13O\3O\3O\3O\3P\3P\3P\6P\u06bc\nP\r")
        buf.write(u"P\16P\u06bd\3Q\3Q\3Q\3Q\5Q\u06c4\nQ\3R\3R\3S\3S\3S\3")
        buf.write(u"S\3S\5S\u06cd\nS\5S\u06cf\nS\3S\6S\u06d2\nS\rS\16S\u06d3")
        buf.write(u"\5S\u06d6\nS\3S\3S\5S\u06da\nS\3S\3S\3T\3T\5T\u06e0\n")
        buf.write(u"T\3T\3T\5T\u06e4\nT\3T\5T\u06e7\nT\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u0800\nT\3U\3U\3U")
        buf.write(u"\3U\3U\3U\3V\3V\3W\3W\3W\2\2X\2\4\6\b\n\f\16\20\22\24")
        buf.write(u"\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTV")
        buf.write(u"XZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write(u"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write(u"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\2\13")
        buf.write(u"\4\2\25\25\33\33\4\2\25\25\34\34\5\2\31\31\33\33{{\3")
        buf.write(u"\2\'g\4\2\23\23\35\35\3\2\n\13\4\2\23\23\25\26\4\2\24")
        buf.write(u"\24\30\30\4\2\23\23\26\26\2\u0a04\2\u00ae\3\2\2\2\4\u00b3")
        buf.write(u"\3\2\2\2\6\u00b7\3\2\2\2\b\u00bd\3\2\2\2\n\u00bf\3\2")
        buf.write(u"\2\2\f\u00c1\3\2\2\2\16\u0101\3\2\2\2\20\u0103\3\2\2")
        buf.write(u"\2\22\u0105\3\2\2\2\24\u0107\3\2\2\2\26\u0109\3\2\2\2")
        buf.write(u"\30\u010b\3\2\2\2\32\u010d\3\2\2\2\34\u0188\3\2\2\2\36")
        buf.write(u"\u018a\3\2\2\2 \u018e\3\2\2\2\"\u0190\3\2\2\2$\u0192")
        buf.write(u"\3\2\2\2&\u01a1\3\2\2\2(\u01a5\3\2\2\2*\u01ab\3\2\2\2")
        buf.write(u",\u02b1\3\2\2\2.\u0333\3\2\2\2\60\u0397\3\2\2\2\62\u03c2")
        buf.write(u"\3\2\2\2\64\u03ce\3\2\2\2\66\u03d7\3\2\2\28\u03d9\3\2")
        buf.write(u"\2\2:\u03dd\3\2\2\2<\u03ec\3\2\2\2>\u03ee\3\2\2\2@\u0407")
        buf.write(u"\3\2\2\2B\u040c\3\2\2\2D\u042d\3\2\2\2F\u0454\3\2\2\2")
        buf.write(u"H\u0456\3\2\2\2J\u046a\3\2\2\2L\u046c\3\2\2\2N\u047f")
        buf.write(u"\3\2\2\2P\u0481\3\2\2\2R\u0494\3\2\2\2T\u0496\3\2\2\2")
        buf.write(u"V\u04a7\3\2\2\2X\u04b8\3\2\2\2Z\u04ba\3\2\2\2\\\u04ce")
        buf.write(u"\3\2\2\2^\u04e8\3\2\2\2`\u04ec\3\2\2\2b\u04f2\3\2\2\2")
        buf.write(u"d\u04fa\3\2\2\2f\u04fc\3\2\2\2h\u04fe\3\2\2\2j\u0500")
        buf.write(u"\3\2\2\2l\u0502\3\2\2\2n\u0504\3\2\2\2p\u0506\3\2\2\2")
        buf.write(u"r\u0508\3\2\2\2t\u050b\3\2\2\2v\u0514\3\2\2\2x\u0521")
        buf.write(u"\3\2\2\2z\u0534\3\2\2\2|\u0536\3\2\2\2~\u053b\3\2\2\2")
        buf.write(u"\u0080\u053f\3\2\2\2\u0082\u0541\3\2\2\2\u0084\u0543")
        buf.write(u"\3\2\2\2\u0086\u055f\3\2\2\2\u0088\u05ee\3\2\2\2\u008a")
        buf.write(u"\u0623\3\2\2\2\u008c\u0625\3\2\2\2\u008e\u063b\3\2\2")
        buf.write(u"\2\u0090\u064f\3\2\2\2\u0092\u0655\3\2\2\2\u0094\u0664")
        buf.write(u"\3\2\2\2\u0096\u0668\3\2\2\2\u0098\u0684\3\2\2\2\u009a")
        buf.write(u"\u0686\3\2\2\2\u009c\u06a7\3\2\2\2\u009e\u06b8\3\2\2")
        buf.write(u"\2\u00a0\u06c3\3\2\2\2\u00a2\u06c5\3\2\2\2\u00a4\u06d5")
        buf.write(u"\3\2\2\2\u00a6\u07ff\3\2\2\2\u00a8\u0801\3\2\2\2\u00aa")
        buf.write(u"\u0807\3\2\2\2\u00ac\u0809\3\2\2\2\u00ae\u00af\5\4\3")
        buf.write(u"\2\u00af\u00b0\7\2\2\3\u00b0\3\3\2\2\2\u00b1\u00b4\5")
        buf.write(u"\b\5\2\u00b2\u00b4\5\6\4\2\u00b3\u00b1\3\2\2\2\u00b3")
        buf.write(u"\u00b2\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5\u00b3\3\2\2")
        buf.write(u"\2\u00b5\u00b6\3\2\2\2\u00b6\5\3\2\2\2\u00b7\u00b8\13")
        buf.write(u"\2\2\2\u00b8\7\3\2\2\2\u00b9\u00be\5\u0080A\2\u00ba\u00be")
        buf.write(u"\5 \21\2\u00bb\u00be\5\30\r\2\u00bc\u00be\5\n\6\2\u00bd")
        buf.write(u"\u00b9\3\2\2\2\u00bd\u00ba\3\2\2\2\u00bd\u00bb\3\2\2")
        buf.write(u"\2\u00bd\u00bc\3\2\2\2\u00be\t\3\2\2\2\u00bf\u00c0\5")
        buf.write(u"\f\7\2\u00c0\13\3\2\2\2\u00c1\u00c2\5\16\b\2\u00c2\r")
        buf.write(u"\3\2\2\2\u00c3\u00ce\5\64\33\2\u00c4\u00c6\7\u0197\2")
        buf.write(u"\2\u00c5\u00c4\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c9")
        buf.write(u"\3\2\2\2\u00c7\u00c8\t\2\2\2\u00c8\u00ca\7\u0197\2\2")
        buf.write(u"\u00c9\u00c7\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cb")
        buf.write(u"\3\2\2\2\u00cb\u00cd\5\64\33\2\u00cc\u00c5\3\2\2\2\u00cd")
        buf.write(u"\u00d0\3\2\2\2\u00ce\u00cc\3\2\2\2\u00ce\u00cf\3\2\2")
        buf.write(u"\2\u00cf\u00d1\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d1\u00d4")
        buf.write(u"\7\u0197\2\2\u00d2\u00d3\7\33\2\2\u00d3\u00d5\7\u0197")
        buf.write(u"\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d8")
        buf.write(u"\3\2\2\2\u00d6\u00d9\5\20\t\2\u00d7\u00d9\5\22\n\2\u00d8")
        buf.write(u"\u00d6\3\2\2\2\u00d8\u00d7\3\2\2\2\u00d9\u00da\3\2\2")
        buf.write(u"\2\u00da\u00db\7\u0197\2\2\u00db\u00dc\5\u009aN\2\u00dc")
        buf.write(u"\u0102\3\2\2\2\u00dd\u00e0\5\20\t\2\u00de\u00e0\5\22")
        buf.write(u"\n\2\u00df\u00dd\3\2\2\2\u00df\u00de\3\2\2\2\u00e0\u00e1")
        buf.write(u"\3\2\2\2\u00e1\u00e2\7\u0197\2\2\u00e2\u00e3\3\2\2\2")
        buf.write(u"\u00e3\u00e9\5\u009aN\2\u00e4\u00e7\7\24\2\2\u00e5\u00e8")
        buf.write(u"\5\20\t\2\u00e6\u00e8\5\26\f\2\u00e7\u00e5\3\2\2\2\u00e7")
        buf.write(u"\u00e6\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00e4\3\2\2")
        buf.write(u"\2\u00e9\u00ea\3\2\2\2\u00ea\u00ef\3\2\2\2\u00eb\u00ec")
        buf.write(u"\7\u0197\2\2\u00ec\u00ed\7\33\2\2\u00ed\u00ee\7\u0197")
        buf.write(u"\2\2\u00ee\u00f0\7\7\2\2\u00ef\u00eb\3\2\2\2\u00ef\u00f0")
        buf.write(u"\3\2\2\2\u00f0\u0102\3\2\2\2\u00f1\u00f2\5\20\t\2\u00f2")
        buf.write(u"\u00f3\7\u0197\2\2\u00f3\u00f4\7m\2\2\u00f4\u00f5\7\u0197")
        buf.write(u"\2\2\u00f5\u00f6\5\u009aN\2\u00f6\u0102\3\2\2\2\u00f7")
        buf.write(u"\u00f8\5\22\n\2\u00f8\u00f9\7\u0197\2\2\u00f9\u00fa\7")
        buf.write(u"\3\2\2\u00fa\u00fb\7\u0197\2\2\u00fb\u00fc\5\u009aN\2")
        buf.write(u"\u00fc\u00ff\7\24\2\2\u00fd\u0100\5\20\t\2\u00fe\u0100")
        buf.write(u"\5\26\f\2\u00ff\u00fd\3\2\2\2\u00ff\u00fe\3\2\2\2\u0100")
        buf.write(u"\u0102\3\2\2\2\u0101\u00c3\3\2\2\2\u0101\u00df\3\2\2")
        buf.write(u"\2\u0101\u00f1\3\2\2\2\u0101\u00f7\3\2\2\2\u0102\17\3")
        buf.write(u"\2\2\2\u0103\u0104\7v\2\2\u0104\21\3\2\2\2\u0105\u0106")
        buf.write(u"\7w\2\2\u0106\23\3\2\2\2\u0107\u0108\7x\2\2\u0108\25")
        buf.write(u"\3\2\2\2\u0109\u010a\7\6\2\2\u010a\27\3\2\2\2\u010b\u010c")
        buf.write(u"\5\32\16\2\u010c\31\3\2\2\2\u010d\u010e\5\34\17\2\u010e")
        buf.write(u"\33\3\2\2\2\u010f\u0111\5\36\20\2\u0110\u0112\7\u0197")
        buf.write(u"\2\2\u0111\u0110\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0113")
        buf.write(u"\3\2\2\2\u0113\u011e\5\u009aN\2\u0114\u0115\7\25\2\2")
        buf.write(u"\u0115\u011a\7\u0197\2\2\u0116\u0117\7\u0197\2\2\u0117")
        buf.write(u"\u0118\7\34\2\2\u0118\u011a\7\u0197\2\2\u0119\u0114\3")
        buf.write(u"\2\2\2\u0119\u0116\3\2\2\2\u011a\u011b\3\2\2\2\u011b")
        buf.write(u"\u011d\5\u009aN\2\u011c\u0119\3\2\2\2\u011d\u0120\3\2")
        buf.write(u"\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0189")
        buf.write(u"\3\2\2\2\u0120\u011e\3\2\2\2\u0121\u0122\5\u009aN\2\u0122")
        buf.write(u"\u0123\7\u0197\2\2\u0123\u0124\7y\2\2\u0124\u0125\7\u0197")
        buf.write(u"\2\2\u0125\u0126\5\36\20\2\u0126\u0189\3\2\2\2\u0127")
        buf.write(u"\u0128\5\36\20\2\u0128\u0129\7\u0197\2\2\u0129\u012a")
        buf.write(u"\7u\2\2\u012a\u012b\7\u0197\2\2\u012b\u012c\5\u009aN")
        buf.write(u"\2\u012c\u012d\7\25\2\2\u012d\u012e\7\u0197\2\2\u012e")
        buf.write(u"\u012f\5\u009aN\2\u012f\u0189\3\2\2\2\u0130\u0131\5\36")
        buf.write(u"\20\2\u0131\u0132\7\u0197\2\2\u0132\u0133\7\17\2\2\u0133")
        buf.write(u"\u0134\7\u0197\2\2\u0134\u0135\7y\2\2\u0135\u0136\7\u0197")
        buf.write(u"\2\2\u0136\u0137\5\u009aN\2\u0137\u0189\3\2\2\2\u0138")
        buf.write(u"\u0139\7y\2\2\u0139\u013a\7\u0197\2\2\u013a\u013b\5\u009a")
        buf.write(u"N\2\u013b\u013c\7\u0197\2\2\u013c\u013d\5\36\20\2\u013d")
        buf.write(u"\u0189\3\2\2\2\u013e\u013f\7y\2\2\u013f\u0140\7\u0197")
        buf.write(u"\2\2\u0140\u0141\5\36\20\2\u0141\u0142\7\u0197\2\2\u0142")
        buf.write(u"\u0143\5\u009aN\2\u0143\u0144\7\25\2\2\u0144\u0145\7")
        buf.write(u"\u0197\2\2\u0145\u0146\5\u009aN\2\u0146\u0189\3\2\2\2")
        buf.write(u"\u0147\u0148\5\36\20\2\u0148\u0149\7\25\2\2\u0149\u014a")
        buf.write(u"\7\u0197\2\2\u014a\u014b\7\17\2\2\u014b\u014c\7\u0197")
        buf.write(u"\2\2\u014c\u014d\5\u009aN\2\u014d\u014e\7\u0197\2\2\u014e")
        buf.write(u"\u014f\7y\2\2\u014f\u0189\3\2\2\2\u0150\u0151\7u\2\2")
        buf.write(u"\u0151\u0152\7\u0197\2\2\u0152\u0153\5\u009aN\2\u0153")
        buf.write(u"\u0154\7\u0197\2\2\u0154\u0155\7y\2\2\u0155\u0189\3\2")
        buf.write(u"\2\2\u0156\u0157\7y\2\2\u0157\u0158\7\u0197\2\2\u0158")
        buf.write(u"\u0163\5\u009aN\2\u0159\u015a\7\25\2\2\u015a\u015f\7")
        buf.write(u"\u0197\2\2\u015b\u015c\7\u0197\2\2\u015c\u015d\7\34\2")
        buf.write(u"\2\u015d\u015f\7\u0197\2\2\u015e\u0159\3\2\2\2\u015e")
        buf.write(u"\u015b\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0162\5\u009a")
        buf.write(u"N\2\u0161\u015e\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161")
        buf.write(u"\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0189\3\2\2\2\u0165")
        buf.write(u"\u0163\3\2\2\2\u0166\u0167\7y\2\2\u0167\u0168\7\u0197")
        buf.write(u"\2\2\u0168\u0169\7u\2\2\u0169\u016a\7\u0197\2\2\u016a")
        buf.write(u"\u016b\5\u009aN\2\u016b\u016c\7\u0197\2\2\u016c\u016d")
        buf.write(u"\5\36\20\2\u016d\u0189\3\2\2\2\u016e\u016f\5\36\20\2")
        buf.write(u"\u016f\u0170\7\u0197\2\2\u0170\u0171\7u\2\2\u0171\u0172")
        buf.write(u"\7\u0197\2\2\u0172\u0173\5\u009aN\2\u0173\u0189\3\2\2")
        buf.write(u"\2\u0174\u0175\7y\2\2\u0175\u0176\7\u0197\2\2\u0176\u0177")
        buf.write(u"\5\36\20\2\u0177\u0178\7\u0197\2\2\u0178\u0179\7u\2\2")
        buf.write(u"\u0179\u017a\7\u0197\2\2\u017a\u0185\5\u009aN\2\u017b")
        buf.write(u"\u017c\7\25\2\2\u017c\u0181\7\u0197\2\2\u017d\u017e\7")
        buf.write(u"\u0197\2\2\u017e\u017f\7\34\2\2\u017f\u0181\7\u0197\2")
        buf.write(u"\2\u0180\u017b\3\2\2\2\u0180\u017d\3\2\2\2\u0181\u0182")
        buf.write(u"\3\2\2\2\u0182\u0184\5\u009aN\2\u0183\u0180\3\2\2\2\u0184")
        buf.write(u"\u0187\3\2\2\2\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2")
        buf.write(u"\2\u0186\u0189\3\2\2\2\u0187\u0185\3\2\2\2\u0188\u010f")
        buf.write(u"\3\2\2\2\u0188\u0121\3\2\2\2\u0188\u0127\3\2\2\2\u0188")
        buf.write(u"\u0130\3\2\2\2\u0188\u0138\3\2\2\2\u0188\u013e\3\2\2")
        buf.write(u"\2\u0188\u0147\3\2\2\2\u0188\u0150\3\2\2\2\u0188\u0156")
        buf.write(u"\3\2\2\2\u0188\u0166\3\2\2\2\u0188\u016e\3\2\2\2\u0188")
        buf.write(u"\u0174\3\2\2\2\u0189\35\3\2\2\2\u018a\u018b\7\b\2\2\u018b")
        buf.write(u"\37\3\2\2\2\u018c\u018f\5,\27\2\u018d\u018f\5\"\22\2")
        buf.write(u"\u018e\u018c\3\2\2\2\u018e\u018d\3\2\2\2\u018f!\3\2\2")
        buf.write(u"\2\u0190\u0191\5\60\31\2\u0191#\3\2\2\2\u0192\u0193\5")
        buf.write(u"\u0098M\2\u0193\u0194\7\u0197\2\2\u0194\u0196\7m\2\2")
        buf.write(u"\u0195\u0197\7\u0197\2\2\u0196\u0195\3\2\2\2\u0196\u0197")
        buf.write(u"\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u019f\5\u0094K\2\u0199")
        buf.write(u"\u019d\7\u0197\2\2\u019a\u019e\5&\24\2\u019b\u019e\5")
        buf.write(u"(\25\2\u019c\u019e\5*\26\2\u019d\u019a\3\2\2\2\u019d")
        buf.write(u"\u019b\3\2\2\2\u019d\u019c\3\2\2\2\u019e\u01a0\3\2\2")
        buf.write(u"\2\u019f\u0199\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0%\3\2")
        buf.write(u"\2\2\u01a1\u01a2\7p\2\2\u01a2\u01a3\7\u0197\2\2\u01a3")
        buf.write(u"\u01a4\5\u0094K\2\u01a4\'\3\2\2\2\u01a5\u01a7\7q\2\2")
        buf.write(u"\u01a6\u01a8\7\u0197\2\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8")
        buf.write(u"\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\5\u0094K\2\u01aa")
        buf.write(u")\3\2\2\2\u01ab\u01ad\7r\2\2\u01ac\u01ae\7\u0197\2\2")
        buf.write(u"\u01ad\u01ac\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af")
        buf.write(u"\3\2\2\2\u01af\u01b0\5\u0094K\2\u01b0+\3\2\2\2\u01b1")
        buf.write(u"\u01b2\5x=\2\u01b2\u01b3\7\u0197\2\2\u01b3\u01b7\5$\23")
        buf.write(u"\2\u01b4\u01b5\7\25\2\2\u01b5\u01b6\7\u0197\2\2\u01b6")
        buf.write(u"\u01b8\5\u0098M\2\u01b7\u01b4\3\2\2\2\u01b8\u01b9\3\2")
        buf.write(u"\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bb")
        buf.write(u"\3\2\2\2\u01bb\u01bc\7\u0197\2\2\u01bc\u01bd\7\34\2\2")
        buf.write(u"\u01bd\u01be\7\u0197\2\2\u01be\u01bf\5\u0098M\2\u01bf")
        buf.write(u"\u01c2\7\u0197\2\2\u01c0\u01c1\7\33\2\2\u01c1\u01c3\7")
        buf.write(u"\u0197\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write(u"\u01c4\3\2\2\2\u01c4\u01c5\5^\60\2\u01c5\u02b2\3\2\2")
        buf.write(u"\2\u01c6\u01c7\5x=\2\u01c7\u01c8\7\u0197\2\2\u01c8\u01c9")
        buf.write(u"\5$\23\2\u01c9\u01cd\7\u0197\2\2\u01ca\u01cb\5&\24\2")
        buf.write(u"\u01cb\u01cc\7\u0197\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01ca")
        buf.write(u"\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf")
        buf.write(u"\u01d0\7\34\2\2\u01d0\u01d1\7\u0197\2\2\u01d1\u01d2\5")
        buf.write(u"$\23\2\u01d2\u01d5\7\u0197\2\2\u01d3\u01d4\7\33\2\2\u01d4")
        buf.write(u"\u01d6\7\u0197\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3")
        buf.write(u"\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d8\5^\60\2\u01d8")
        buf.write(u"\u02b2\3\2\2\2\u01d9\u01da\5x=\2\u01da\u01db\7\u0197")
        buf.write(u"\2\2\u01db\u01dd\5$\23\2\u01dc\u01de\7\25\2\2\u01dd\u01dc")
        buf.write(u"\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write(u"\u01e0\7\u0197\2\2\u01e0\u01e1\5$\23\2\u01e1\u01e4\7")
        buf.write(u"\u0197\2\2\u01e2\u01e3\7\33\2\2\u01e3\u01e5\7\u0197\2")
        buf.write(u"\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e6")
        buf.write(u"\3\2\2\2\u01e6\u01e7\5^\60\2\u01e7\u02b2\3\2\2\2\u01e8")
        buf.write(u"\u01e9\5x=\2\u01e9\u01ea\7\u0197\2\2\u01ea\u01eb\5$\23")
        buf.write(u"\2\u01eb\u01ef\7\u0197\2\2\u01ec\u01ed\5&\24\2\u01ed")
        buf.write(u"\u01ee\7\u0197\2\2\u01ee\u01f0\3\2\2\2\u01ef\u01ec\3")
        buf.write(u"\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1")
        buf.write(u"\u01f2\7\34\2\2\u01f2\u01f3\7\u0197\2\2\u01f3\u01f4\5")
        buf.write(u"\u0098M\2\u01f4\u01f7\7\u0197\2\2\u01f5\u01f6\7\33\2")
        buf.write(u"\2\u01f6\u01f8\7\u0197\2\2\u01f7\u01f5\3\2\2\2\u01f7")
        buf.write(u"\u01f8\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\5^\60")
        buf.write(u"\2\u01fa\u02b2\3\2\2\2\u01fb\u01fc\5x=\2\u01fc\u0203")
        buf.write(u"\7\u0197\2\2\u01fd\u01ff\5$\23\2\u01fe\u0200\7\25\2\2")
        buf.write(u"\u01ff\u01fe\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0201")
        buf.write(u"\3\2\2\2\u0201\u0202\7\u0197\2\2\u0202\u0204\3\2\2\2")
        buf.write(u"\u0203\u01fd\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0203")
        buf.write(u"\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\3\2\2\2\u0207")
        buf.write(u"\u0208\7\34\2\2\u0208\u0209\7\u0197\2\2\u0209\u020a\5")
        buf.write(u"$\23\2\u020a\u020d\7\u0197\2\2\u020b\u020c\7\33\2\2\u020c")
        buf.write(u"\u020e\7\u0197\2\2\u020d\u020b\3\2\2\2\u020d\u020e\3")
        buf.write(u"\2\2\2\u020e\u020f\3\2\2\2\u020f\u0210\5^\60\2\u0210")
        buf.write(u"\u02b2\3\2\2\2\u0211\u0212\5x=\2\u0212\u0213\7\u0197")
        buf.write(u"\2\2\u0213\u0214\5$\23\2\u0214\u0215\7\25\2\2\u0215\u0216")
        buf.write(u"\7\u0197\2\2\u0216\u0217\5$\23\2\u0217\u0218\7\25\2\2")
        buf.write(u"\u0218\u0219\7\u0197\2\2\u0219\u021a\5\u0098M\2\u021a")
        buf.write(u"\u021b\7\25\2\2\u021b\u021c\7\u0197\2\2\u021c\u021d\5")
        buf.write(u"\u0098M\2\u021d\u021e\7\u0197\2\2\u021e\u021f\5H%\2\u021f")
        buf.write(u"\u0222\7\u0197\2\2\u0220\u0221\7\33\2\2\u0221\u0223\7")
        buf.write(u"\u0197\2\2\u0222\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223")
        buf.write(u"\u0224\3\2\2\2\u0224\u0225\5^\60\2\u0225\u02b2\3\2\2")
        buf.write(u"\2\u0226\u0227\5x=\2\u0227\u0228\7\u0197\2\2\u0228\u0229")
        buf.write(u"\5$\23\2\u0229\u022a\7\25\2\2\u022a\u022b\7\u0197\2\2")
        buf.write(u"\u022b\u022c\5\u0098M\2\u022c\u022d\7\u0197\2\2\u022d")
        buf.write(u"\u022e\5H%\2\u022e\u0231\7\u0197\2\2\u022f\u0230\7\33")
        buf.write(u"\2\2\u0230\u0232\7\u0197\2\2\u0231\u022f\3\2\2\2\u0231")
        buf.write(u"\u0232\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234\5^\60")
        buf.write(u"\2\u0234\u02b2\3\2\2\2\u0235\u0236\5x=\2\u0236\u0237")
        buf.write(u"\7\u0197\2\2\u0237\u0238\5\u0098M\2\u0238\u0239\7\u0197")
        buf.write(u"\2\2\u0239\u023a\7\34\2\2\u023a\u023b\7\u0197\2\2\u023b")
        buf.write(u"\u023c\5$\23\2\u023c\u023f\7\u0197\2\2\u023d\u023e\7")
        buf.write(u"\33\2\2\u023e\u0240\7\u0197\2\2\u023f\u023d\3\2\2\2\u023f")
        buf.write(u"\u0240\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\5^\60")
        buf.write(u"\2\u0242\u02b2\3\2\2\2\u0243\u0244\5x=\2\u0244\u0245")
        buf.write(u"\7\u0197\2\2\u0245\u024b\5\u0098M\2\u0246\u0248\7\25")
        buf.write(u"\2\2\u0247\u0249\7\u0197\2\2\u0248\u0247\3\2\2\2\u0248")
        buf.write(u"\u0249\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024c\5\u0098")
        buf.write(u"M\2\u024b\u0246\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024b")
        buf.write(u"\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0253\3\2\2\2\u024f")
        buf.write(u"\u0250\7\u0197\2\2\u0250\u0251\7\34\2\2\u0251\u0252\7")
        buf.write(u"\u0197\2\2\u0252\u0254\5\u0098M\2\u0253\u024f\3\2\2\2")
        buf.write(u"\u0253\u0254\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u025b")
        buf.write(u"\7\u0197\2\2\u0256\u0257\7\33\2\2\u0257\u0258\7\u0197")
        buf.write(u"\2\2\u0258\u0259\5\64\33\2\u0259\u025a\7\u0197\2\2\u025a")
        buf.write(u"\u025c\3\2\2\2\u025b\u0256\3\2\2\2\u025b\u025c\3\2\2")
        buf.write(u"\2\u025c\u025f\3\2\2\2\u025d\u025e\7\33\2\2\u025e\u0260")
        buf.write(u"\7\u0197\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3\2\2\2")
        buf.write(u"\u0260\u0261\3\2\2\2\u0261\u0262\5^\60\2\u0262\u02b2")
        buf.write(u"\3\2\2\2\u0263\u0264\5x=\2\u0264\u0265\7\u0197\2\2\u0265")
        buf.write(u"\u0266\5\u0098M\2\u0266\u0267\7\u0197\2\2\u0267\u0268")
        buf.write(u"\7\34\2\2\u0268\u0269\7\u0197\2\2\u0269\u026a\5\u0098")
        buf.write(u"M\2\u026a\u026d\7\u0197\2\2\u026b\u026c\7\33\2\2\u026c")
        buf.write(u"\u026e\7\u0197\2\2\u026d\u026b\3\2\2\2\u026d\u026e\3")
        buf.write(u"\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\5^\60\2\u0270")
        buf.write(u"\u02b2\3\2\2\2\u0271\u0272\5x=\2\u0272\u0273\7\u0197")
        buf.write(u"\2\2\u0273\u0274\5.\30\2\u0274\u0275\7\25\2\2\u0275\u0276")
        buf.write(u"\7\u0197\2\2\u0276\u0277\5.\30\2\u0277\u02b2\3\2\2\2")
        buf.write(u"\u0278\u0279\5x=\2\u0279\u027a\7\u0197\2\2\u027a\u027b")
        buf.write(u"\5.\30\2\u027b\u027c\7\u0197\2\2\u027c\u027d\7\34\2\2")
        buf.write(u"\u027d\u027e\7\u0197\2\2\u027e\u027f\5.\30\2\u027f\u0280")
        buf.write(u"\5x=\2\u0280\u0281\7\u0197\2\2\u0281\u0289\5.\30\2\u0282")
        buf.write(u"\u0283\7\25\2\2\u0283\u0284\7\u0197\2\2\u0284\u0285\7")
        buf.write(u"\20\2\2\u0285\u0286\7\u0197\2\2\u0286\u0287\7\34\2\2")
        buf.write(u"\u0287\u0288\7\u0197\2\2\u0288\u028a\5.\30\2\u0289\u0282")
        buf.write(u"\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u02b2\3\2\2\2\u028b")
        buf.write(u"\u028c\5x=\2\u028c\u028d\7\u0197\2\2\u028d\u0294\5.\30")
        buf.write(u"\2\u028e\u0290\7\u0197\2\2\u028f\u028e\3\2\2\2\u028f")
        buf.write(u"\u0290\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\t\3\2")
        buf.write(u"\2\u0292\u0293\7\u0197\2\2\u0293\u0295\5.\30\2\u0294")
        buf.write(u"\u028f\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0294\3\2\2")
        buf.write(u"\2\u0296\u0297\3\2\2\2\u0297\u02b2\3\2\2\2\u0298\u0299")
        buf.write(u"\5x=\2\u0299\u029a\7\u0197\2\2\u029a\u029b\5.\30\2\u029b")
        buf.write(u"\u029c\7\u0197\2\2\u029c\u029d\7\34\2\2\u029d\u029e\7")
        buf.write(u"\u0197\2\2\u029e\u029f\5.\30\2\u029f\u02b2\3\2\2\2\u02a0")
        buf.write(u"\u02a1\5x=\2\u02a1\u02a2\7\u0197\2\2\u02a2\u02a3\5.\30")
        buf.write(u"\2\u02a3\u02a4\7\25\2\2\u02a4\u02a5\7\u0197\2\2\u02a5")
        buf.write(u"\u02a6\5.\30\2\u02a6\u02a7\7\u0197\2\2\u02a7\u02a8\7")
        buf.write(u"\34\2\2\u02a8\u02a9\7\u0197\2\2\u02a9\u02aa\5.\30\2\u02aa")
        buf.write(u"\u02b2\3\2\2\2\u02ab\u02ad\5\"\22\2\u02ac\u02ae\5.\30")
        buf.write(u"\2\u02ad\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02ad")
        buf.write(u"\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\3\2\2\2\u02b1")
        buf.write(u"\u01b1\3\2\2\2\u02b1\u01c6\3\2\2\2\u02b1\u01d9\3\2\2")
        buf.write(u"\2\u02b1\u01e8\3\2\2\2\u02b1\u01fb\3\2\2\2\u02b1\u0211")
        buf.write(u"\3\2\2\2\u02b1\u0226\3\2\2\2\u02b1\u0235\3\2\2\2\u02b1")
        buf.write(u"\u0243\3\2\2\2\u02b1\u0263\3\2\2\2\u02b1\u0271\3\2\2")
        buf.write(u"\2\u02b1\u0278\3\2\2\2\u02b1\u028b\3\2\2\2\u02b1\u0298")
        buf.write(u"\3\2\2\2\u02b1\u02a0\3\2\2\2\u02b1\u02ab\3\2\2\2\u02b2")
        buf.write(u"-\3\2\2\2\u02b3\u02b9\5z>\2\u02b4\u02b5\7\25\2\2\u02b5")
        buf.write(u"\u02b6\7\u0197\2\2\u02b6\u02b8\5z>\2\u02b7\u02b4\3\2")
        buf.write(u"\2\2\u02b8\u02bb\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba")
        buf.write(u"\3\2\2\2\u02ba\u02bc\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc")
        buf.write(u"\u02bd\7\u0197\2\2\u02bd\u02be\7\34\2\2\u02be\u02bf\7")
        buf.write(u"\u0197\2\2\u02bf\u02c0\5z>\2\u02c0\u02c1\7\u0197\2\2")
        buf.write(u"\u02c1\u02c2\5^\60\2\u02c2\u0334\3\2\2\2\u02c3\u02c9")
        buf.write(u"\5z>\2\u02c4\u02c5\7\25\2\2\u02c5\u02c6\7\u0197\2\2\u02c6")
        buf.write(u"\u02c8\5z>\2\u02c7\u02c4\3\2\2\2\u02c8\u02cb\3\2\2\2")
        buf.write(u"\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc")
        buf.write(u"\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02cd\7\u0197\2\2")
        buf.write(u"\u02cd\u02ce\7\34\2\2\u02ce\u02cf\7\u0197\2\2\u02cf\u02d0")
        buf.write(u"\5z>\2\u02d0\u02d1\7\u0197\2\2\u02d1\u02d2\5^\60\2\u02d2")
        buf.write(u"\u0334\3\2\2\2\u02d3\u02d4\5z>\2\u02d4\u02d7\7\u0197")
        buf.write(u"\2\2\u02d5\u02d6\7\33\2\2\u02d6\u02d8\7\u0197\2\2\u02d7")
        buf.write(u"\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02d9\3\2\2")
        buf.write(u"\2\u02d9\u02da\5^\60\2\u02da\u0334\3\2\2\2\u02db\u02dc")
        buf.write(u"\5z>\2\u02dc\u02dd\7\u0197\2\2\u02dd\u02de\7\34\2\2\u02de")
        buf.write(u"\u02df\7\u0197\2\2\u02df\u02e0\5\u0098M\2\u02e0\u02e1")
        buf.write(u"\7\u0197\2\2\u02e1\u02e2\5^\60\2\u02e2\u0334\3\2\2\2")
        buf.write(u"\u02e3\u02ee\5z>\2\u02e4\u02e6\7\25\2\2\u02e5\u02e7\7")
        buf.write(u"\u0197\2\2\u02e6\u02e5\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7")
        buf.write(u"\u02ea\3\2\2\2\u02e8\u02eb\5z>\2\u02e9\u02eb\5|?\2\u02ea")
        buf.write(u"\u02e8\3\2\2\2\u02ea\u02e9\3\2\2\2\u02eb\u02ed\3\2\2")
        buf.write(u"\2\u02ec\u02e4\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec")
        buf.write(u"\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f1\3\2\2\2\u02f0")
        buf.write(u"\u02ee\3\2\2\2\u02f1\u02f4\7\u0197\2\2\u02f2\u02f3\7")
        buf.write(u"\33\2\2\u02f3\u02f5\7\u0197\2\2\u02f4\u02f2\3\2\2\2\u02f4")
        buf.write(u"\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\5^\60")
        buf.write(u"\2\u02f7\u0334\3\2\2\2\u02f8\u02f9\5z>\2\u02f9\u02fa")
        buf.write(u"\7\u0197\2\2\u02fa\u02fb\7\34\2\2\u02fb\u02fc\7\u0197")
        buf.write(u"\2\2\u02fc\u02fd\5z>\2\u02fd\u0300\7\u0197\2\2\u02fe")
        buf.write(u"\u02ff\7\33\2\2\u02ff\u0301\7\u0197\2\2\u0300\u02fe\3")
        buf.write(u"\2\2\2\u0300\u0301\3\2\2\2\u0301\u0302\3\2\2\2\u0302")
        buf.write(u"\u0303\5^\60\2\u0303\u0334\3\2\2\2\u0304\u0305\5\u0098")
        buf.write(u"M\2\u0305\u0308\7\u0197\2\2\u0306\u0307\7\33\2\2\u0307")
        buf.write(u"\u0309\7\u0197\2\2\u0308\u0306\3\2\2\2\u0308\u0309\3")
        buf.write(u"\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b\5^\60\2\u030b")
        buf.write(u"\u0334\3\2\2\2\u030c\u030d\5|?\2\u030d\u0310\7\u0197")
        buf.write(u"\2\2\u030e\u030f\7\33\2\2\u030f\u0311\7\u0197\2\2\u0310")
        buf.write(u"\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0312\3\2\2")
        buf.write(u"\2\u0312\u0313\5^\60\2\u0313\u0334\3\2\2\2\u0314\u0316")
        buf.write(u"\7\25\2\2\u0315\u0314\3\2\2\2\u0315\u0316\3\2\2\2\u0316")
        buf.write(u"\u0317\3\2\2\2\u0317\u0318\7\u0197\2\2\u0318\u0319\7")
        buf.write(u"\34\2\2\u0319\u031c\7\u0197\2\2\u031a\u031d\5\u0098M")
        buf.write(u"\2\u031b\u031d\5z>\2\u031c\u031a\3\2\2\2\u031c\u031b")
        buf.write(u"\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0321\7\u0197\2\2")
        buf.write(u"\u031f\u0320\7\33\2\2\u0320\u0322\7\u0197\2\2\u0321\u031f")
        buf.write(u"\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323")
        buf.write(u"\u0324\5^\60\2\u0324\u0334\3\2\2\2\u0325\u0326\5x=\2")
        buf.write(u"\u0326\u0327\7\u0197\2\2\u0327\u0328\5\u0098M\2\u0328")
        buf.write(u"\u0329\7\u0197\2\2\u0329\u032a\7\34\2\2\u032a\u032b\7")
        buf.write(u"\u0197\2\2\u032b\u032c\5\u0098M\2\u032c\u032d\7\u0197")
        buf.write(u"\2\2\u032d\u032e\7\33\2\2\u032e\u032f\7\u0197\2\2\u032f")
        buf.write(u"\u0330\7s\2\2\u0330\u0331\7\u0197\2\2\u0331\u0332\5^")
        buf.write(u"\60\2\u0332\u0334\3\2\2\2\u0333\u02b3\3\2\2\2\u0333\u02c3")
        buf.write(u"\3\2\2\2\u0333\u02d3\3\2\2\2\u0333\u02db\3\2\2\2\u0333")
        buf.write(u"\u02e3\3\2\2\2\u0333\u02f8\3\2\2\2\u0333\u0304\3\2\2")
        buf.write(u"\2\u0333\u030c\3\2\2\2\u0333\u0315\3\2\2\2\u0333\u0325")
        buf.write(u"\3\2\2\2\u0334/\3\2\2\2\u0335\u0345\5\64\33\2\u0336\u0338")
        buf.write(u"\7\u0197\2\2\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2")
        buf.write(u"\u0338\u033d\3\2\2\2\u0339\u033b\t\4\2\2\u033a\u033c")
        buf.write(u"\7\u0197\2\2\u033b\u033a\3\2\2\2\u033b\u033c\3\2\2\2")
        buf.write(u"\u033c\u033e\3\2\2\2\u033d\u0339\3\2\2\2\u033d\u033e")
        buf.write(u"\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0341\5\64\33\2\u0340")
        buf.write(u"\u0342\7\31\2\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2\2")
        buf.write(u"\2\u0342\u0344\3\2\2\2\u0343\u0337\3\2\2\2\u0344\u0347")
        buf.write(u"\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write(u"\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0348\u034a\7\u0197")
        buf.write(u"\2\2\u0349\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034d")
        buf.write(u"\3\2\2\2\u034b\u034c\7\33\2\2\u034c\u034e\7\u0197\2\2")
        buf.write(u"\u034d\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f")
        buf.write(u"\3\2\2\2\u034f\u0354\5^\60\2\u0350\u0351\7\u0197\2\2")
        buf.write(u"\u0351\u0352\7|\2\2\u0352\u0353\7\u0197\2\2\u0353\u0355")
        buf.write(u"\5\64\33\2\u0354\u0350\3\2\2\2\u0354\u0355\3\2\2\2\u0355")
        buf.write(u"\u0398\3\2\2\2\u0356\u0357\7\31\2\2\u0357\u0358\5^\60")
        buf.write(u"\2\u0358\u0359\7\u0197\2\2\u0359\u035a\5\u0098M\2\u035a")
        buf.write(u"\u035b\7\31\2\2\u035b\u0398\3\2\2\2\u035c\u035d\5^\60")
        buf.write(u"\2\u035d\u035e\7\u0197\2\2\u035e\u035f\7{\2\2\u035f\u0360")
        buf.write(u"\7\u0197\2\2\u0360\u0361\5\64\33\2\u0361\u0398\3\2\2")
        buf.write(u"\2\u0362\u0398\5^\60\2\u0363\u0369\5^\60\2\u0364\u0365")
        buf.write(u"\7\u0197\2\2\u0365\u0366\7\31\2\2\u0366\u0367\5\64\33")
        buf.write(u"\2\u0367\u0368\7\31\2\2\u0368\u036a\3\2\2\2\u0369\u0364")
        buf.write(u"\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0398\3\2\2\2\u036b")
        buf.write(u"\u036c\7\31\2\2\u036c\u036d\5^\60\2\u036d\u036e\7\25")
        buf.write(u"\2\2\u036e\u036f\7\u0197\2\2\u036f\u0370\5\64\33\2\u0370")
        buf.write(u"\u0371\7\31\2\2\u0371\u0398\3\2\2\2\u0372\u0373\5x=\2")
        buf.write(u"\u0373\u0374\7\u0197\2\2\u0374\u0375\5v<\2\u0375\u0378")
        buf.write(u"\7\u0197\2\2\u0376\u0377\7\33\2\2\u0377\u0379\7\u0197")
        buf.write(u"\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a")
        buf.write(u"\3\2\2\2\u037a\u037b\5^\60\2\u037b\u0398\3\2\2\2\u037c")
        buf.write(u"\u037d\5\64\33\2\u037d\u037e\7\u0197\2\2\u037e\u037f")
        buf.write(u"\7\34\2\2\u037f\u0380\7\u0197\2\2\u0380\u0381\7\4\2\2")
        buf.write(u"\u0381\u0382\7\u0197\2\2\u0382\u0383\5\64\33\2\u0383")
        buf.write(u"\u0384\7\u0197\2\2\u0384\u0385\7\33\2\2\u0385\u0386\7")
        buf.write(u"\u0197\2\2\u0386\u0387\5^\60\2\u0387\u0398\3\2\2\2\u0388")
        buf.write(u"\u038c\5\64\33\2\u0389\u038a\7\25\2\2\u038a\u038b\7\u0197")
        buf.write(u"\2\2\u038b\u038d\5\64\33\2\u038c\u0389\3\2\2\2\u038d")
        buf.write(u"\u038e\3\2\2\2\u038e\u038c\3\2\2\2\u038e\u038f\3\2\2")
        buf.write(u"\2\u038f\u0390\3\2\2\2\u0390\u0393\7\u0197\2\2\u0391")
        buf.write(u"\u0392\7\33\2\2\u0392\u0394\7\u0197\2\2\u0393\u0391\3")
        buf.write(u"\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\3\2\2\2\u0395")
        buf.write(u"\u0396\5^\60\2\u0396\u0398\3\2\2\2\u0397\u0335\3\2\2")
        buf.write(u"\2\u0397\u0356\3\2\2\2\u0397\u035c\3\2\2\2\u0397\u0362")
        buf.write(u"\3\2\2\2\u0397\u0363\3\2\2\2\u0397\u036b\3\2\2\2\u0397")
        buf.write(u"\u0372\3\2\2\2\u0397\u037c\3\2\2\2\u0397\u0388\3\2\2")
        buf.write(u"\2\u0398\61\3\2\2\2\u0399\u03a9\5\64\33\2\u039a\u039c")
        buf.write(u"\7\u0197\2\2\u039b\u039a\3\2\2\2\u039b\u039c\3\2\2\2")
        buf.write(u"\u039c\u03a1\3\2\2\2\u039d\u039f\t\4\2\2\u039e\u03a0")
        buf.write(u"\7\u0197\2\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2")
        buf.write(u"\u03a0\u03a2\3\2\2\2\u03a1\u039d\3\2\2\2\u03a1\u03a2")
        buf.write(u"\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a5\5\64\33\2\u03a4")
        buf.write(u"\u03a6\7\31\2\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2")
        buf.write(u"\2\u03a6\u03a8\3\2\2\2\u03a7\u039b\3\2\2\2\u03a8\u03ab")
        buf.write(u"\3\2\2\2\u03a9\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa")
        buf.write(u"\u03ac\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ac\u03af\7\u0197")
        buf.write(u"\2\2\u03ad\u03ae\7\33\2\2\u03ae\u03b0\7\u0197\2\2\u03af")
        buf.write(u"\u03ad\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b3\3\2\2")
        buf.write(u"\2\u03b1\u03b4\5`\61\2\u03b2\u03b4\5\\/\2\u03b3\u03b1")
        buf.write(u"\3\2\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03c3\3\2\2\2\u03b5")
        buf.write(u"\u03b6\5\64\33\2\u03b6\u03b9\7\u0197\2\2\u03b7\u03b8")
        buf.write(u"\7\33\2\2\u03b8\u03ba\7\u0197\2\2\u03b9\u03b7\3\2\2\2")
        buf.write(u"\u03b9\u03ba\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bc")
        buf.write(u"\5\66\34\2\u03bc\u03bd\3\2\2\2\u03bd\u03be\7\u0197\2")
        buf.write(u"\2\u03be\u03bf\7\34\2\2\u03bf\u03c0\7\u0197\2\2\u03c0")
        buf.write(u"\u03c1\5d\63\2\u03c1\u03c3\3\2\2\2\u03c2\u0399\3\2\2")
        buf.write(u"\2\u03c2\u03b5\3\2\2\2\u03c3\63\3\2\2\2\u03c4\u03cf\5")
        buf.write(u"Z.\2\u03c5\u03cf\5:\36\2\u03c6\u03cf\5> \2\u03c7\u03cf")
        buf.write(u"\5B\"\2\u03c8\u03cf\5H%\2\u03c9\u03cf\5L\'\2\u03ca\u03cf")
        buf.write(u"\5P)\2\u03cb\u03cf\5T+\2\u03cc\u03cf\5X-\2\u03cd\u03cf")
        buf.write(u"\58\35\2\u03ce\u03c4\3\2\2\2\u03ce\u03c5\3\2\2\2\u03ce")
        buf.write(u"\u03c6\3\2\2\2\u03ce\u03c7\3\2\2\2\u03ce\u03c8\3\2\2")
        buf.write(u"\2\u03ce\u03c9\3\2\2\2\u03ce\u03ca\3\2\2\2\u03ce\u03cb")
        buf.write(u"\3\2\2\2\u03ce\u03cc\3\2\2\2\u03ce\u03cd\3\2\2\2\u03cf")
        buf.write(u"\65\3\2\2\2\u03d0\u03d8\5<\37\2\u03d1\u03d8\5@!\2\u03d2")
        buf.write(u"\u03d8\5F$\2\u03d3\u03d8\5J&\2\u03d4\u03d8\5N(\2\u03d5")
        buf.write(u"\u03d8\5R*\2\u03d6\u03d8\5V,\2\u03d7\u03d0\3\2\2\2\u03d7")
        buf.write(u"\u03d1\3\2\2\2\u03d7\u03d2\3\2\2\2\u03d7\u03d3\3\2\2")
        buf.write(u"\2\u03d7\u03d4\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7\u03d6")
        buf.write(u"\3\2\2\2\u03d8\67\3\2\2\2\u03d9\u03da\7n\2\2\u03da\u03db")
        buf.write(u"\7\u0197\2\2\u03db\u03dc\5\u0094K\2\u03dc9\3\2\2\2\u03dd")
        buf.write(u"\u03de\7i\2\2\u03de\u03df\7\u0197\2\2\u03df\u03e0\5\u0094")
        buf.write(u"K\2\u03e0;\3\2\2\2\u03e1\u03e2\5t;\2\u03e2\u03e5\7\u0197")
        buf.write(u"\2\2\u03e3\u03e4\7\33\2\2\u03e4\u03e6\7\u0197\2\2\u03e5")
        buf.write(u"\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e7\3\2\2")
        buf.write(u"\2\u03e7\u03e8\7j\2\2\u03e8\u03ed\3\2\2\2\u03e9\u03ea")
        buf.write(u"\7j\2\2\u03ea\u03eb\7\u0197\2\2\u03eb\u03ed\5t;\2\u03ec")
        buf.write(u"\u03e1\3\2\2\2\u03ec\u03e9\3\2\2\2\u03ed=\3\2\2\2\u03ee")
        buf.write(u"\u03ef\7j\2\2\u03ef\u03f0\7\u0197\2\2\u03f0\u03f1\5\u0094")
        buf.write(u"K\2\u03f1?\3\2\2\2\u03f2\u03fb\5t;\2\u03f3\u03f5\7\25")
        buf.write(u"\2\2\u03f4\u03f3\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6")
        buf.write(u"\3\2\2\2\u03f6\u03f7\7\u0197\2\2\u03f7\u03f9\5t;\2\u03f8")
        buf.write(u"\u03fa\7\25\2\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2")
        buf.write(u"\2\u03fa\u03fc\3\2\2\2\u03fb\u03f4\3\2\2\2\u03fb\u03fc")
        buf.write(u"\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u0400\7\u0197\2\2")
        buf.write(u"\u03fe\u03ff\7\33\2\2\u03ff\u0401\7\u0197\2\2\u0400\u03fe")
        buf.write(u"\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write(u"\u0403\7l\2\2\u0403\u0408\3\2\2\2\u0404\u0405\7l\2\2")
        buf.write(u"\u0405\u0406\7\u0197\2\2\u0406\u0408\5t;\2\u0407\u03f2")
        buf.write(u"\3\2\2\2\u0407\u0404\3\2\2\2\u0408A\3\2\2\2\u0409\u040a")
        buf.write(u"\5t;\2\u040a\u040b\7\u0197\2\2\u040b\u040d\3\2\2\2\u040c")
        buf.write(u"\u0409\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040e\3\2\2")
        buf.write(u"\2\u040e\u040f\7l\2\2\u040f\u0413\7\u0197\2\2\u0410\u0414")
        buf.write(u"\5v<\2\u0411\u0414\5\u0096L\2\u0412\u0414\5\u0094K\2")
        buf.write(u"\u0413\u0410\3\2\2\2\u0413\u0411\3\2\2\2\u0413\u0412")
        buf.write(u"\3\2\2\2\u0414\u0417\3\2\2\2\u0415\u0416\7\u0197\2\2")
        buf.write(u"\u0416\u0418\5~@\2\u0417\u0415\3\2\2\2\u0417\u0418\3")
        buf.write(u"\2\2\2\u0418\u0427\3\2\2\2\u0419\u041b\7\u0197\2\2\u041a")
        buf.write(u"\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2")
        buf.write(u"\2\u041c\u041e\t\3\2\2\u041d\u041f\7\u0197\2\2\u041e")
        buf.write(u"\u041d\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0423\3\2\2")
        buf.write(u"\2\u0420\u0424\5v<\2\u0421\u0424\5\u0096L\2\u0422\u0424")
        buf.write(u"\5\u0094K\2\u0423\u0420\3\2\2\2\u0423\u0421\3\2\2\2\u0423")
        buf.write(u"\u0422\3\2\2\2\u0424\u0426\3\2\2\2\u0425\u041a\3\2\2")
        buf.write(u"\2\u0426\u0429\3\2\2\2\u0427\u0425\3\2\2\2\u0427\u0428")
        buf.write(u"\3\2\2\2\u0428C\3\2\2\2\u0429\u0427\3\2\2\2\u042a\u042b")
        buf.write(u"\5t;\2\u042b\u042c\7\u0197\2\2\u042c\u042e\3\2\2\2\u042d")
        buf.write(u"\u042a\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f\3\2\2")
        buf.write(u"\2\u042f\u0430\7k\2\2\u0430\u0433\7\u0197\2\2\u0431\u0434")
        buf.write(u"\5v<\2\u0432\u0434\5\u0098M\2\u0433\u0431\3\2\2\2\u0433")
        buf.write(u"\u0432\3\2\2\2\u0434\u0437\3\2\2\2\u0435\u0436\7\u0197")
        buf.write(u"\2\2\u0436\u0438\5~@\2\u0437\u0435\3\2\2\2\u0437\u0438")
        buf.write(u"\3\2\2\2\u0438\u0446\3\2\2\2\u0439\u043b\7\u0197\2\2")
        buf.write(u"\u043a\u0439\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043c")
        buf.write(u"\3\2\2\2\u043c\u043e\t\3\2\2\u043d\u043f\7\u0197\2\2")
        buf.write(u"\u043e\u043d\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0442")
        buf.write(u"\3\2\2\2\u0440\u0443\5v<\2\u0441\u0443\5\u0098M\2\u0442")
        buf.write(u"\u0440\3\2\2\2\u0442\u0441\3\2\2\2\u0443\u0445\3\2\2")
        buf.write(u"\2\u0444\u043a\3\2\2\2\u0445\u0448\3\2\2\2\u0446\u0444")
        buf.write(u"\3\2\2\2\u0446\u0447\3\2\2\2\u0447E\3\2\2\2\u0448\u0446")
        buf.write(u"\3\2\2\2\u0449\u044a\5t;\2\u044a\u044d\7\u0197\2\2\u044b")
        buf.write(u"\u044c\7\33\2\2\u044c\u044e\7\u0197\2\2\u044d\u044b\3")
        buf.write(u"\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\3\2\2\2\u044f")
        buf.write(u"\u0450\7m\2\2\u0450\u0455\3\2\2\2\u0451\u0452\7m\2\2")
        buf.write(u"\u0452\u0453\7\u0197\2\2\u0453\u0455\5t;\2\u0454\u0449")
        buf.write(u"\3\2\2\2\u0454\u0451\3\2\2\2\u0455G\3\2\2\2\u0456\u0458")
        buf.write(u"\7m\2\2\u0457\u0459\7\u0197\2\2\u0458\u0457\3\2\2\2\u0458")
        buf.write(u"\u0459\3\2\2\2\u0459\u045d\3\2\2\2\u045a\u045e\5\u0096")
        buf.write(u"L\2\u045b\u045e\5\u0094K\2\u045c\u045e\5v<\2\u045d\u045a")
        buf.write(u"\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045c\3\2\2\2\u045e")
        buf.write(u"I\3\2\2\2\u045f\u0460\5t;\2\u0460\u0463\7\u0197\2\2\u0461")
        buf.write(u"\u0462\7\33\2\2\u0462\u0464\7\u0197\2\2\u0463\u0461\3")
        buf.write(u"\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465")
        buf.write(u"\u0466\7o\2\2\u0466\u046b\3\2\2\2\u0467\u0468\7o\2\2")
        buf.write(u"\u0468\u0469\7\u0197\2\2\u0469\u046b\5t;\2\u046a\u045f")
        buf.write(u"\3\2\2\2\u046a\u0467\3\2\2\2\u046bK\3\2\2\2\u046c\u046e")
        buf.write(u"\7o\2\2\u046d\u046f\7\u0197\2\2\u046e\u046d\3\2\2\2\u046e")
        buf.write(u"\u046f\3\2\2\2\u046f\u0472\3\2\2\2\u0470\u0473\5\u0096")
        buf.write(u"L\2\u0471\u0473\5\u0094K\2\u0472\u0470\3\2\2\2\u0472")
        buf.write(u"\u0471\3\2\2\2\u0473M\3\2\2\2\u0474\u0475\5t;\2\u0475")
        buf.write(u"\u0478\7\u0197\2\2\u0476\u0477\7\33\2\2\u0477\u0479\7")
        buf.write(u"\u0197\2\2\u0478\u0476\3\2\2\2\u0478\u0479\3\2\2\2\u0479")
        buf.write(u"\u047a\3\2\2\2\u047a\u047b\7p\2\2\u047b\u0480\3\2\2\2")
        buf.write(u"\u047c\u047d\7p\2\2\u047d\u047e\7\u0197\2\2\u047e\u0480")
        buf.write(u"\5t;\2\u047f\u0474\3\2\2\2\u047f\u047c\3\2\2\2\u0480")
        buf.write(u"O\3\2\2\2\u0481\u0483\7p\2\2\u0482\u0484\7\u0197\2\2")
        buf.write(u"\u0483\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0487")
        buf.write(u"\3\2\2\2\u0485\u0488\5\u0096L\2\u0486\u0488\5\u0094K")
        buf.write(u"\2\u0487\u0485\3\2\2\2\u0487\u0486\3\2\2\2\u0488Q\3\2")
        buf.write(u"\2\2\u0489\u048a\5t;\2\u048a\u048d\7\u0197\2\2\u048b")
        buf.write(u"\u048c\7\33\2\2\u048c\u048e\7\u0197\2\2\u048d\u048b\3")
        buf.write(u"\2\2\2\u048d\u048e\3\2\2\2\u048e\u048f\3\2\2\2\u048f")
        buf.write(u"\u0490\7r\2\2\u0490\u0495\3\2\2\2\u0491\u0492\7r\2\2")
        buf.write(u"\u0492\u0493\7\u0197\2\2\u0493\u0495\5t;\2\u0494\u0489")
        buf.write(u"\3\2\2\2\u0494\u0491\3\2\2\2\u0495S\3\2\2\2\u0496\u0497")
        buf.write(u"\7r\2\2\u0497\u049a\7\u0197\2\2\u0498\u049b\5\u0096L")
        buf.write(u"\2\u0499\u049b\5\u0094K\2\u049a\u0498\3\2\2\2\u049a\u0499")
        buf.write(u"\3\2\2\2\u049bU\3\2\2\2\u049c\u049d\5t;\2\u049d\u04a0")
        buf.write(u"\7\u0197\2\2\u049e\u049f\7\33\2\2\u049f\u04a1\7\u0197")
        buf.write(u"\2\2\u04a0\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a2")
        buf.write(u"\3\2\2\2\u04a2\u04a3\7q\2\2\u04a3\u04a8\3\2\2\2\u04a4")
        buf.write(u"\u04a5\7q\2\2\u04a5\u04a6\7\u0197\2\2\u04a6\u04a8\5t")
        buf.write(u";\2\u04a7\u049c\3\2\2\2\u04a7\u04a4\3\2\2\2\u04a8W\3")
        buf.write(u"\2\2\2\u04a9\u04ac\5\u0096L\2\u04aa\u04ac\5\u0094K\2")
        buf.write(u"\u04ab\u04a9\3\2\2\2\u04ab\u04aa\3\2\2\2\u04ac\u04ad")
        buf.write(u"\3\2\2\2\u04ad\u04ae\7\u0197\2\2\u04ae\u04af\7q\2\2\u04af")
        buf.write(u"\u04b9\3\2\2\2\u04b0\u04b2\7q\2\2\u04b1\u04b3\7\u0197")
        buf.write(u"\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b6")
        buf.write(u"\3\2\2\2\u04b4\u04b7\5\u0096L\2\u04b5\u04b7\5\u0094K")
        buf.write(u"\2\u04b6\u04b4\3\2\2\2\u04b6\u04b5\3\2\2\2\u04b7\u04b9")
        buf.write(u"\3\2\2\2\u04b8\u04ab\3\2\2\2\u04b8\u04b0\3\2\2\2\u04b9")
        buf.write(u"Y\3\2\2\2\u04ba\u04bb\5\u00aaV\2\u04bb\u04bc\7\u0197")
        buf.write(u"\2\2\u04bc\u04bd\5\u00a2R\2\u04bd[\3\2\2\2\u04be\u04bf")
        buf.write(u"\7\33\2\2\u04bf\u04c1\7\u0197\2\2\u04c0\u04be\3\2\2\2")
        buf.write(u"\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3")
        buf.write(u"\5t;\2\u04c3\u04c6\7\u0197\2\2\u04c4\u04c5\7\33\2\2\u04c5")
        buf.write(u"\u04c7\7\u0197\2\2\u04c6\u04c4\3\2\2\2\u04c6\u04c7\3")
        buf.write(u"\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\5d\63\2\u04c9")
        buf.write(u"\u04cf\3\2\2\2\u04ca\u04cb\5d\63\2\u04cb\u04cc\7\u0197")
        buf.write(u"\2\2\u04cc\u04cd\5t;\2\u04cd\u04cf\3\2\2\2\u04ce\u04c0")
        buf.write(u"\3\2\2\2\u04ce\u04ca\3\2\2\2\u04cf]\3\2\2\2\u04d0\u04d2")
        buf.write(u"\5d\63\2\u04d1\u04d3\7\u0197\2\2\u04d2\u04d1\3\2\2\2")
        buf.write(u"\u04d2\u04d3\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d5")
        buf.write(u"\7\33\2\2\u04d5\u04d7\7\u0197\2\2\u04d6\u04d4\3\2\2\2")
        buf.write(u"\u04d6\u04d7\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04d9")
        buf.write(u"\5\u00a0Q\2\u04d9\u04e9\3\2\2\2\u04da\u04db\7\33\2\2")
        buf.write(u"\u04db\u04dd\7\u0197\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd")
        buf.write(u"\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\5t;\2\u04df")
        buf.write(u"\u04e0\7\u0197\2\2\u04e0\u04e1\5r:\2\u04e1\u04e9\3\2")
        buf.write(u"\2\2\u04e2\u04e9\5r:\2\u04e3\u04e4\5\u00a0Q\2\u04e4\u04e5")
        buf.write(u"\7\u0197\2\2\u04e5\u04e6\5d\63\2\u04e6\u04e9\3\2\2\2")
        buf.write(u"\u04e7\u04e9\5b\62\2\u04e8\u04d0\3\2\2\2\u04e8\u04dc")
        buf.write(u"\3\2\2\2\u04e8\u04e2\3\2\2\2\u04e8\u04e3\3\2\2\2\u04e8")
        buf.write(u"\u04e7\3\2\2\2\u04e9_\3\2\2\2\u04ea\u04eb\7\33\2\2\u04eb")
        buf.write(u"\u04ed\7\u0197\2\2\u04ec\u04ea\3\2\2\2\u04ec\u04ed\3")
        buf.write(u"\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef\5t;\2\u04ef\u04f0")
        buf.write(u"\7\u0197\2\2\u04f0\u04f1\7&\2\2\u04f1a\3\2\2\2\u04f2")
        buf.write(u"\u04f3\t\5\2\2\u04f3c\3\2\2\2\u04f4\u04fb\5f\64\2\u04f5")
        buf.write(u"\u04fb\5h\65\2\u04f6\u04fb\5j\66\2\u04f7\u04fb\5l\67")
        buf.write(u"\2\u04f8\u04fb\5n8\2\u04f9\u04fb\5p9\2\u04fa\u04f4\3")
        buf.write(u"\2\2\2\u04fa\u04f5\3\2\2\2\u04fa\u04f6\3\2\2\2\u04fa")
        buf.write(u"\u04f7\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fa\u04f9\3\2\2")
        buf.write(u"\2\u04fbe\3\2\2\2\u04fc\u04fd\7\37\2\2\u04fdg\3\2\2\2")
        buf.write(u"\u04fe\u04ff\7#\2\2\u04ffi\3\2\2\2\u0500\u0501\7!\2\2")
        buf.write(u"\u0501k\3\2\2\2\u0502\u0503\7\"\2\2\u0503m\3\2\2\2\u0504")
        buf.write(u"\u0505\7$\2\2\u0505o\3\2\2\2\u0506\u0507\7 \2\2\u0507")
        buf.write(u"q\3\2\2\2\u0508\u0509\7%\2\2\u0509s\3\2\2\2\u050a\u050c")
        buf.write(u"\7\25\2\2\u050b\u050a\3\2\2\2\u050b\u050c\3\2\2\2\u050c")
        buf.write(u"\u050d\3\2\2\2\u050d\u0510\7s\2\2\u050e\u050f\7\u0197")
        buf.write(u"\2\2\u050f\u0511\7\25\2\2\u0510\u050e\3\2\2\2\u0510\u0511")
        buf.write(u"\3\2\2\2\u0511u\3\2\2\2\u0512\u0515\5\u0094K\2\u0513")
        buf.write(u"\u0515\5\u0098M\2\u0514\u0512\3\2\2\2\u0514\u0513\3\2")
        buf.write(u"\2\2\u0515\u0517\3\2\2\2\u0516\u0518\7\u0197\2\2\u0517")
        buf.write(u"\u0516\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2")
        buf.write(u"\2\u0519\u051b\t\6\2\2\u051a\u051c\7\u0197\2\2\u051b")
        buf.write(u"\u051a\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051f\3\2\2")
        buf.write(u"\2\u051d\u0520\5\u0094K\2\u051e\u0520\5\u0098M\2\u051f")
        buf.write(u"\u051d\3\2\2\2\u051f\u051e\3\2\2\2\u0520w\3\2\2\2\u0521")
        buf.write(u"\u0522\7k\2\2\u0522y\3\2\2\2\u0523\u0525\5\u0098M\2\u0524")
        buf.write(u"\u0526\7\25\2\2\u0525\u0524\3\2\2\2\u0525\u0526\3\2\2")
        buf.write(u"\2\u0526\u0529\3\2\2\2\u0527\u0528\7\u0197\2\2\u0528")
        buf.write(u"\u052a\5\64\33\2\u0529\u0527\3\2\2\2\u052a\u052b\3\2")
        buf.write(u"\2\2\u052b\u0529\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u0535")
        buf.write(u"\3\2\2\2\u052d\u0532\5\u0098M\2\u052e\u052f\7\u0197\2")
        buf.write(u"\2\u052f\u0530\7\34\2\2\u0530\u0531\7\u0197\2\2\u0531")
        buf.write(u"\u0533\5\u0098M\2\u0532\u052e\3\2\2\2\u0532\u0533\3\2")
        buf.write(u"\2\2\u0533\u0535\3\2\2\2\u0534\u0523\3\2\2\2\u0534\u052d")
        buf.write(u"\3\2\2\2\u0535{\3\2\2\2\u0536\u0539\5\u0098M\2\u0537")
        buf.write(u"\u0538\7\u0197\2\2\u0538\u053a\5~@\2\u0539\u0537\3\2")
        buf.write(u"\2\2\u0539\u053a\3\2\2\2\u053a}\3\2\2\2\u053b\u053c\7")
        buf.write(u"\21\2\2\u053c\177\3\2\2\2\u053d\u0540\5\u0082B\2\u053e")
        buf.write(u"\u0540\5\u0084C\2\u053f\u053d\3\2\2\2\u053f\u053e\3\2")
        buf.write(u"\2\2\u0540\u0081\3\2\2\2\u0541\u0542\5\u0086D\2\u0542")
        buf.write(u"\u0083\3\2\2\2\u0543\u0545\5\u0092J\2\u0544\u0546\7\u0197")
        buf.write(u"\2\2\u0545\u0544\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0548")
        buf.write(u"\3\2\2\2\u0547\u0549\7\27\2\2\u0548\u0547\3\2\2\2\u0548")
        buf.write(u"\u0549\3\2\2\2\u0549\u054b\3\2\2\2\u054a\u054c\7\u0197")
        buf.write(u"\2\2\u054b\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054f")
        buf.write(u"\3\2\2\2\u054d\u0550\5\u0090I\2\u054e\u0550\5\u008eH")
        buf.write(u"\2\u054f\u054d\3\2\2\2\u054f\u054e\3\2\2\2\u0550\u055a")
        buf.write(u"\3\2\2\2\u0551\u0552\7\u0197\2\2\u0552\u0553\7\34\2\2")
        buf.write(u"\u0553\u0556\7\u0197\2\2\u0554\u0557\5\u0090I\2\u0555")
        buf.write(u"\u0557\5\u008eH\2\u0556\u0554\3\2\2\2\u0556\u0555\3\2")
        buf.write(u"\2\2\u0557\u0559\3\2\2\2\u0558\u0551\3\2\2\2\u0559\u055c")
        buf.write(u"\3\2\2\2\u055a\u0558\3\2\2\2\u055a\u055b\3\2\2\2\u055b")
        buf.write(u"\u0085\3\2\2\2\u055c\u055a\3\2\2\2\u055d\u0560\5\u0088")
        buf.write(u"E\2\u055e\u0560\5\u008aF\2\u055f\u055d\3\2\2\2\u055f")
        buf.write(u"\u055e\3\2\2\2\u0560\u0087\3\2\2\2\u0561\u0562\5\u00a4")
        buf.write(u"S\2\u0562\u0563\7\u0197\2\2\u0563\u0564\5\u009cO\2\u0564")
        buf.write(u"\u0565\7\u0197\2\2\u0565\u0566\7\34\2\2\u0566\u0567\7")
        buf.write(u"\u0197\2\2\u0567\u0568\5\u009cO\2\u0568\u05ef\3\2\2\2")
        buf.write(u"\u0569\u056a\5\u00a4S\2\u056a\u056b\7\u0197\2\2\u056b")
        buf.write(u"\u0573\5\u009cO\2\u056c\u056d\7\25\2\2\u056d\u056e\7")
        buf.write(u"\u0197\2\2\u056e\u0571\5\u009cO\2\u056f\u0570\7\u0197")
        buf.write(u"\2\2\u0570\u0572\t\7\2\2\u0571\u056f\3\2\2\2\u0571\u0572")
        buf.write(u"\3\2\2\2\u0572\u0574\3\2\2\2\u0573\u056c\3\2\2\2\u0574")
        buf.write(u"\u0575\3\2\2\2\u0575\u0573\3\2\2\2\u0575\u0576\3\2\2")
        buf.write(u"\2\u0576\u05ef\3\2\2\2\u0577\u0578\5\u00a4S\2\u0578\u0579")
        buf.write(u"\7\u0197\2\2\u0579\u057c\5\u009cO\2\u057a\u057b\7\u0197")
        buf.write(u"\2\2\u057b\u057d\5t;\2\u057c\u057a\3\2\2\2\u057c\u057d")
        buf.write(u"\3\2\2\2\u057d\u0591\3\2\2\2\u057e\u057f\7\25\2\2\u057f")
        buf.write(u"\u0580\7\u0197\2\2\u0580\u0582\t\7\2\2\u0581\u057e\3")
        buf.write(u"\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2\u0583")
        buf.write(u"\u0585\7\u0197\2\2\u0584\u0583\3\2\2\2\u0584\u0585\3")
        buf.write(u"\2\2\2\u0585\u0587\3\2\2\2\u0586\u0588\7\25\2\2\u0587")
        buf.write(u"\u0586\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u058a\3\2\2")
        buf.write(u"\2\u0589\u058b\7\u0197\2\2\u058a\u0589\3\2\2\2\u058a")
        buf.write(u"\u058b\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058f\5\u009c")
        buf.write(u"O\2\u058d\u058e\7\u0197\2\2\u058e\u0590\7\n\2\2\u058f")
        buf.write(u"\u058d\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0592\3\2\2")
        buf.write(u"\2\u0591\u0581\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0591")
        buf.write(u"\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u05ef\3\2\2\2\u0595")
        buf.write(u"\u0596\5\u00a4S\2\u0596\u059f\7\u0197\2\2\u0597\u059a")
        buf.write(u"\5\u009cO\2\u0598\u0599\7\u0197\2\2\u0599\u059b\t\7\2")
        buf.write(u"\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059c")
        buf.write(u"\3\2\2\2\u059c\u059d\7\25\2\2\u059d\u059e\7\u0197\2\2")
        buf.write(u"\u059e\u05a0\3\2\2\2\u059f\u0597\3\2\2\2\u05a0\u05a1")
        buf.write(u"\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2")
        buf.write(u"\u05a4\3\2\2\2\u05a3\u05a5\5\u009cO\2\u05a4\u05a3\3\2")
        buf.write(u"\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05ef\3\2\2\2\u05a6\u05a8")
        buf.write(u"\5\u00a4S\2\u05a7\u05a9\7\25\2\2\u05a8\u05a7\3\2\2\2")
        buf.write(u"\u05a8\u05a9\3\2\2\2\u05a9\u05ab\3\2\2\2\u05aa\u05ac")
        buf.write(u"\7\u0197\2\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2")
        buf.write(u"\u05ac\u05ad\3\2\2\2\u05ad\u05b0\5\u009cO\2\u05ae\u05af")
        buf.write(u"\7\u0197\2\2\u05af\u05b1\t\7\2\2\u05b0\u05ae\3\2\2\2")
        buf.write(u"\u05b0\u05b1\3\2\2\2\u05b1\u05ba\3\2\2\2\u05b2\u05b4")
        buf.write(u"\7\u0197\2\2\u05b3\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2")
        buf.write(u"\u05b4\u05b5\3\2\2\2\u05b5\u05b7\7\25\2\2\u05b6\u05b8")
        buf.write(u"\7\u0197\2\2\u05b7\u05b6\3\2\2\2\u05b7\u05b8\3\2\2\2")
        buf.write(u"\u05b8\u05b9\3\2\2\2\u05b9\u05bb\5\u009cO\2\u05ba\u05b3")
        buf.write(u"\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc")
        buf.write(u"\u05bd\3\2\2\2\u05bd\u05ef\3\2\2\2\u05be\u05bf\5\u009c")
        buf.write(u"O\2\u05bf\u05c0\7\25\2\2\u05c0\u05c1\7\u0197\2\2\u05c1")
        buf.write(u"\u05c5\5\u009cO\2\u05c2\u05c4\7\u0197\2\2\u05c3\u05c2")
        buf.write(u"\3\2\2\2\u05c4\u05c7\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c5")
        buf.write(u"\u05c6\3\2\2\2\u05c6\u05c8\3\2\2\2\u05c7\u05c5\3\2\2")
        buf.write(u"\2\u05c8\u05c9\5\u00a4S\2\u05c9\u05ef\3\2\2\2\u05ca\u05cb")
        buf.write(u"\5\u009cO\2\u05cb\u05cc\7\u0197\2\2\u05cc\u05cd\7\34")
        buf.write(u"\2\2\u05cd\u05ce\7\u0197\2\2\u05ce\u05cf\5\u009cO\2\u05cf")
        buf.write(u"\u05d0\7\u0197\2\2\u05d0\u05d2\5\u0092J\2\u05d1\u05d3")
        buf.write(u"\7\u0197\2\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2\2\2")
        buf.write(u"\u05d3\u05d4\3\2\2\2\u05d4\u05d5\5\u00a4S\2\u05d5\u05ef")
        buf.write(u"\3\2\2\2\u05d6\u05d7\5\u0092J\2\u05d7\u05d8\7\u0197\2")
        buf.write(u"\2\u05d8\u05d9\5\u009cO\2\u05d9\u05da\7\u0197\2\2\u05da")
        buf.write(u"\u05db\7\34\2\2\u05db\u05dc\7\u0197\2\2\u05dc\u05dd\5")
        buf.write(u"\u009cO\2\u05dd\u05de\7\u0197\2\2\u05de\u05df\5\u00a4")
        buf.write(u"S\2\u05df\u05ef\3\2\2\2\u05e0\u05e1\5\u00a4S\2\u05e1")
        buf.write(u"\u05e2\7\u0197\2\2\u05e2\u05e3\7\31\2\2\u05e3\u05e7\5")
        buf.write(u"\u009cO\2\u05e4\u05e5\7\25\2\2\u05e5\u05e6\7\u0197\2")
        buf.write(u"\2\u05e6\u05e8\5\u009cO\2\u05e7\u05e4\3\2\2\2\u05e8\u05e9")
        buf.write(u"\3\2\2\2\u05e9\u05e7\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea")
        buf.write(u"\u05ec\3\2\2\2\u05eb\u05ed\7\31\2\2\u05ec\u05eb\3\2\2")
        buf.write(u"\2\u05ec\u05ed\3\2\2\2\u05ed\u05ef\3\2\2\2\u05ee\u0561")
        buf.write(u"\3\2\2\2\u05ee\u0569\3\2\2\2\u05ee\u0577\3\2\2\2\u05ee")
        buf.write(u"\u0595\3\2\2\2\u05ee\u05a6\3\2\2\2\u05ee\u05be\3\2\2")
        buf.write(u"\2\u05ee\u05ca\3\2\2\2\u05ee\u05d6\3\2\2\2\u05ee\u05e0")
        buf.write(u"\3\2\2\2\u05ef\u0089\3\2\2\2\u05f0\u05f1\7u\2\2\u05f1")
        buf.write(u"\u05f3\7\u0197\2\2\u05f2\u05f0\3\2\2\2\u05f2\u05f3\3")
        buf.write(u"\2\2\2\u05f3\u05f7\3\2\2\2\u05f4\u05f5\5\u00acW\2\u05f5")
        buf.write(u"\u05f6\7\u0197\2\2\u05f6\u05f8\3\2\2\2\u05f7\u05f4\3")
        buf.write(u"\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9")
        buf.write(u"\u05fa\5\u009aN\2\u05fa\u05fe\7\u0197\2\2\u05fb\u05fc")
        buf.write(u"\5t;\2\u05fc\u05fd\7\u0197\2\2\u05fd\u05ff\3\2\2\2\u05fe")
        buf.write(u"\u05fb\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff\u0600\3\2\2")
        buf.write(u"\2\u0600\u0601\5\u0092J\2\u0601\u0602\7\u0197\2\2\u0602")
        buf.write(u"\u0603\5\u00a4S\2\u0603\u0624\3\2\2\2\u0604\u0605\5\u0092")
        buf.write(u"J\2\u0605\u0606\7\u0197\2\2\u0606\u0607\5\u009aN\2\u0607")
        buf.write(u"\u0608\7\u0197\2\2\u0608\u0609\5\u00a4S\2\u0609\u0624")
        buf.write(u"\3\2\2\2\u060a\u060b\5\u00a4S\2\u060b\u060c\7\u0197\2")
        buf.write(u"\2\u060c\u060f\5\u009aN\2\u060d\u060e\7\u0197\2\2\u060e")
        buf.write(u"\u0610\5t;\2\u060f\u060d\3\2\2\2\u060f\u0610\3\2\2\2")
        buf.write(u"\u0610\u0624\3\2\2\2\u0611\u0613\5\u00a4S\2\u0612\u0614")
        buf.write(u"\7\u0197\2\2\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2")
        buf.write(u"\u0614\u0615\3\2\2\2\u0615\u0618\5\u009aN\2\u0616\u0617")
        buf.write(u"\7\u0197\2\2\u0617\u0619\7\n\2\2\u0618\u0616\3\2\2\2")
        buf.write(u"\u0618\u0619\3\2\2\2\u0619\u0624\3\2\2\2\u061a\u061b")
        buf.write(u"\5\u0092J\2\u061b\u061c\7\u0197\2\2\u061c\u061d\7u\2")
        buf.write(u"\2\u061d\u061e\7\u0197\2\2\u061e\u061f\5\u009aN\2\u061f")
        buf.write(u"\u0620\7\25\2\2\u0620\u0621\7\u0197\2\2\u0621\u0622\5")
        buf.write(u"\u00a4S\2\u0622\u0624\3\2\2\2\u0623\u05f2\3\2\2\2\u0623")
        buf.write(u"\u0604\3\2\2\2\u0623\u060a\3\2\2\2\u0623\u0611\3\2\2")
        buf.write(u"\2\u0623\u061a\3\2\2\2\u0624\u008b\3\2\2\2\u0625\u0626")
        buf.write(u"\5\u009aN\2\u0626\u0627\7\u0197\2\2\u0627\u0628\5t;\2")
        buf.write(u"\u0628\u0629\7\u0197\2\2\u0629\u062a\5\u0092J\2\u062a")
        buf.write(u"\u062b\7\u0197\2\2\u062b\u062c\5\u00a8U\2\u062c\u008d")
        buf.write(u"\3\2\2\2\u062d\u0639\5\u009aN\2\u062e\u063a\7\u0197\2")
        buf.write(u"\2\u062f\u0631\7\25\2\2\u0630\u062f\3\2\2\2\u0630\u0631")
        buf.write(u"\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0633\7\u0197\2\2")
        buf.write(u"\u0633\u0635\5t;\2\u0634\u0636\7\25\2\2\u0635\u0634\3")
        buf.write(u"\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637\3\2\2\2\u0637")
        buf.write(u"\u0638\7\u0197\2\2\u0638\u063a\3\2\2\2\u0639\u062e\3")
        buf.write(u"\2\2\2\u0639\u0630\3\2\2\2\u063a\u063c\3\2\2\2\u063b")
        buf.write(u"\u062d\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063b\3\2\2")
        buf.write(u"\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0640")
        buf.write(u"\5\u00a4S\2\u0640\u008f\3\2\2\2\u0641\u064d\5\u009aN")
        buf.write(u"\2\u0642\u064e\7\u0197\2\2\u0643\u0645\7\25\2\2\u0644")
        buf.write(u"\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0646\3\2\2")
        buf.write(u"\2\u0646\u0647\7\u0197\2\2\u0647\u0649\5t;\2\u0648\u064a")
        buf.write(u"\7\25\2\2\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a")
        buf.write(u"\u064b\3\2\2\2\u064b\u064c\7\u0197\2\2\u064c\u064e\3")
        buf.write(u"\2\2\2\u064d\u0642\3\2\2\2\u064d\u0644\3\2\2\2\u064e")
        buf.write(u"\u0650\3\2\2\2\u064f\u0641\3\2\2\2\u0650\u0651\3\2\2")
        buf.write(u"\2\u0651\u064f\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0653")
        buf.write(u"\3\2\2\2\u0653\u0654\5\u00a8U\2\u0654\u0091\3\2\2\2\u0655")
        buf.write(u"\u0656\7t\2\2\u0656\u0093\3\2\2\2\u0657\u0659\7\22\2")
        buf.write(u"\2\u0658\u065a\7\u0197\2\2\u0659\u0658\3\2\2\2\u0659")
        buf.write(u"\u065a\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u0665\7\f\2")
        buf.write(u"\2\u065c\u065e\7\22\2\2\u065d\u065f\7\5\2\2\u065e\u065d")
        buf.write(u"\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0665\3\2\2\2\u0660")
        buf.write(u"\u0665\7\f\2\2\u0661\u0665\7\r\2\2\u0662\u0663\7\f\2")
        buf.write(u"\2\u0663\u0665\7\22\2\2\u0664\u0657\3\2\2\2\u0664\u065c")
        buf.write(u"\3\2\2\2\u0664\u0660\3\2\2\2\u0664\u0661\3\2\2\2\u0664")
        buf.write(u"\u0662\3\2\2\2\u0665\u0095\3\2\2\2\u0666\u0669\5\u0094")
        buf.write(u"K\2\u0667\u0669\5v<\2\u0668\u0666\3\2\2\2\u0668\u0667")
        buf.write(u"\3\2\2\2\u0669\u0679\3\2\2\2\u066a\u066c\7\u0197\2\2")
        buf.write(u"\u066b\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u0672")
        buf.write(u"\3\2\2\2\u066d\u0673\7\25\2\2\u066e\u0673\7\34\2\2\u066f")
        buf.write(u"\u0670\7\25\2\2\u0670\u0671\7\u0197\2\2\u0671\u0673\7")
        buf.write(u"\34\2\2\u0672\u066d\3\2\2\2\u0672\u066e\3\2\2\2\u0672")
        buf.write(u"\u066f\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0677\7\u0197")
        buf.write(u"\2\2\u0675\u0678\5\u0094K\2\u0676\u0678\5v<\2\u0677\u0675")
        buf.write(u"\3\2\2\2\u0677\u0676\3\2\2\2\u0678\u067a\3\2\2\2\u0679")
        buf.write(u"\u066b\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u0679\3\2\2")
        buf.write(u"\2\u067b\u067c\3\2\2\2\u067c\u0097\3\2\2\2\u067d\u067f")
        buf.write(u"\7\22\2\2\u067e\u0680\7\u0197\2\2\u067f\u067e\3\2\2\2")
        buf.write(u"\u067f\u0680\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0685")
        buf.write(u"\7\f\2\2\u0682\u0685\7\22\2\2\u0683\u0685\7\r\2\2\u0684")
        buf.write(u"\u067d\3\2\2\2\u0684\u0682\3\2\2\2\u0684\u0683\3\2\2")
        buf.write(u"\2\u0685\u0099\3\2\2\2\u0686\u0688\7\22\2\2\u0687\u0689")
        buf.write(u"\7\u0197\2\2\u0688\u0687\3\2\2\2\u0688\u0689\3\2\2\2")
        buf.write(u"\u0689\u0692\3\2\2\2\u068a\u068c\t\b\2\2\u068b\u068d")
        buf.write(u"\7\u0197\2\2\u068c\u068b\3\2\2\2\u068c\u068d\3\2\2\2")
        buf.write(u"\u068d\u068e\3\2\2\2\u068e\u0690\7\22\2\2\u068f\u0691")
        buf.write(u"\7\26\2\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691")
        buf.write(u"\u0693\3\2\2\2\u0692\u068a\3\2\2\2\u0692\u0693\3\2\2")
        buf.write(u"\2\u0693\u06a3\3\2\2\2\u0694\u0696\t\t\2\2\u0695\u0697")
        buf.write(u"\7\u0197\2\2\u0696\u0695\3\2\2\2\u0696\u0697\3\2\2\2")
        buf.write(u"\u0697\u0698\3\2\2\2\u0698\u06a0\7\22\2\2\u0699\u069b")
        buf.write(u"\7\u0197\2\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2\2\2")
        buf.write(u"\u069b\u069c\3\2\2\2\u069c\u069d\t\n\2\2\u069d\u069f")
        buf.write(u"\7\22\2\2\u069e\u069a\3\2\2\2\u069f\u06a2\3\2\2\2\u06a0")
        buf.write(u"\u069e\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a4\3\2\2")
        buf.write(u"\2\u06a2\u06a0\3\2\2\2\u06a3\u0694\3\2\2\2\u06a4\u06a5")
        buf.write(u"\3\2\2\2\u06a5\u06a3\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6")
        buf.write(u"\u009b\3\2\2\2\u06a7\u06b2\7\22\2\2\u06a8\u06aa\7\u0197")
        buf.write(u"\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab")
        buf.write(u"\3\2\2\2\u06ab\u06ad\t\b\2\2\u06ac\u06ae\7\u0197\2\2")
        buf.write(u"\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af")
        buf.write(u"\3\2\2\2\u06af\u06b1\7\22\2\2\u06b0\u06a9\3\2\2\2\u06b1")
        buf.write(u"\u06b4\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b2\u06b3\3\2\2")
        buf.write(u"\2\u06b3\u06b5\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u06b6")
        buf.write(u"\7\24\2\2\u06b6\u06b7\7\22\2\2\u06b7\u009d\3\2\2\2\u06b8")
        buf.write(u"\u06bb\7\22\2\2\u06b9\u06ba\7\23\2\2\u06ba\u06bc\7\22")
        buf.write(u"\2\2\u06bb\u06b9\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06bb")
        buf.write(u"\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u009f\3\2\2\2\u06bf")
        buf.write(u"\u06c4\5\u009aN\2\u06c0\u06c1\7\u0195\2\2\u06c1\u06c2")
        buf.write(u"\7\24\2\2\u06c2\u06c4\7\22\2\2\u06c3\u06bf\3\2\2\2\u06c3")
        buf.write(u"\u06c0\3\2\2\2\u06c4\u00a1\3\2\2\2\u06c5\u06c6\7\16\2")
        buf.write(u"\2\u06c6\u00a3\3\2\2\2\u06c7\u06c8\7\33\2\2\u06c8\u06d1")
        buf.write(u"\7\u0197\2\2\u06c9\u06cf\7\u0195\2\2\u06ca\u06cc\7\f")
        buf.write(u"\2\2\u06cb\u06cd\7\22\2\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd")
        buf.write(u"\3\2\2\2\u06cd\u06cf\3\2\2\2\u06ce\u06c9\3\2\2\2\u06ce")
        buf.write(u"\u06ca\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d2\7\u0197")
        buf.write(u"\2\2\u06d1\u06ce\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d1")
        buf.write(u"\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06d6\3\2\2\2\u06d5")
        buf.write(u"\u06c7\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d9\3\2\2")
        buf.write(u"\2\u06d7\u06d8\7\33\2\2\u06d8\u06da\7\u0197\2\2\u06d9")
        buf.write(u"\u06d7\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06db\3\2\2")
        buf.write(u"\2\u06db\u06dc\5\u00a6T\2\u06dc\u00a5\3\2\2\2\u06dd\u06de")
        buf.write(u"\7\n\2\2\u06de\u06e0\7\u0197\2\2\u06df\u06dd\3\2\2\2")
        buf.write(u"\u06df\u06e0\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e3")
        buf.write(u"\7}\2\2\u06e2\u06e4\7\u0197\2\2\u06e3\u06e2\3\2\2\2\u06e3")
        buf.write(u"\u06e4\3\2\2\2\u06e4\u06e6\3\2\2\2\u06e5\u06e7\7\n\2")
        buf.write(u"\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u0800")
        buf.write(u"\3\2\2\2\u06e8\u0800\7\177\2\2\u06e9\u0800\7~\2\2\u06ea")
        buf.write(u"\u0800\7\u0080\2\2\u06eb\u0800\7\u0081\2\2\u06ec\u0800")
        buf.write(u"\7\u0082\2\2\u06ed\u0800\7\u0083\2\2\u06ee\u0800\7\u0084")
        buf.write(u"\2\2\u06ef\u0800\7\u0085\2\2\u06f0\u0800\7\u0086\2\2")
        buf.write(u"\u06f1\u0800\7\u0087\2\2\u06f2\u0800\7\u0088\2\2\u06f3")
        buf.write(u"\u0800\7\u0089\2\2\u06f4\u0800\7\u008a\2\2\u06f5\u0800")
        buf.write(u"\7\u008b\2\2\u06f6\u0800\7\u008c\2\2\u06f7\u0800\7\u008d")
        buf.write(u"\2\2\u06f8\u0800\7\u008e\2\2\u06f9\u0800\7\u008f\2\2")
        buf.write(u"\u06fa\u0800\7\u0090\2\2\u06fb\u0800\7\u0091\2\2\u06fc")
        buf.write(u"\u0800\7\u0092\2\2\u06fd\u0800\7\u0093\2\2\u06fe\u0800")
        buf.write(u"\7\u0094\2\2\u06ff\u0800\7\u0095\2\2\u0700\u0800\7\u0096")
        buf.write(u"\2\2\u0701\u0800\7\u0097\2\2\u0702\u0800\7\u0098\2\2")
        buf.write(u"\u0703\u0800\7\u0099\2\2\u0704\u0800\7\u009a\2\2\u0705")
        buf.write(u"\u0800\7\u009b\2\2\u0706\u0800\7\u009c\2\2\u0707\u0800")
        buf.write(u"\7\u009d\2\2\u0708\u0800\7\u009e\2\2\u0709\u0800\7\u009f")
        buf.write(u"\2\2\u070a\u0800\7\u00a0\2\2\u070b\u0800\7\u00a1\2\2")
        buf.write(u"\u070c\u0800\7\u00a2\2\2\u070d\u0800\7\u00a3\2\2\u070e")
        buf.write(u"\u0800\7\u00a4\2\2\u070f\u0800\7\u00a5\2\2\u0710\u0800")
        buf.write(u"\7\u00a6\2\2\u0711\u0800\7\u00a7\2\2\u0712\u0800\7\u00a8")
        buf.write(u"\2\2\u0713\u0800\7\u00a9\2\2\u0714\u0800\7\u00aa\2\2")
        buf.write(u"\u0715\u0800\7\u00ab\2\2\u0716\u0800\7\u00ac\2\2\u0717")
        buf.write(u"\u0800\7\u00ad\2\2\u0718\u0800\7\u00ae\2\2\u0719\u0800")
        buf.write(u"\7\u00af\2\2\u071a\u0800\7\u00b0\2\2\u071b\u0800\7\u00b1")
        buf.write(u"\2\2\u071c\u0800\7\u00b2\2\2\u071d\u0800\7\u00b3\2\2")
        buf.write(u"\u071e\u0800\7\u00b4\2\2\u071f\u0800\7\u00b5\2\2\u0720")
        buf.write(u"\u0800\7\u00b6\2\2\u0721\u0800\7\u00b7\2\2\u0722\u0800")
        buf.write(u"\7\u00b8\2\2\u0723\u0800\7\u00b9\2\2\u0724\u0800\7\u00ba")
        buf.write(u"\2\2\u0725\u0800\7\u00bb\2\2\u0726\u0800\7\u00bc\2\2")
        buf.write(u"\u0727\u0800\7\u00bd\2\2\u0728\u0800\7\u00be\2\2\u0729")
        buf.write(u"\u0800\7\u00bf\2\2\u072a\u0800\7\u00c0\2\2\u072b\u0800")
        buf.write(u"\7\u00c1\2\2\u072c\u0800\7\u00c2\2\2\u072d\u0800\7\u00c3")
        buf.write(u"\2\2\u072e\u0800\7\u00c4\2\2\u072f\u0800\7\u00c5\2\2")
        buf.write(u"\u0730\u0800\7\u00c6\2\2\u0731\u0800\7\u00c7\2\2\u0732")
        buf.write(u"\u0800\7\u00c8\2\2\u0733\u0800\7\u00c9\2\2\u0734\u0800")
        buf.write(u"\7\u00ca\2\2\u0735\u0800\7\u00cb\2\2\u0736\u0800\7\u00cc")
        buf.write(u"\2\2\u0737\u0800\7\u00cd\2\2\u0738\u0800\7\u00ce\2\2")
        buf.write(u"\u0739\u0800\7\u00cf\2\2\u073a\u0800\7\u00d0\2\2\u073b")
        buf.write(u"\u0800\7\u00d1\2\2\u073c\u0800\7\u00d2\2\2\u073d\u0800")
        buf.write(u"\7\u00d3\2\2\u073e\u0800\7\u00d4\2\2\u073f\u0800\7\u00d5")
        buf.write(u"\2\2\u0740\u0800\7\u00d6\2\2\u0741\u0800\7\u00d7\2\2")
        buf.write(u"\u0742\u0800\7\u00d8\2\2\u0743\u0800\7\u00d9\2\2\u0744")
        buf.write(u"\u0800\7\u00da\2\2\u0745\u0800\7\u00db\2\2\u0746\u0800")
        buf.write(u"\7\u00dc\2\2\u0747\u0800\7\u00dd\2\2\u0748\u0800\7\u00de")
        buf.write(u"\2\2\u0749\u0800\7\u00df\2\2\u074a\u0800\7\u00e0\2\2")
        buf.write(u"\u074b\u0800\7\u00e1\2\2\u074c\u0800\7\u00e2\2\2\u074d")
        buf.write(u"\u0800\7\u00e3\2\2\u074e\u0800\7\u00e4\2\2\u074f\u0800")
        buf.write(u"\7\u00e5\2\2\u0750\u0800\7\u00e6\2\2\u0751\u0800\7\u00e7")
        buf.write(u"\2\2\u0752\u0800\7\u00e8\2\2\u0753\u0800\7\u00e9\2\2")
        buf.write(u"\u0754\u0800\7\u00ea\2\2\u0755\u0800\7\u00eb\2\2\u0756")
        buf.write(u"\u0800\7\u00ec\2\2\u0757\u0800\7\u00ed\2\2\u0758\u0800")
        buf.write(u"\7\u00ee\2\2\u0759\u0800\7\u00ef\2\2\u075a\u0800\7\u00f0")
        buf.write(u"\2\2\u075b\u0800\7\u00f1\2\2\u075c\u0800\7\u00f2\2\2")
        buf.write(u"\u075d\u0800\7\u00f3\2\2\u075e\u0800\7\u00f4\2\2\u075f")
        buf.write(u"\u0800\7\u00f5\2\2\u0760\u0800\7\u00f6\2\2\u0761\u0800")
        buf.write(u"\7\u00f7\2\2\u0762\u0800\7\u00f8\2\2\u0763\u0800\7\u00f9")
        buf.write(u"\2\2\u0764\u0800\7\u00fa\2\2\u0765\u0800\7\u00fb\2\2")
        buf.write(u"\u0766\u0800\7\u00fc\2\2\u0767\u0800\7\u00fd\2\2\u0768")
        buf.write(u"\u0800\7\u00fe\2\2\u0769\u0800\7\u00ff\2\2\u076a\u0800")
        buf.write(u"\7\u0100\2\2\u076b\u0800\7\u0101\2\2\u076c\u0800\7\u0102")
        buf.write(u"\2\2\u076d\u0800\7\u0103\2\2\u076e\u0800\7\u0104\2\2")
        buf.write(u"\u076f\u0800\7\u0105\2\2\u0770\u0800\7\u0106\2\2\u0771")
        buf.write(u"\u0800\7\u0107\2\2\u0772\u0800\7\u0108\2\2\u0773\u0800")
        buf.write(u"\7\u0109\2\2\u0774\u0800\7\u010a\2\2\u0775\u0800\7\u010b")
        buf.write(u"\2\2\u0776\u0800\7\u010c\2\2\u0777\u0800\7\u010d\2\2")
        buf.write(u"\u0778\u0800\7\u010e\2\2\u0779\u0800\7\u010f\2\2\u077a")
        buf.write(u"\u0800\7\u0110\2\2\u077b\u0800\7\u0111\2\2\u077c\u0800")
        buf.write(u"\7\u0112\2\2\u077d\u0800\7\u0113\2\2\u077e\u0800\7\u0114")
        buf.write(u"\2\2\u077f\u0800\7\u0115\2\2\u0780\u0800\7\u0116\2\2")
        buf.write(u"\u0781\u0800\7\u0117\2\2\u0782\u0800\7\u0118\2\2\u0783")
        buf.write(u"\u0800\7\u0119\2\2\u0784\u0800\7\u011a\2\2\u0785\u0800")
        buf.write(u"\7\u011b\2\2\u0786\u0800\7\u011c\2\2\u0787\u0800\7\u011d")
        buf.write(u"\2\2\u0788\u0800\7\u011e\2\2\u0789\u0800\7\u011f\2\2")
        buf.write(u"\u078a\u0800\7\u0120\2\2\u078b\u0800\7\u0121\2\2\u078c")
        buf.write(u"\u0800\7\u0122\2\2\u078d\u0800\7\u0123\2\2\u078e\u0800")
        buf.write(u"\7\u0124\2\2\u078f\u0800\7\u0125\2\2\u0790\u0800\7\u0126")
        buf.write(u"\2\2\u0791\u0800\7\u0127\2\2\u0792\u0800\7\u0128\2\2")
        buf.write(u"\u0793\u0800\7\u0129\2\2\u0794\u0800\7\u012a\2\2\u0795")
        buf.write(u"\u0800\7\u012b\2\2\u0796\u0800\7\u012c\2\2\u0797\u0800")
        buf.write(u"\7\u012d\2\2\u0798\u0800\7\u012e\2\2\u0799\u0800\7\u012f")
        buf.write(u"\2\2\u079a\u0800\7\u0130\2\2\u079b\u0800\7\u0131\2\2")
        buf.write(u"\u079c\u0800\7\u0132\2\2\u079d\u0800\7\u0133\2\2\u079e")
        buf.write(u"\u0800\7\u0134\2\2\u079f\u0800\7\u0135\2\2\u07a0\u0800")
        buf.write(u"\7\u0136\2\2\u07a1\u0800\7\u0137\2\2\u07a2\u0800\7\u0138")
        buf.write(u"\2\2\u07a3\u0800\7\u0139\2\2\u07a4\u0800\7\u013a\2\2")
        buf.write(u"\u07a5\u0800\7\u013b\2\2\u07a6\u0800\7\u013c\2\2\u07a7")
        buf.write(u"\u0800\7\u013d\2\2\u07a8\u0800\7\u013e\2\2\u07a9\u0800")
        buf.write(u"\7\u013f\2\2\u07aa\u0800\7\u0140\2\2\u07ab\u0800\7\u0141")
        buf.write(u"\2\2\u07ac\u0800\7\u0142\2\2\u07ad\u0800\7\u0143\2\2")
        buf.write(u"\u07ae\u0800\7\u0144\2\2\u07af\u0800\7\u0145\2\2\u07b0")
        buf.write(u"\u0800\7\u0146\2\2\u07b1\u0800\7\u0147\2\2\u07b2\u0800")
        buf.write(u"\7\u0148\2\2\u07b3\u0800\7\u0149\2\2\u07b4\u0800\7\u014a")
        buf.write(u"\2\2\u07b5\u0800\7\u014b\2\2\u07b6\u0800\7\u014c\2\2")
        buf.write(u"\u07b7\u0800\7\u014d\2\2\u07b8\u0800\7\u014e\2\2\u07b9")
        buf.write(u"\u0800\7\u014f\2\2\u07ba\u0800\7\u0150\2\2\u07bb\u0800")
        buf.write(u"\7\u0151\2\2\u07bc\u0800\7\u0152\2\2\u07bd\u0800\7\u0153")
        buf.write(u"\2\2\u07be\u0800\7\u0154\2\2\u07bf\u0800\7\u0155\2\2")
        buf.write(u"\u07c0\u0800\7\u0156\2\2\u07c1\u0800\7\u0157\2\2\u07c2")
        buf.write(u"\u0800\7\u0158\2\2\u07c3\u0800\7\u0159\2\2\u07c4\u0800")
        buf.write(u"\7\u015a\2\2\u07c5\u0800\7\u015b\2\2\u07c6\u0800\7\u015c")
        buf.write(u"\2\2\u07c7\u0800\7\u015d\2\2\u07c8\u0800\7\u015e\2\2")
        buf.write(u"\u07c9\u0800\7\u015f\2\2\u07ca\u0800\7\u0160\2\2\u07cb")
        buf.write(u"\u0800\7\u0161\2\2\u07cc\u0800\7\u0162\2\2\u07cd\u0800")
        buf.write(u"\7\u0163\2\2\u07ce\u0800\7\u0164\2\2\u07cf\u0800\7\u0165")
        buf.write(u"\2\2\u07d0\u0800\7\u0166\2\2\u07d1\u0800\7\u0167\2\2")
        buf.write(u"\u07d2\u0800\7\u0168\2\2\u07d3\u0800\7\u0169\2\2\u07d4")
        buf.write(u"\u0800\7\u016a\2\2\u07d5\u0800\7\u016b\2\2\u07d6\u0800")
        buf.write(u"\7\u016c\2\2\u07d7\u0800\7\u016d\2\2\u07d8\u0800\7\u016e")
        buf.write(u"\2\2\u07d9\u0800\7\u016f\2\2\u07da\u0800\7\u0170\2\2")
        buf.write(u"\u07db\u0800\7\u0171\2\2\u07dc\u0800\7\u0173\2\2\u07dd")
        buf.write(u"\u0800\7\u0172\2\2\u07de\u0800\7\u0174\2\2\u07df\u0800")
        buf.write(u"\7\u0175\2\2\u07e0\u0800\7\u0176\2\2\u07e1\u0800\7\u0177")
        buf.write(u"\2\2\u07e2\u0800\7\u0178\2\2\u07e3\u0800\7\u0179\2\2")
        buf.write(u"\u07e4\u0800\7\u017a\2\2\u07e5\u0800\7\u017b\2\2\u07e6")
        buf.write(u"\u0800\7\u017c\2\2\u07e7\u0800\7\u017d\2\2\u07e8\u0800")
        buf.write(u"\7\u017e\2\2\u07e9\u0800\7\u017f\2\2\u07ea\u0800\7\u0180")
        buf.write(u"\2\2\u07eb\u0800\7\u0181\2\2\u07ec\u0800\7\u0182\2\2")
        buf.write(u"\u07ed\u0800\7\u0183\2\2\u07ee\u0800\7\u0184\2\2\u07ef")
        buf.write(u"\u0800\7\u0185\2\2\u07f0\u0800\7\u0186\2\2\u07f1\u0800")
        buf.write(u"\7\u0187\2\2\u07f2\u0800\7\u0188\2\2\u07f3\u0800\7\u0189")
        buf.write(u"\2\2\u07f4\u0800\7\u018a\2\2\u07f5\u0800\7\u018b\2\2")
        buf.write(u"\u07f6\u0800\7\u018c\2\2\u07f7\u0800\7\u018d\2\2\u07f8")
        buf.write(u"\u0800\7\u018e\2\2\u07f9\u0800\7\u018f\2\2\u07fa\u0800")
        buf.write(u"\7\u0190\2\2\u07fb\u0800\7\u0191\2\2\u07fc\u0800\7\u0192")
        buf.write(u"\2\2\u07fd\u0800\7\u0193\2\2\u07fe\u0800\7\u0194\2\2")
        buf.write(u"\u07ff\u06df\3\2\2\2\u07ff\u06e8\3\2\2\2\u07ff\u06e9")
        buf.write(u"\3\2\2\2\u07ff\u06ea\3\2\2\2\u07ff\u06eb\3\2\2\2\u07ff")
        buf.write(u"\u06ec\3\2\2\2\u07ff\u06ed\3\2\2\2\u07ff\u06ee\3\2\2")
        buf.write(u"\2\u07ff\u06ef\3\2\2\2\u07ff\u06f0\3\2\2\2\u07ff\u06f1")
        buf.write(u"\3\2\2\2\u07ff\u06f2\3\2\2\2\u07ff\u06f3\3\2\2\2\u07ff")
        buf.write(u"\u06f4\3\2\2\2\u07ff\u06f5\3\2\2\2\u07ff\u06f6\3\2\2")
        buf.write(u"\2\u07ff\u06f7\3\2\2\2\u07ff\u06f8\3\2\2\2\u07ff\u06f9")
        buf.write(u"\3\2\2\2\u07ff\u06fa\3\2\2\2\u07ff\u06fb\3\2\2\2\u07ff")
        buf.write(u"\u06fc\3\2\2\2\u07ff\u06fd\3\2\2\2\u07ff\u06fe\3\2\2")
        buf.write(u"\2\u07ff\u06ff\3\2\2\2\u07ff\u0700\3\2\2\2\u07ff\u0701")
        buf.write(u"\3\2\2\2\u07ff\u0702\3\2\2\2\u07ff\u0703\3\2\2\2\u07ff")
        buf.write(u"\u0704\3\2\2\2\u07ff\u0705\3\2\2\2\u07ff\u0706\3\2\2")
        buf.write(u"\2\u07ff\u0707\3\2\2\2\u07ff\u0708\3\2\2\2\u07ff\u0709")
        buf.write(u"\3\2\2\2\u07ff\u070a\3\2\2\2\u07ff\u070b\3\2\2\2\u07ff")
        buf.write(u"\u070c\3\2\2\2\u07ff\u070d\3\2\2\2\u07ff\u070e\3\2\2")
        buf.write(u"\2\u07ff\u070f\3\2\2\2\u07ff\u0710\3\2\2\2\u07ff\u0711")
        buf.write(u"\3\2\2\2\u07ff\u0712\3\2\2\2\u07ff\u0713\3\2\2\2\u07ff")
        buf.write(u"\u0714\3\2\2\2\u07ff\u0715\3\2\2\2\u07ff\u0716\3\2\2")
        buf.write(u"\2\u07ff\u0717\3\2\2\2\u07ff\u0718\3\2\2\2\u07ff\u0719")
        buf.write(u"\3\2\2\2\u07ff\u071a\3\2\2\2\u07ff\u071b\3\2\2\2\u07ff")
        buf.write(u"\u071c\3\2\2\2\u07ff\u071d\3\2\2\2\u07ff\u071e\3\2\2")
        buf.write(u"\2\u07ff\u071f\3\2\2\2\u07ff\u0720\3\2\2\2\u07ff\u0721")
        buf.write(u"\3\2\2\2\u07ff\u0722\3\2\2\2\u07ff\u0723\3\2\2\2\u07ff")
        buf.write(u"\u0724\3\2\2\2\u07ff\u0725\3\2\2\2\u07ff\u0726\3\2\2")
        buf.write(u"\2\u07ff\u0727\3\2\2\2\u07ff\u0728\3\2\2\2\u07ff\u0729")
        buf.write(u"\3\2\2\2\u07ff\u072a\3\2\2\2\u07ff\u072b\3\2\2\2\u07ff")
        buf.write(u"\u072c\3\2\2\2\u07ff\u072d\3\2\2\2\u07ff\u072e\3\2\2")
        buf.write(u"\2\u07ff\u072f\3\2\2\2\u07ff\u0730\3\2\2\2\u07ff\u0731")
        buf.write(u"\3\2\2\2\u07ff\u0732\3\2\2\2\u07ff\u0733\3\2\2\2\u07ff")
        buf.write(u"\u0734\3\2\2\2\u07ff\u0735\3\2\2\2\u07ff\u0736\3\2\2")
        buf.write(u"\2\u07ff\u0737\3\2\2\2\u07ff\u0738\3\2\2\2\u07ff\u0739")
        buf.write(u"\3\2\2\2\u07ff\u073a\3\2\2\2\u07ff\u073b\3\2\2\2\u07ff")
        buf.write(u"\u073c\3\2\2\2\u07ff\u073d\3\2\2\2\u07ff\u073e\3\2\2")
        buf.write(u"\2\u07ff\u073f\3\2\2\2\u07ff\u0740\3\2\2\2\u07ff\u0741")
        buf.write(u"\3\2\2\2\u07ff\u0742\3\2\2\2\u07ff\u0743\3\2\2\2\u07ff")
        buf.write(u"\u0744\3\2\2\2\u07ff\u0745\3\2\2\2\u07ff\u0746\3\2\2")
        buf.write(u"\2\u07ff\u0747\3\2\2\2\u07ff\u0748\3\2\2\2\u07ff\u0749")
        buf.write(u"\3\2\2\2\u07ff\u074a\3\2\2\2\u07ff\u074b\3\2\2\2\u07ff")
        buf.write(u"\u074c\3\2\2\2\u07ff\u074d\3\2\2\2\u07ff\u074e\3\2\2")
        buf.write(u"\2\u07ff\u074f\3\2\2\2\u07ff\u0750\3\2\2\2\u07ff\u0751")
        buf.write(u"\3\2\2\2\u07ff\u0752\3\2\2\2\u07ff\u0753\3\2\2\2\u07ff")
        buf.write(u"\u0754\3\2\2\2\u07ff\u0755\3\2\2\2\u07ff\u0756\3\2\2")
        buf.write(u"\2\u07ff\u0757\3\2\2\2\u07ff\u0758\3\2\2\2\u07ff\u0759")
        buf.write(u"\3\2\2\2\u07ff\u075a\3\2\2\2\u07ff\u075b\3\2\2\2\u07ff")
        buf.write(u"\u075c\3\2\2\2\u07ff\u075d\3\2\2\2\u07ff\u075e\3\2\2")
        buf.write(u"\2\u07ff\u075f\3\2\2\2\u07ff\u0760\3\2\2\2\u07ff\u0761")
        buf.write(u"\3\2\2\2\u07ff\u0762\3\2\2\2\u07ff\u0763\3\2\2\2\u07ff")
        buf.write(u"\u0764\3\2\2\2\u07ff\u0765\3\2\2\2\u07ff\u0766\3\2\2")
        buf.write(u"\2\u07ff\u0767\3\2\2\2\u07ff\u0768\3\2\2\2\u07ff\u0769")
        buf.write(u"\3\2\2\2\u07ff\u076a\3\2\2\2\u07ff\u076b\3\2\2\2\u07ff")
        buf.write(u"\u076c\3\2\2\2\u07ff\u076d\3\2\2\2\u07ff\u076e\3\2\2")
        buf.write(u"\2\u07ff\u076f\3\2\2\2\u07ff\u0770\3\2\2\2\u07ff\u0771")
        buf.write(u"\3\2\2\2\u07ff\u0772\3\2\2\2\u07ff\u0773\3\2\2\2\u07ff")
        buf.write(u"\u0774\3\2\2\2\u07ff\u0775\3\2\2\2\u07ff\u0776\3\2\2")
        buf.write(u"\2\u07ff\u0777\3\2\2\2\u07ff\u0778\3\2\2\2\u07ff\u0779")
        buf.write(u"\3\2\2\2\u07ff\u077a\3\2\2\2\u07ff\u077b\3\2\2\2\u07ff")
        buf.write(u"\u077c\3\2\2\2\u07ff\u077d\3\2\2\2\u07ff\u077e\3\2\2")
        buf.write(u"\2\u07ff\u077f\3\2\2\2\u07ff\u0780\3\2\2\2\u07ff\u0781")
        buf.write(u"\3\2\2\2\u07ff\u0782\3\2\2\2\u07ff\u0783\3\2\2\2\u07ff")
        buf.write(u"\u0784\3\2\2\2\u07ff\u0785\3\2\2\2\u07ff\u0786\3\2\2")
        buf.write(u"\2\u07ff\u0787\3\2\2\2\u07ff\u0788\3\2\2\2\u07ff\u0789")
        buf.write(u"\3\2\2\2\u07ff\u078a\3\2\2\2\u07ff\u078b\3\2\2\2\u07ff")
        buf.write(u"\u078c\3\2\2\2\u07ff\u078d\3\2\2\2\u07ff\u078e\3\2\2")
        buf.write(u"\2\u07ff\u078f\3\2\2\2\u07ff\u0790\3\2\2\2\u07ff\u0791")
        buf.write(u"\3\2\2\2\u07ff\u0792\3\2\2\2\u07ff\u0793\3\2\2\2\u07ff")
        buf.write(u"\u0794\3\2\2\2\u07ff\u0795\3\2\2\2\u07ff\u0796\3\2\2")
        buf.write(u"\2\u07ff\u0797\3\2\2\2\u07ff\u0798\3\2\2\2\u07ff\u0799")
        buf.write(u"\3\2\2\2\u07ff\u079a\3\2\2\2\u07ff\u079b\3\2\2\2\u07ff")
        buf.write(u"\u079c\3\2\2\2\u07ff\u079d\3\2\2\2\u07ff\u079e\3\2\2")
        buf.write(u"\2\u07ff\u079f\3\2\2\2\u07ff\u07a0\3\2\2\2\u07ff\u07a1")
        buf.write(u"\3\2\2\2\u07ff\u07a2\3\2\2\2\u07ff\u07a3\3\2\2\2\u07ff")
        buf.write(u"\u07a4\3\2\2\2\u07ff\u07a5\3\2\2\2\u07ff\u07a6\3\2\2")
        buf.write(u"\2\u07ff\u07a7\3\2\2\2\u07ff\u07a8\3\2\2\2\u07ff\u07a9")
        buf.write(u"\3\2\2\2\u07ff\u07aa\3\2\2\2\u07ff\u07ab\3\2\2\2\u07ff")
        buf.write(u"\u07ac\3\2\2\2\u07ff\u07ad\3\2\2\2\u07ff\u07ae\3\2\2")
        buf.write(u"\2\u07ff\u07af\3\2\2\2\u07ff\u07b0\3\2\2\2\u07ff\u07b1")
        buf.write(u"\3\2\2\2\u07ff\u07b2\3\2\2\2\u07ff\u07b3\3\2\2\2\u07ff")
        buf.write(u"\u07b4\3\2\2\2\u07ff\u07b5\3\2\2\2\u07ff\u07b6\3\2\2")
        buf.write(u"\2\u07ff\u07b7\3\2\2\2\u07ff\u07b8\3\2\2\2\u07ff\u07b9")
        buf.write(u"\3\2\2\2\u07ff\u07ba\3\2\2\2\u07ff\u07bb\3\2\2\2\u07ff")
        buf.write(u"\u07bc\3\2\2\2\u07ff\u07bd\3\2\2\2\u07ff\u07be\3\2\2")
        buf.write(u"\2\u07ff\u07bf\3\2\2\2\u07ff\u07c0\3\2\2\2\u07ff\u07c1")
        buf.write(u"\3\2\2\2\u07ff\u07c2\3\2\2\2\u07ff\u07c3\3\2\2\2\u07ff")
        buf.write(u"\u07c4\3\2\2\2\u07ff\u07c5\3\2\2\2\u07ff\u07c6\3\2\2")
        buf.write(u"\2\u07ff\u07c7\3\2\2\2\u07ff\u07c8\3\2\2\2\u07ff\u07c9")
        buf.write(u"\3\2\2\2\u07ff\u07ca\3\2\2\2\u07ff\u07cb\3\2\2\2\u07ff")
        buf.write(u"\u07cc\3\2\2\2\u07ff\u07cd\3\2\2\2\u07ff\u07ce\3\2\2")
        buf.write(u"\2\u07ff\u07cf\3\2\2\2\u07ff\u07d0\3\2\2\2\u07ff\u07d1")
        buf.write(u"\3\2\2\2\u07ff\u07d2\3\2\2\2\u07ff\u07d3\3\2\2\2\u07ff")
        buf.write(u"\u07d4\3\2\2\2\u07ff\u07d5\3\2\2\2\u07ff\u07d6\3\2\2")
        buf.write(u"\2\u07ff\u07d7\3\2\2\2\u07ff\u07d8\3\2\2\2\u07ff\u07d9")
        buf.write(u"\3\2\2\2\u07ff\u07da\3\2\2\2\u07ff\u07db\3\2\2\2\u07ff")
        buf.write(u"\u07dc\3\2\2\2\u07ff\u07dd\3\2\2\2\u07ff\u07de\3\2\2")
        buf.write(u"\2\u07ff\u07df\3\2\2\2\u07ff\u07e0\3\2\2\2\u07ff\u07e1")
        buf.write(u"\3\2\2\2\u07ff\u07e2\3\2\2\2\u07ff\u07e3\3\2\2\2\u07ff")
        buf.write(u"\u07e4\3\2\2\2\u07ff\u07e5\3\2\2\2\u07ff\u07e6\3\2\2")
        buf.write(u"\2\u07ff\u07e7\3\2\2\2\u07ff\u07e8\3\2\2\2\u07ff\u07e9")
        buf.write(u"\3\2\2\2\u07ff\u07ea\3\2\2\2\u07ff\u07eb\3\2\2\2\u07ff")
        buf.write(u"\u07ec\3\2\2\2\u07ff\u07ed\3\2\2\2\u07ff\u07ee\3\2\2")
        buf.write(u"\2\u07ff\u07ef\3\2\2\2\u07ff\u07f0\3\2\2\2\u07ff\u07f1")
        buf.write(u"\3\2\2\2\u07ff\u07f2\3\2\2\2\u07ff\u07f3\3\2\2\2\u07ff")
        buf.write(u"\u07f4\3\2\2\2\u07ff\u07f5\3\2\2\2\u07ff\u07f6\3\2\2")
        buf.write(u"\2\u07ff\u07f7\3\2\2\2\u07ff\u07f8\3\2\2\2\u07ff\u07f9")
        buf.write(u"\3\2\2\2\u07ff\u07fa\3\2\2\2\u07ff\u07fb\3\2\2\2\u07ff")
        buf.write(u"\u07fc\3\2\2\2\u07ff\u07fd\3\2\2\2\u07ff\u07fe\3\2\2")
        buf.write(u"\2\u0800\u00a7\3\2\2\2\u0801\u0802\7\33\2\2\u0802\u0803")
        buf.write(u"\7\u0197\2\2\u0803\u0804\5t;\2\u0804\u0805\7\u0197\2")
        buf.write(u"\2\u0805\u0806\7\t\2\2\u0806\u00a9\3\2\2\2\u0807\u0808")
        buf.write(u"\7h\2\2\u0808\u00ab\3\2\2\2\u0809\u080a\7\36\2\2\u080a")
        buf.write(u"\u00ad\3\2\2\2\u00e9\u00b3\u00b5\u00bd\u00c5\u00c9\u00ce")
        buf.write(u"\u00d4\u00d8\u00df\u00e7\u00e9\u00ef\u00ff\u0101\u0111")
        buf.write(u"\u0119\u011e\u015e\u0163\u0180\u0185\u0188\u018e\u0196")
        buf.write(u"\u019d\u019f\u01a7\u01ad\u01b9\u01c2\u01cd\u01d5\u01dd")
        buf.write(u"\u01e4\u01ef\u01f7\u01ff\u0205\u020d\u0222\u0231\u023f")
        buf.write(u"\u0248\u024d\u0253\u025b\u025f\u026d\u0289\u028f\u0296")
        buf.write(u"\u02af\u02b1\u02b9\u02c9\u02d7\u02e6\u02ea\u02ee\u02f4")
        buf.write(u"\u0300\u0308\u0310\u0315\u031c\u0321\u0333\u0337\u033b")
        buf.write(u"\u033d\u0341\u0345\u0349\u034d\u0354\u0369\u0378\u038e")
        buf.write(u"\u0393\u0397\u039b\u039f\u03a1\u03a5\u03a9\u03af\u03b3")
        buf.write(u"\u03b9\u03c2\u03ce\u03d7\u03e5\u03ec\u03f4\u03f9\u03fb")
        buf.write(u"\u0400\u0407\u040c\u0413\u0417\u041a\u041e\u0423\u0427")
        buf.write(u"\u042d\u0433\u0437\u043a\u043e\u0442\u0446\u044d\u0454")
        buf.write(u"\u0458\u045d\u0463\u046a\u046e\u0472\u0478\u047f\u0483")
        buf.write(u"\u0487\u048d\u0494\u049a\u04a0\u04a7\u04ab\u04b2\u04b6")
        buf.write(u"\u04b8\u04c0\u04c6\u04ce\u04d2\u04d6\u04dc\u04e8\u04ec")
        buf.write(u"\u04fa\u050b\u0510\u0514\u0517\u051b\u051f\u0525\u052b")
        buf.write(u"\u0532\u0534\u0539\u053f\u0545\u0548\u054b\u054f\u0556")
        buf.write(u"\u055a\u055f\u0571\u0575\u057c\u0581\u0584\u0587\u058a")
        buf.write(u"\u058f\u0593\u059a\u05a1\u05a4\u05a8\u05ab\u05b0\u05b3")
        buf.write(u"\u05b7\u05bc\u05c5\u05d2\u05e9\u05ec\u05ee\u05f2\u05f7")
        buf.write(u"\u05fe\u060f\u0613\u0618\u0623\u0630\u0635\u0639\u063d")
        buf.write(u"\u0644\u0649\u064d\u0651\u0659\u065e\u0664\u0668\u066b")
        buf.write(u"\u0672\u0677\u067b\u067f\u0684\u0688\u068c\u0690\u0692")
        buf.write(u"\u0696\u069a\u06a0\u06a5\u06a9\u06ad\u06b2\u06bd\u06c3")
        buf.write(u"\u06cc\u06ce\u06d3\u06d5\u06d9\u06df\u06e3\u06e6\u07ff")
        return buf.getvalue()


class Legal_refParser ( Parser ):

    grammarFileName = "Legal_ref.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'\u03B7\u03C2'", u"'\u03C3\u03C4\u03B9\u03C2'", 
                     u"'\u00B0'", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'\u03BC\u03B5 \u03C4\u03B7\u03BD'", 
                     u"'\u03BA\u03B1\u03B8\u03CE\u03C2'", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'.'", u"':'", u"'\\'", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'\u039A.\u03A6.\u03A3.'", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'\u039A.\u03A6.\u0391.\u03A3.'", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'(\u0395\u0395)'", 
                     u"<INVALID>", u"<INVALID>", u"'\u03C3\u03C4\u03BF'", 
                     u"'\u03BC\u03B5 \u03C4\u03BF'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"EOK", u"EE_COUNCIL", u"NSK", u"COURT_TEXT", u"OLOMELEIA", 
                      u"MELI", u"IONIKO_SYSTEM", u"LEKTIKO_ID", u"LATIN_ID", 
                      u"WITH", u"SINCE", u"NEXT_ALL", u"NUM", u"HYPHEN", 
                      u"SLASH", u"COMMA", u"DOT", u"COLON", u"BACKSLASH", 
                      u"BRACKET", u"APOSTROPHE", u"OF", u"AND", u"RANGE", 
                      u"BT", u"ACTS", u"ROYAL_DECREE", u"COMPULSORY_LAW", 
                      u"DECREE_LAW", u"PRESIDENTIAL_DECREE", u"DECREE", 
                      u"SYNTAGMA", u"KWDIKAS_TEXT", u"KWDIKAS_FOROLOGIKIS_DIADIKASIAS", 
                      u"YPALLILIKOS_KWDIKAS", u"AGROTIKOS_KWDIKAS", u"ALIEUTIKOS_KWDIKAS", 
                      u"ASTIKOS_KWDIKAS", u"AGORANOMIKOS_KWDIKAS", u"GENIKOS_OIKODOMIKOS_KANONISMOS", 
                      u"NEOS_OIKODOMIKOS_KANONISMOS", u"KWDIKAS_ADEIWN_FORTIGWN_AUTOKINITWN", 
                      u"KWDIKAS_APODIMIAS_METANASTEUSIS_DIAVATIRIA", u"KWDIKAS_DEONTOLOGIAS_DIKIGORIKOU_LEITOURGIMATOS", 
                      u"KWDIKAS_DIATAGMATWN_GIA_DIMOTOLOGIA", u"KWDIKAS_DIATAKSEWN_STRATOLOGIKIS_FISIS", 
                      u"KWDIKAS_ELLINIKIS_ITHAGENEIAS", u"KWDIKAS_ESODWN_DIMWN_KAI_KOINOTITWN", 
                      u"DASIKOS_KWDIKAS", u"KWDIKAS_AEROPORIKOY_DIKAIOY", 
                      u"KWDIKAS_KATASKEUIS_DIMOSIWN_ERGWN", u"KWDIKAS_NOMOTHESIAS_KUVERNISIS", 
                      u"KWDIKAS_NOMWN_GIA_NARKWTIKA", u"KWDIKAS_PAROXIS_EPENDITIKWN_KINITRWN", 
                      u"KWDIKAS_PERI_ARXAIOTITWN", u"KWDIKAS_SYNALLAGWN_HLEKTRIKIS_ENERGEIAS", 
                      u"KWDIKAS_TAMEIOU_NOMIKWN", u"KWDIKAS_TROFIMWN_KAI_POTWN", 
                      u"KWDIKAS_FOROLOGIAS_KAPNOU", u"KWDIKAS_FOROLOGIKWN_STOIXEIWN", 
                      u"KWDIKAS_ANAGK_APAL_AKINITWN", u"KWDIKAS_BIBLIWN_KAI_STOIXEIWN", 
                      u"KWDIKAS_POINIKIS_DIKONOMIAS", u"POINIKOS_KWDIKAS", 
                      u"ETHNIKOS_TELWNIAKOS_KWDIKAS", u"KWDIKAS_FOROLOGIAS_EISODIMATOS", 
                      u"KWDIKAS_BASIKIS_POLEODOMIKIS_NOMOTHESIAS", u"KTINOTROFIKOS_KWDIKAS", 
                      u"KWDIKAS_TELWN_XARTOSIMOU", u"KWDIKAS_BASIKWN_KANONWN_KRATOUMENWN", 
                      u"KWDIKAS_FOROLOGIKIS_DIKONOMIAS", u"KWDIKAS_DIKIGORWN", 
                      u"KWDIKAS_DIMOSIOU_LOGISTIKOU", u"KWDIKAS_DIMOSIOU_NAUTIKOU_DIKAIOU", 
                      u"KWDIKAS_FOROY_PROSTITHEMENIS_AKSIAS", u"KWDIKAS_POLITIKIS_DIKONOMIAS", 
                      u"KWDIKAS_DHMWN_KAI_KOINOTITWN", u"KWDIKAS_ODIKIS_KYKLOFORIAS", 
                      u"KWDIKAS_DIKASTIKOU_SWMATOS_ENOPLWN_DINAMEWN", u"KWDIKAS_DIKASTIKWN_EPIMELITWN", 
                      u"KWDIKAS_ORGANISMOU_DIKASTIRIWN", u"KWDIKAS_DIKASTIKWN_YPALLHLWN", 
                      u"KWDIKAS_DIKWN_DIMOSIOU", u"KWDIKAS_DIOIKITIKIS_DIADIKASIAS", 
                      u"KWDIKAS_DIOIKITIKIS_DIKONOMIAS", u"KWDIKAS_EISPRAKSEWN_DHMOSIWN_ESODWN", 
                      u"KWDIKAS_FARMAKEUTIKIS_DEONTOLOGIAS", u"KWDIKAS_IDIWTIKOU_NAUTIKOU_DIKAIOU", 
                      u"KWDIKAS_POLEMIKWN_SYNTAKSEWN", u"KWDIKAS_POLITIKWN_KAI_STRATIWTIKWN_SUNTAKSEWN", 
                      u"KWDIKAS_METOXIKOU_TAMEIOU_POLITIKWN_YPALLHLWN", 
                      u"KWDIKAS_METOXIKOU_TAMEIOU_STRATOU", u"KWDIKAS_PROSOPIKOU_LIMENIKOU_SWMATOS", 
                      u"KWDIKAS_SYMVOLEOGRAFWN", u"KWDIKAS_SYNTAKSEWN_PROSOPIKOU_OSE", 
                      u"KWDIKAS_ANOTATOU_EIDIKOU_DIKASTIRIOU", u"KWDIKAS_FOROLOGIAS_KLIRONOMIWN", 
                      u"KWDIKAS_FOROLOGIKIS_APEIKONISIS_SYNALLAGWN", u"PARARTIMA_TEXT", 
                      u"PART_TEXT", u"CHAPTER_TEXT", u"ARTHRA_PLURAL", u"ARTHRO_TEXT", 
                      u"PAR_TEXT", u"POINT_TEXT", u"SUBPAR_TEXT", u"PERIPTWSI_TEXT", 
                      u"EDAFIO_TEXT", u"STOIXEIO_TEXT", u"SPECIAL_TEXT", 
                      u"DECISION_ELEMENT", u"YP_ARITHM", u"EU_REGULATION", 
                      u"EU_DIRECTIVE", u"EU_TEXT", u"LEGAL_OPINION_TEXT", 
                      u"NOMIKO_SYMB_KRATOUS", u"STO", u"ME_TO", u"STE", 
                      u"AED", u"SUPREME_COURT", u"MAGISTRATE_COURT_OF_THESSALONIKI", 
                      u"MAGISTRATE_COURT_OF_LAMIA", u"MAGISTRATE_COURT_OF_PIRAEUS", 
                      u"MAGISTRATE_COURT_OF_ATHENS", u"APELLATE_COURT_OF_ATHENS", 
                      u"APELLATE_COURT_OF_LAMIA", u"APELLATE_COURT_OF_PIRAEUS", 
                      u"APELLATE_COURT_OF_THESSALONIKI", u"APELLATE_COURT_OF_CORFU", 
                      u"APELLATE_COURT_OF_THRAKI", u"APELLATE_COURT_OF_IOANNINA", 
                      u"APELLATE_COURT_OF_DODEKANISA", u"APELLATE_COURT_OF_AEGEAN", 
                      u"APELLATE_COURT_OF_CRETE", u"APELLATE_COURT_OF_WEST_MACEDONIA", 
                      u"APELLATE_COURT_OF_LARISA", u"APELLATE_COURT_OF_NAFPLIO", 
                      u"APELLATE_COURT_OF_PATRAS", u"APELLATE_COURT_OF_WEST_STEREAS", 
                      u"APELLATE_COURT_OF_NORTH_AEGEAN", u"APELLATE_COURT_OF_EAST_CRETE", 
                      u"APELLATE_COURT_OF_KALAMATA", u"APELLATE_COURT_OF_EVOIA", 
                      u"FIRST_INSTANCE_COURT_OF_ATHENS", u"FIRST_INSTANCE_COURT_OF_LAMIA", 
                      u"FIRST_INSTANCE_COURT_OF_AMFISSA", u"FIRST_INSTANCE_COURT_OF_EVRITANIA", 
                      u"FIRST_INSTANCE_COURT_OF_LIVADIA", u"FIRST_INSTANCE_COURT_OF_PIRAEUS", 
                      u"FIRST_INSTANCE_COURT_OF_THESSALONIKI", u"FIRST_INSTANCE_COURT_OF_VEROIA", 
                      u"FIRST_INSTANCE_COURT_OF_EDESSA", u"FIRST_INSTANCE_COURT_OF_KATERINI", 
                      u"FIRST_INSTANCE_COURT_OF_KILKIS", u"FIRST_INSTANCE_COURT_OF_SERRES", 
                      u"FIRST_INSTANCE_COURT_OF_XALKIDIKI", u"FIRST_INSTANCE_COURT_OF_CORFU", 
                      u"FIRST_INSTANCE_COURT_OF_GIANNITSA", u"FIRST_INSTANCE_COURT_OF_THESPRWTIA", 
                      u"FIRST_INSTANCE_COURT_OF_RODOPI", u"FIRST_INSTANCE_COURT_OF_DRAMA", 
                      u"FIRST_INSTANCE_COURT_OF_EVROS", u"FIRST_INSTANCE_COURT_OF_KAVALA", 
                      u"FIRST_INSTANCE_COURT_OF_XANTHI", u"FIRST_INSTANCE_COURT_OF_ORESTIADA", 
                      u"FIRST_INSTANCE_COURT_OF_IOANNINA", u"FIRST_INSTANCE_COURT_OF_ARTA", 
                      u"FIRST_INSTANCE_COURT_OF_PREVEZA", u"FIRST_INSTANCE_COURT_OF_RODOS", 
                      u"FIRST_INSTANCE_COURT_OF_KOS", u"FIRST_INSTANCE_COURT_OF_SYROS", 
                      u"FIRST_INSTANCE_COURT_OF_SAMOS", u"FIRST_INSTANCE_COURT_OF_NAXOS", 
                      u"FIRST_INSTANCE_COURT_OF_CHANIA", u"FIRST_INSTANCE_COURT_OF_RETHYMNO", 
                      u"FIRST_INSTANCE_COURT_OF_KOZANI", u"FIRST_INSTANCE_COURT_OF_GREVENA", 
                      u"FIRST_INSTANCE_COURT_OF_KASTORIA", u"FIRST_INSTANCE_COURT_OF_FLORINA", 
                      u"FIRST_INSTANCE_COURT_OF_LARISA", u"FIRST_INSTANCE_COURT_OF_VOLOS", 
                      u"FIRST_INSTANCE_COURT_OF_KARDITSA", u"FIRST_INSTANCE_COURT_OF_TRIKALA", 
                      u"FIRST_INSTANCE_COURT_OF_NAFPLIO", u"FIRST_INSTANCE_COURT_OF_CORINTH", 
                      u"FIRST_INSTANCE_COURT_OF_SPARTI", u"FIRST_INSTANCE_COURT_OF_TRIPOLI", 
                      u"FIRST_INSTANCE_COURT_OF_KALAMATA", u"FIRST_INSTANCE_COURT_OF_KIPARISSIA", 
                      u"FIRST_INSTANCE_COURT_OF_GYHTEIO", u"FIRST_INSTANCE_COURT_OF_PATRAS", 
                      u"FIRST_INSTANCE_COURT_OF_AIGIO", u"FIRST_INSTANCE_COURT_OF_KALAVRITA", 
                      u"FIRST_INSTANCE_COURT_OF_HLEIAS", u"FIRST_INSTANCE_COURT_OF_AMALIADA", 
                      u"FIRST_INSTANCE_COURT_OF_ZAKINTHOS", u"FIRST_INSTANCE_COURT_OF_KEFALLONIA", 
                      u"FIRST_INSTANCE_COURT_OF_AGRINIO", u"FIRST_INSTANCE_COURT_OF_LEFKADA", 
                      u"FIRST_INSTANCE_COURT_OF_MESOLOGGI", u"FIRST_INSTANCE_COURT_OF_MITILINI", 
                      u"FIRST_INSTANCE_COURT_OF_CHIOS", u"FIRST_INSTANCE_COURT_OF_HRAKLEIO", 
                      u"FIRST_INSTANCE_COURT_OF_LASITHI", u"FIRST_INSTANCE_COURT_OF_THIVA", 
                      u"FIRST_INSTANCE_COURT_OF_CHALKIDA", u"COUNTY_COURT_OF_ATHENS", 
                      u"COUNTY_COURT_OF_MAROUSSI", u"COUNTY_COURT_OF_AXARNON", 
                      u"COUNTY_COURT_OF_ELEFSINA", u"COUNTY_COURT_OF_KALLITHEA", 
                      u"COUNTY_COURT_OF_KROPIA", u"COUNTY_COURT_OF_LAVRIO", 
                      u"COUNTY_COURT_OF_NEAS_IONIAS", u"COUNTY_COURT_OF_NEA_LIOSIA", 
                      u"COUNTY_COURT_OF_MARATHONA", u"COUNTY_COURT_OF_MEGARA", 
                      u"COUNTY_COURT_OF_PERISTERI", u"COUNTY_COURT_OF_CHALANDRI", 
                      u"COUNTY_COURT_OF_LAMIA", u"COUNTY_COURT_OF_ATALANTI", 
                      u"COUNTY_COURT_OF_AMFISSA", u"COUNTY_COURT_OF_EVRITANIA", 
                      u"COUNTY_COURT_OF_LIVADIA", u"COUNTY_COURT_OF_AIGINA", 
                      u"COUNTY_COURT_OF_KALAVRIA", u"COUNTY_COURT_OF_KITHIRA", 
                      u"COUNTY_COURT_OF_NIKAIAS", u"COUNTY_COURT_OF_SALAMINA", 
                      u"COUNTY_COURT_OF_SPETSES", u"COUNTY_COURT_OF_THESSALONIKI", 
                      u"COUNTY_COURT_OF_PIRAEUS", u"COUNTY_COURT_OF_VASILIKON", 
                      u"COUNTY_COURT_OF_KOUFALION", u"COUNTY_COURT_OF_LAGKADA", 
                      u"COUNTY_COURT_OF_ALEXANDRIA", u"COUNTY_COURT_OF_NAOUSA", 
                      u"COUNTY_COURT_OF_EDESSA", u"COUNTY_COURT_OF_ALMOPIA", 
                      u"COUNTY_COURT_OF_SKYDRA", u"COUNTY_COURT_OF_PIERIA", 
                      u"COUNTY_COURT_OF_KOLINDROU", u"COUNTY_COURT_OF_POLIKASTRO", 
                      u"COUNTY_COURT_OF_SERRES", u"COUNTY_COURT_OF_NIGRITA", 
                      u"COUNTY_COURT_OF_RODOLIVON", u"COUNTY_COURT_OF_SINTIKIS", 
                      u"COUNTY_COURT_OF_POLIGIROU", u"COUNTY_COURT_OF_ARNAIA", 
                      u"COUNTY_COURT_OF_KASSANDRA", u"COUNTY_COURT_OF_NEA_MOUDANIA", 
                      u"COUNTY_COURT_OF_CORFU", u"COUNTY_COURT_OF_IGOUMENITSA", 
                      u"COUNTY_COURT_OF_KOMOTINI", u"COUNTY_COURT_OF_DRAMA", 
                      u"COUNTY_COURT_OF_THASOS", u"COUNTY_COURT_OF_PAGGAIOU", 
                      u"COUNTY_COURT_OF_ORESTIADA", u"COUNTY_COURT_OF_ALEXANDROUPOLI", 
                      u"COUNTY_COURT_OF_KAVALA", u"COUNTY_COURT_OF_DIDIMOTEIXO", 
                      u"COUNTY_COURT_OF_IOANNINA", u"COUNTY_COURT_OF_KONITSA", 
                      u"COUNTY_COURT_OF_ARTA", u"COUNTY_COURT_OF_PREVEZA", 
                      u"COUNTY_COURT_OF_RODOS", u"COUNTY_COURT_OF_KARPATHOS", 
                      u"COUNTY_COURT_OF_KALIMNOS", u"COUNTY_COURT_OF_KOS", 
                      u"COUNTY_COURT_OF_LEROS", u"COUNTY_COURT_OF_ANDROS", 
                      u"COUNTY_COURT_OF_ERMOUPOLI", u"COUNTY_COURT_OF_MILOS", 
                      u"COUNTY_COURT_OF_MYKONOS", u"COUNTY_COURT_OF_PAROS", 
                      u"COUNTY_COURT_OF_TINOS", u"COUNTY_COURT_OF_SAMOS", 
                      u"COUNTY_COURT_OF_IKARIA", u"COUNTY_COURT_OF_KARLOVASI", 
                      u"COUNTY_COURT_OF_NAXOS", u"COUNTY_COURT_OF_CHANIA", 
                      u"COUNTY_COURT_OF_VAMOU", u"COUNTY_COURT_OF_RETHYMNO", 
                      u"COUNTY_COURT_OF_KOZANI", u"COUNTY_COURT_OF_EORDAIA", 
                      u"COUNTY_COURT_OF_GREVENA", u"COUNTY_COURT_OF_KASTORIA", 
                      u"COUNTY_COURT_OF_FLORINA", u"COUNTY_COURT_OF_AMUNTAIO", 
                      u"COUNTY_COURT_OF_LARISA", u"COUNTY_COURT_OF_ELASSONAS", 
                      u"COUNTY_COURT_OF_FARSALA", u"COUNTY_COURT_OF_VOLOS", 
                      u"COUNTY_COURT_OF_ALMIROS", u"COUNTY_COURT_OF_SKOPELOS", 
                      u"COUNTY_COURT_OF_KARDITSA", u"COUNTY_COURT_OF_TRIKALA", 
                      u"COUNTY_COURT_OF_KALAMPAKA", u"COUNTY_COURT_OF_NAFPLIO", 
                      u"COUNTY_COURT_OF_ASTROS", u"COUNTY_COURT_OF_ARGOS", 
                      u"COUNTY_COURT_OF_MASSITOS", u"COUNTY_COURT_OF_THIRA", 
                      u"COUNTY_COURT_OF_CORINTH", u"COUNTY_COURT_OF_SIKIONOS", 
                      u"COUNTY_COURT_OF_NEMEA", u"COUNTY_COURT_OF_XYLOKASTRO", 
                      u"COUNTY_COURT_OF_SPARTI", u"COUNTY_COURT_OF_EPIDAVROS_LIMIRAS", 
                      u"COUNTY_COURT_OF_TRIPOLI", u"COUNTY_COURT_OF_MEGALOPOLI", 
                      u"COUNTY_COURT_OF_PSOFIDA", u"COUNTY_COURT_OF_KALAMATA", 
                      u"COUNTY_COURT_OF_PILOS", u"COUNTY_COURT_OF_KIPARISSIA", 
                      u"COUNTY_COURT_OF_PLATAMODA", u"COUNTY_COURT_OF_GYTHEIO", 
                      u"COUNTY_COURT_OF_NEAPOLI_VOIWN", u"COUNTY_COURT_OF_PATRAS", 
                      u"COUNTY_COURT_OF_DIMI", u"COUNTY_COURT_OF_AIGIALIA", 
                      u"COUNTY_COURT_OF_KALAVRITA", u"COUNTY_COURT_OF_AKRATA", 
                      u"COUNTY_COURT_OF_PIRGOS", u"COUNTY_COURT_OF_OLYMPIA", 
                      u"COUNTY_COURT_OF_ARINI", u"COUNTY_COURT_OF_AMALIADA", 
                      u"COUNTY_COURT_OF_GASTOUNI", u"COUNTY_COURT_OF_MYRTOUNTION", 
                      u"COUNTY_COURT_OF_ZAKINTHOS", u"COUNTY_COURT_OF_ARGOSTOLI", 
                      u"COUNTY_COURT_OF_SAMEON", u"COUNTY_COURT_OF_AGRINIO", 
                      u"COUNTY_COURT_OF_VALTOS", u"COUNTY_COURT_OF_LEFKADA", 
                      u"COUNTY_COURT_OF_VONITSA", u"COUNTY_COURT_OF_MESOLOGGI", 
                      u"COUNTY_COURT_OF_NAFPAKTOS", u"COUNTY_COURT_OF_MITILINI", 
                      u"COUNTY_COURT_OF_KALLONI", u"COUNTY_COURT_OF_CHIOS", 
                      u"COUNTY_COURT_OF_HRAKLEIO", u"COUNTY_COURT_OF_KASTELI", 
                      u"COUNTY_COURT_OF_LASITHI", u"COUNTY_COURT_OF_IERAPETRA", 
                      u"COUNTY_COURT_OF_SITEIA", u"COUNTY_COURT_OF_THIVA", 
                      u"COUNTY_COURT_OF_CHALKIDA", u"COUNTY_COURT_OF_ISTIAIA", 
                      u"COUNTY_COURT_OF_KARYSTOS", u"COUNTY_COURT_OF_KIMI", 
                      u"COUNTY_COURT_OF_TAMINEON", u"DISTRICT_COURT_OF_ATHENS", 
                      u"DISTRICT_COURT_OF_LAMIA", u"DISTRICT_COURT_OF_LIVADIA", 
                      u"DISTRICT_COURT_OF_PIRAEUS", u"DISTRICT_COURT_OF_THESSALONIKI", 
                      u"DISTRICT_COURT_OF_VEROIA", u"DISTRICT_COURT_OF_PIERIA", 
                      u"DISTRICT_COURT_OF_SERRES", u"DISTRICT_COURT_OF_CORFU", 
                      u"DISTRICT_COURT_OF_KOMOTINI", u"DISTRICT_COURT_OF_DRAMA", 
                      u"DISTRICT_COURT_OF_KAVALA", u"DISTRICT_COURT_OF_ARTA", 
                      u"DISTRICT_COURT_OF_RODOS", u"DISTRICT_COURT_OF_CHANIA", 
                      u"DISTRICT_COURT_OF_RETHYMNO", u"DISTRICT_COURT_OF_KOZANI", 
                      u"DISTRICT_COURT_OF_KLEISOURA", u"DISTRICT_COURT_OF_LARISA", 
                      u"DISTRICT_COURT_OF_ELASSONAS", u"DISTRICT_COURT_OF_VOLOS", 
                      u"DISTRICT_COURT_OF_KARDITSA", u"DISTRICT_COURT_OF_TRIKALA", 
                      u"DISTRICT_COURT_OF_NAFPLIO", u"DISTRICT_COURT_OF_ARGOS", 
                      u"DISTRICT_COURT_OF_CORINTH", u"DISTRICT_COURT_OF_SIKIONOS", 
                      u"DISTRICT_COURT_OF_SPARTI", u"DISTRICT_COURT_OF_TRIPOLI", 
                      u"DISTRICT_COURT_OF_KALAMATA", u"DISTRICT_COURT_OF_PATRAS", 
                      u"DISTRICT_COURT_OF_AIGIALIA", u"DISTRICT_COURT_OF_PIRGOS", 
                      u"DISTRICT_COURT_OF_AMALIADA", u"DISTRICT_COURT_OF_AGRINIO", 
                      u"DISTRICT_COURT_OF_VALTOS", u"DISTRICT_COURT_OF_MESOLOGGI", 
                      u"DISTRICT_COURT_OF_MITILINI", u"DISTRICT_COURT_OF_LIMNOS", 
                      u"DISTRICT_COURT_OF_PLOMARI", u"DISTRICT_COURT_OF_HRAKLEIO", 
                      u"DISTRICT_COURT_OF_MOIRES", u"DISTRICT_COURT_OF_PIRGOS_KRITIS", 
                      u"DISTRICT_COURT_OF_THIVA", u"DISTRICT_COURT_OF_CHALKIDA", 
                      u"ALL_CHARS", u"SPECIAL_CHARS", u"SPACE" ]

    RULE_all_text = 0
    RULE_legal_text = 1
    RULE_other_text = 2
    RULE_legal_reference = 3
    RULE_euLegislation = 4
    RULE_singleEULegislation = 5
    RULE_completeEULegislation = 6
    RULE_eu_regulation = 7
    RULE_eu_directive = 8
    RULE_eu = 9
    RULE_eok = 10
    RULE_legalOpinion = 11
    RULE_singleLegalOpinion = 12
    RULE_completeLegalOpinion = 13
    RULE_nsk = 14
    RULE_legislation = 15
    RULE_singleLegislation = 16
    RULE_par_mult = 17
    RULE_case_mult = 18
    RULE_passage_mult = 19
    RULE_element_mult = 20
    RULE_multipleLegislation = 21
    RULE_multipleCompleteLegislation_1 = 22
    RULE_completeLegislation = 23
    RULE_incompleteLegislation = 24
    RULE_explicitLegalElement = 25
    RULE_implicitLegalElement = 26
    RULE_explicitPoint = 27
    RULE_explicitPart = 28
    RULE_implicitChapter = 29
    RULE_explicitChapter = 30
    RULE_implicitArthro = 31
    RULE_explicitArthro = 32
    RULE_explicitArthro_1 = 33
    RULE_implicitPar = 34
    RULE_explicitPar = 35
    RULE_implicitSubPar = 36
    RULE_explicitSubPar = 37
    RULE_implicitPeriptwsi = 38
    RULE_explicitPeriptwsi = 39
    RULE_implicitStoixeio = 40
    RULE_explicitStoixeio = 41
    RULE_implicitEdafio = 42
    RULE_explicitEdafio = 43
    RULE_explicitParartima = 44
    RULE_implicitLegalType = 45
    RULE_explicitLegalType = 46
    RULE_implicitKwdikas = 47
    RULE_explicitKwdikas = 48
    RULE_legislative_type = 49
    RULE_acts = 50
    RULE_presidential_decree = 51
    RULE_compulsory_law = 52
    RULE_decree_law = 53
    RULE_decree = 54
    RULE_royal_decree = 55
    RULE_syntagma = 56
    RULE_special = 57
    RULE_range_id = 58
    RULE_arthra = 59
    RULE_m1 = 60
    RULE_m2 = 61
    RULE_next_all = 62
    RULE_courtDecision = 63
    RULE_singleCourtDec = 64
    RULE_multipleCourtsDec = 65
    RULE_completeCourtDec = 66
    RULE_completeCourtMultipleDecisions = 67
    RULE_completeCourtSingleDecision = 68
    RULE_incompleteCourtDec = 69
    RULE_completeCourtDecAlt = 70
    RULE_incompleteCourtDecAlt = 71
    RULE_decision = 72
    RULE_singleLegalElementId = 73
    RULE_multipleLegalElementIds = 74
    RULE_arthro_id = 75
    RULE_ids = 76
    RULE_multiple_ids = 77
    RULE_date_id = 78
    RULE_law_id = 79
    RULE_latin_id = 80
    RULE_explicitCourt = 81
    RULE_dikastirio = 82
    RULE_implicitCourt = 83
    RULE_parartima = 84
    RULE_btrimeles = 85

    ruleNames =  [ u"all_text", u"legal_text", u"other_text", u"legal_reference", 
                   u"euLegislation", u"singleEULegislation", u"completeEULegislation", 
                   u"eu_regulation", u"eu_directive", u"eu", u"eok", u"legalOpinion", 
                   u"singleLegalOpinion", u"completeLegalOpinion", u"nsk", 
                   u"legislation", u"singleLegislation", u"par_mult", u"case_mult", 
                   u"passage_mult", u"element_mult", u"multipleLegislation", 
                   u"multipleCompleteLegislation_1", u"completeLegislation", 
                   u"incompleteLegislation", u"explicitLegalElement", u"implicitLegalElement", 
                   u"explicitPoint", u"explicitPart", u"implicitChapter", 
                   u"explicitChapter", u"implicitArthro", u"explicitArthro", 
                   u"explicitArthro_1", u"implicitPar", u"explicitPar", 
                   u"implicitSubPar", u"explicitSubPar", u"implicitPeriptwsi", 
                   u"explicitPeriptwsi", u"implicitStoixeio", u"explicitStoixeio", 
                   u"implicitEdafio", u"explicitEdafio", u"explicitParartima", 
                   u"implicitLegalType", u"explicitLegalType", u"implicitKwdikas", 
                   u"explicitKwdikas", u"legislative_type", u"acts", u"presidential_decree", 
                   u"compulsory_law", u"decree_law", u"decree", u"royal_decree", 
                   u"syntagma", u"special", u"range_id", u"arthra", u"m1", 
                   u"m2", u"next_all", u"courtDecision", u"singleCourtDec", 
                   u"multipleCourtsDec", u"completeCourtDec", u"completeCourtMultipleDecisions", 
                   u"completeCourtSingleDecision", u"incompleteCourtDec", 
                   u"completeCourtDecAlt", u"incompleteCourtDecAlt", u"decision", 
                   u"singleLegalElementId", u"multipleLegalElementIds", 
                   u"arthro_id", u"ids", u"multiple_ids", u"date_id", u"law_id", 
                   u"latin_id", u"explicitCourt", u"dikastirio", u"implicitCourt", 
                   u"parartima", u"btrimeles" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    EOK=4
    EE_COUNCIL=5
    NSK=6
    COURT_TEXT=7
    OLOMELEIA=8
    MELI=9
    IONIKO_SYSTEM=10
    LEKTIKO_ID=11
    LATIN_ID=12
    WITH=13
    SINCE=14
    NEXT_ALL=15
    NUM=16
    HYPHEN=17
    SLASH=18
    COMMA=19
    DOT=20
    COLON=21
    BACKSLASH=22
    BRACKET=23
    APOSTROPHE=24
    OF=25
    AND=26
    RANGE=27
    BT=28
    ACTS=29
    ROYAL_DECREE=30
    COMPULSORY_LAW=31
    DECREE_LAW=32
    PRESIDENTIAL_DECREE=33
    DECREE=34
    SYNTAGMA=35
    KWDIKAS_TEXT=36
    KWDIKAS_FOROLOGIKIS_DIADIKASIAS=37
    YPALLILIKOS_KWDIKAS=38
    AGROTIKOS_KWDIKAS=39
    ALIEUTIKOS_KWDIKAS=40
    ASTIKOS_KWDIKAS=41
    AGORANOMIKOS_KWDIKAS=42
    GENIKOS_OIKODOMIKOS_KANONISMOS=43
    NEOS_OIKODOMIKOS_KANONISMOS=44
    KWDIKAS_ADEIWN_FORTIGWN_AUTOKINITWN=45
    KWDIKAS_APODIMIAS_METANASTEUSIS_DIAVATIRIA=46
    KWDIKAS_DEONTOLOGIAS_DIKIGORIKOU_LEITOURGIMATOS=47
    KWDIKAS_DIATAGMATWN_GIA_DIMOTOLOGIA=48
    KWDIKAS_DIATAKSEWN_STRATOLOGIKIS_FISIS=49
    KWDIKAS_ELLINIKIS_ITHAGENEIAS=50
    KWDIKAS_ESODWN_DIMWN_KAI_KOINOTITWN=51
    DASIKOS_KWDIKAS=52
    KWDIKAS_AEROPORIKOY_DIKAIOY=53
    KWDIKAS_KATASKEUIS_DIMOSIWN_ERGWN=54
    KWDIKAS_NOMOTHESIAS_KUVERNISIS=55
    KWDIKAS_NOMWN_GIA_NARKWTIKA=56
    KWDIKAS_PAROXIS_EPENDITIKWN_KINITRWN=57
    KWDIKAS_PERI_ARXAIOTITWN=58
    KWDIKAS_SYNALLAGWN_HLEKTRIKIS_ENERGEIAS=59
    KWDIKAS_TAMEIOU_NOMIKWN=60
    KWDIKAS_TROFIMWN_KAI_POTWN=61
    KWDIKAS_FOROLOGIAS_KAPNOU=62
    KWDIKAS_FOROLOGIKWN_STOIXEIWN=63
    KWDIKAS_ANAGK_APAL_AKINITWN=64
    KWDIKAS_BIBLIWN_KAI_STOIXEIWN=65
    KWDIKAS_POINIKIS_DIKONOMIAS=66
    POINIKOS_KWDIKAS=67
    ETHNIKOS_TELWNIAKOS_KWDIKAS=68
    KWDIKAS_FOROLOGIAS_EISODIMATOS=69
    KWDIKAS_BASIKIS_POLEODOMIKIS_NOMOTHESIAS=70
    KTINOTROFIKOS_KWDIKAS=71
    KWDIKAS_TELWN_XARTOSIMOU=72
    KWDIKAS_BASIKWN_KANONWN_KRATOUMENWN=73
    KWDIKAS_FOROLOGIKIS_DIKONOMIAS=74
    KWDIKAS_DIKIGORWN=75
    KWDIKAS_DIMOSIOU_LOGISTIKOU=76
    KWDIKAS_DIMOSIOU_NAUTIKOU_DIKAIOU=77
    KWDIKAS_FOROY_PROSTITHEMENIS_AKSIAS=78
    KWDIKAS_POLITIKIS_DIKONOMIAS=79
    KWDIKAS_DHMWN_KAI_KOINOTITWN=80
    KWDIKAS_ODIKIS_KYKLOFORIAS=81
    KWDIKAS_DIKASTIKOU_SWMATOS_ENOPLWN_DINAMEWN=82
    KWDIKAS_DIKASTIKWN_EPIMELITWN=83
    KWDIKAS_ORGANISMOU_DIKASTIRIWN=84
    KWDIKAS_DIKASTIKWN_YPALLHLWN=85
    KWDIKAS_DIKWN_DIMOSIOU=86
    KWDIKAS_DIOIKITIKIS_DIADIKASIAS=87
    KWDIKAS_DIOIKITIKIS_DIKONOMIAS=88
    KWDIKAS_EISPRAKSEWN_DHMOSIWN_ESODWN=89
    KWDIKAS_FARMAKEUTIKIS_DEONTOLOGIAS=90
    KWDIKAS_IDIWTIKOU_NAUTIKOU_DIKAIOU=91
    KWDIKAS_POLEMIKWN_SYNTAKSEWN=92
    KWDIKAS_POLITIKWN_KAI_STRATIWTIKWN_SUNTAKSEWN=93
    KWDIKAS_METOXIKOU_TAMEIOU_POLITIKWN_YPALLHLWN=94
    KWDIKAS_METOXIKOU_TAMEIOU_STRATOU=95
    KWDIKAS_PROSOPIKOU_LIMENIKOU_SWMATOS=96
    KWDIKAS_SYMVOLEOGRAFWN=97
    KWDIKAS_SYNTAKSEWN_PROSOPIKOU_OSE=98
    KWDIKAS_ANOTATOU_EIDIKOU_DIKASTIRIOU=99
    KWDIKAS_FOROLOGIAS_KLIRONOMIWN=100
    KWDIKAS_FOROLOGIKIS_APEIKONISIS_SYNALLAGWN=101
    PARARTIMA_TEXT=102
    PART_TEXT=103
    CHAPTER_TEXT=104
    ARTHRA_PLURAL=105
    ARTHRO_TEXT=106
    PAR_TEXT=107
    POINT_TEXT=108
    SUBPAR_TEXT=109
    PERIPTWSI_TEXT=110
    EDAFIO_TEXT=111
    STOIXEIO_TEXT=112
    SPECIAL_TEXT=113
    DECISION_ELEMENT=114
    YP_ARITHM=115
    EU_REGULATION=116
    EU_DIRECTIVE=117
    EU_TEXT=118
    LEGAL_OPINION_TEXT=119
    NOMIKO_SYMB_KRATOUS=120
    STO=121
    ME_TO=122
    STE=123
    AED=124
    SUPREME_COURT=125
    MAGISTRATE_COURT_OF_THESSALONIKI=126
    MAGISTRATE_COURT_OF_LAMIA=127
    MAGISTRATE_COURT_OF_PIRAEUS=128
    MAGISTRATE_COURT_OF_ATHENS=129
    APELLATE_COURT_OF_ATHENS=130
    APELLATE_COURT_OF_LAMIA=131
    APELLATE_COURT_OF_PIRAEUS=132
    APELLATE_COURT_OF_THESSALONIKI=133
    APELLATE_COURT_OF_CORFU=134
    APELLATE_COURT_OF_THRAKI=135
    APELLATE_COURT_OF_IOANNINA=136
    APELLATE_COURT_OF_DODEKANISA=137
    APELLATE_COURT_OF_AEGEAN=138
    APELLATE_COURT_OF_CRETE=139
    APELLATE_COURT_OF_WEST_MACEDONIA=140
    APELLATE_COURT_OF_LARISA=141
    APELLATE_COURT_OF_NAFPLIO=142
    APELLATE_COURT_OF_PATRAS=143
    APELLATE_COURT_OF_WEST_STEREAS=144
    APELLATE_COURT_OF_NORTH_AEGEAN=145
    APELLATE_COURT_OF_EAST_CRETE=146
    APELLATE_COURT_OF_KALAMATA=147
    APELLATE_COURT_OF_EVOIA=148
    FIRST_INSTANCE_COURT_OF_ATHENS=149
    FIRST_INSTANCE_COURT_OF_LAMIA=150
    FIRST_INSTANCE_COURT_OF_AMFISSA=151
    FIRST_INSTANCE_COURT_OF_EVRITANIA=152
    FIRST_INSTANCE_COURT_OF_LIVADIA=153
    FIRST_INSTANCE_COURT_OF_PIRAEUS=154
    FIRST_INSTANCE_COURT_OF_THESSALONIKI=155
    FIRST_INSTANCE_COURT_OF_VEROIA=156
    FIRST_INSTANCE_COURT_OF_EDESSA=157
    FIRST_INSTANCE_COURT_OF_KATERINI=158
    FIRST_INSTANCE_COURT_OF_KILKIS=159
    FIRST_INSTANCE_COURT_OF_SERRES=160
    FIRST_INSTANCE_COURT_OF_XALKIDIKI=161
    FIRST_INSTANCE_COURT_OF_CORFU=162
    FIRST_INSTANCE_COURT_OF_GIANNITSA=163
    FIRST_INSTANCE_COURT_OF_THESPRWTIA=164
    FIRST_INSTANCE_COURT_OF_RODOPI=165
    FIRST_INSTANCE_COURT_OF_DRAMA=166
    FIRST_INSTANCE_COURT_OF_EVROS=167
    FIRST_INSTANCE_COURT_OF_KAVALA=168
    FIRST_INSTANCE_COURT_OF_XANTHI=169
    FIRST_INSTANCE_COURT_OF_ORESTIADA=170
    FIRST_INSTANCE_COURT_OF_IOANNINA=171
    FIRST_INSTANCE_COURT_OF_ARTA=172
    FIRST_INSTANCE_COURT_OF_PREVEZA=173
    FIRST_INSTANCE_COURT_OF_RODOS=174
    FIRST_INSTANCE_COURT_OF_KOS=175
    FIRST_INSTANCE_COURT_OF_SYROS=176
    FIRST_INSTANCE_COURT_OF_SAMOS=177
    FIRST_INSTANCE_COURT_OF_NAXOS=178
    FIRST_INSTANCE_COURT_OF_CHANIA=179
    FIRST_INSTANCE_COURT_OF_RETHYMNO=180
    FIRST_INSTANCE_COURT_OF_KOZANI=181
    FIRST_INSTANCE_COURT_OF_GREVENA=182
    FIRST_INSTANCE_COURT_OF_KASTORIA=183
    FIRST_INSTANCE_COURT_OF_FLORINA=184
    FIRST_INSTANCE_COURT_OF_LARISA=185
    FIRST_INSTANCE_COURT_OF_VOLOS=186
    FIRST_INSTANCE_COURT_OF_KARDITSA=187
    FIRST_INSTANCE_COURT_OF_TRIKALA=188
    FIRST_INSTANCE_COURT_OF_NAFPLIO=189
    FIRST_INSTANCE_COURT_OF_CORINTH=190
    FIRST_INSTANCE_COURT_OF_SPARTI=191
    FIRST_INSTANCE_COURT_OF_TRIPOLI=192
    FIRST_INSTANCE_COURT_OF_KALAMATA=193
    FIRST_INSTANCE_COURT_OF_KIPARISSIA=194
    FIRST_INSTANCE_COURT_OF_GYHTEIO=195
    FIRST_INSTANCE_COURT_OF_PATRAS=196
    FIRST_INSTANCE_COURT_OF_AIGIO=197
    FIRST_INSTANCE_COURT_OF_KALAVRITA=198
    FIRST_INSTANCE_COURT_OF_HLEIAS=199
    FIRST_INSTANCE_COURT_OF_AMALIADA=200
    FIRST_INSTANCE_COURT_OF_ZAKINTHOS=201
    FIRST_INSTANCE_COURT_OF_KEFALLONIA=202
    FIRST_INSTANCE_COURT_OF_AGRINIO=203
    FIRST_INSTANCE_COURT_OF_LEFKADA=204
    FIRST_INSTANCE_COURT_OF_MESOLOGGI=205
    FIRST_INSTANCE_COURT_OF_MITILINI=206
    FIRST_INSTANCE_COURT_OF_CHIOS=207
    FIRST_INSTANCE_COURT_OF_HRAKLEIO=208
    FIRST_INSTANCE_COURT_OF_LASITHI=209
    FIRST_INSTANCE_COURT_OF_THIVA=210
    FIRST_INSTANCE_COURT_OF_CHALKIDA=211
    COUNTY_COURT_OF_ATHENS=212
    COUNTY_COURT_OF_MAROUSSI=213
    COUNTY_COURT_OF_AXARNON=214
    COUNTY_COURT_OF_ELEFSINA=215
    COUNTY_COURT_OF_KALLITHEA=216
    COUNTY_COURT_OF_KROPIA=217
    COUNTY_COURT_OF_LAVRIO=218
    COUNTY_COURT_OF_NEAS_IONIAS=219
    COUNTY_COURT_OF_NEA_LIOSIA=220
    COUNTY_COURT_OF_MARATHONA=221
    COUNTY_COURT_OF_MEGARA=222
    COUNTY_COURT_OF_PERISTERI=223
    COUNTY_COURT_OF_CHALANDRI=224
    COUNTY_COURT_OF_LAMIA=225
    COUNTY_COURT_OF_ATALANTI=226
    COUNTY_COURT_OF_AMFISSA=227
    COUNTY_COURT_OF_EVRITANIA=228
    COUNTY_COURT_OF_LIVADIA=229
    COUNTY_COURT_OF_AIGINA=230
    COUNTY_COURT_OF_KALAVRIA=231
    COUNTY_COURT_OF_KITHIRA=232
    COUNTY_COURT_OF_NIKAIAS=233
    COUNTY_COURT_OF_SALAMINA=234
    COUNTY_COURT_OF_SPETSES=235
    COUNTY_COURT_OF_THESSALONIKI=236
    COUNTY_COURT_OF_PIRAEUS=237
    COUNTY_COURT_OF_VASILIKON=238
    COUNTY_COURT_OF_KOUFALION=239
    COUNTY_COURT_OF_LAGKADA=240
    COUNTY_COURT_OF_ALEXANDRIA=241
    COUNTY_COURT_OF_NAOUSA=242
    COUNTY_COURT_OF_EDESSA=243
    COUNTY_COURT_OF_ALMOPIA=244
    COUNTY_COURT_OF_SKYDRA=245
    COUNTY_COURT_OF_PIERIA=246
    COUNTY_COURT_OF_KOLINDROU=247
    COUNTY_COURT_OF_POLIKASTRO=248
    COUNTY_COURT_OF_SERRES=249
    COUNTY_COURT_OF_NIGRITA=250
    COUNTY_COURT_OF_RODOLIVON=251
    COUNTY_COURT_OF_SINTIKIS=252
    COUNTY_COURT_OF_POLIGIROU=253
    COUNTY_COURT_OF_ARNAIA=254
    COUNTY_COURT_OF_KASSANDRA=255
    COUNTY_COURT_OF_NEA_MOUDANIA=256
    COUNTY_COURT_OF_CORFU=257
    COUNTY_COURT_OF_IGOUMENITSA=258
    COUNTY_COURT_OF_KOMOTINI=259
    COUNTY_COURT_OF_DRAMA=260
    COUNTY_COURT_OF_THASOS=261
    COUNTY_COURT_OF_PAGGAIOU=262
    COUNTY_COURT_OF_ORESTIADA=263
    COUNTY_COURT_OF_ALEXANDROUPOLI=264
    COUNTY_COURT_OF_KAVALA=265
    COUNTY_COURT_OF_DIDIMOTEIXO=266
    COUNTY_COURT_OF_IOANNINA=267
    COUNTY_COURT_OF_KONITSA=268
    COUNTY_COURT_OF_ARTA=269
    COUNTY_COURT_OF_PREVEZA=270
    COUNTY_COURT_OF_RODOS=271
    COUNTY_COURT_OF_KARPATHOS=272
    COUNTY_COURT_OF_KALIMNOS=273
    COUNTY_COURT_OF_KOS=274
    COUNTY_COURT_OF_LEROS=275
    COUNTY_COURT_OF_ANDROS=276
    COUNTY_COURT_OF_ERMOUPOLI=277
    COUNTY_COURT_OF_MILOS=278
    COUNTY_COURT_OF_MYKONOS=279
    COUNTY_COURT_OF_PAROS=280
    COUNTY_COURT_OF_TINOS=281
    COUNTY_COURT_OF_SAMOS=282
    COUNTY_COURT_OF_IKARIA=283
    COUNTY_COURT_OF_KARLOVASI=284
    COUNTY_COURT_OF_NAXOS=285
    COUNTY_COURT_OF_CHANIA=286
    COUNTY_COURT_OF_VAMOU=287
    COUNTY_COURT_OF_RETHYMNO=288
    COUNTY_COURT_OF_KOZANI=289
    COUNTY_COURT_OF_EORDAIA=290
    COUNTY_COURT_OF_GREVENA=291
    COUNTY_COURT_OF_KASTORIA=292
    COUNTY_COURT_OF_FLORINA=293
    COUNTY_COURT_OF_AMUNTAIO=294
    COUNTY_COURT_OF_LARISA=295
    COUNTY_COURT_OF_ELASSONAS=296
    COUNTY_COURT_OF_FARSALA=297
    COUNTY_COURT_OF_VOLOS=298
    COUNTY_COURT_OF_ALMIROS=299
    COUNTY_COURT_OF_SKOPELOS=300
    COUNTY_COURT_OF_KARDITSA=301
    COUNTY_COURT_OF_TRIKALA=302
    COUNTY_COURT_OF_KALAMPAKA=303
    COUNTY_COURT_OF_NAFPLIO=304
    COUNTY_COURT_OF_ASTROS=305
    COUNTY_COURT_OF_ARGOS=306
    COUNTY_COURT_OF_MASSITOS=307
    COUNTY_COURT_OF_THIRA=308
    COUNTY_COURT_OF_CORINTH=309
    COUNTY_COURT_OF_SIKIONOS=310
    COUNTY_COURT_OF_NEMEA=311
    COUNTY_COURT_OF_XYLOKASTRO=312
    COUNTY_COURT_OF_SPARTI=313
    COUNTY_COURT_OF_EPIDAVROS_LIMIRAS=314
    COUNTY_COURT_OF_TRIPOLI=315
    COUNTY_COURT_OF_MEGALOPOLI=316
    COUNTY_COURT_OF_PSOFIDA=317
    COUNTY_COURT_OF_KALAMATA=318
    COUNTY_COURT_OF_PILOS=319
    COUNTY_COURT_OF_KIPARISSIA=320
    COUNTY_COURT_OF_PLATAMODA=321
    COUNTY_COURT_OF_GYTHEIO=322
    COUNTY_COURT_OF_NEAPOLI_VOIWN=323
    COUNTY_COURT_OF_PATRAS=324
    COUNTY_COURT_OF_DIMI=325
    COUNTY_COURT_OF_AIGIALIA=326
    COUNTY_COURT_OF_KALAVRITA=327
    COUNTY_COURT_OF_AKRATA=328
    COUNTY_COURT_OF_PIRGOS=329
    COUNTY_COURT_OF_OLYMPIA=330
    COUNTY_COURT_OF_ARINI=331
    COUNTY_COURT_OF_AMALIADA=332
    COUNTY_COURT_OF_GASTOUNI=333
    COUNTY_COURT_OF_MYRTOUNTION=334
    COUNTY_COURT_OF_ZAKINTHOS=335
    COUNTY_COURT_OF_ARGOSTOLI=336
    COUNTY_COURT_OF_SAMEON=337
    COUNTY_COURT_OF_AGRINIO=338
    COUNTY_COURT_OF_VALTOS=339
    COUNTY_COURT_OF_LEFKADA=340
    COUNTY_COURT_OF_VONITSA=341
    COUNTY_COURT_OF_MESOLOGGI=342
    COUNTY_COURT_OF_NAFPAKTOS=343
    COUNTY_COURT_OF_MITILINI=344
    COUNTY_COURT_OF_KALLONI=345
    COUNTY_COURT_OF_CHIOS=346
    COUNTY_COURT_OF_HRAKLEIO=347
    COUNTY_COURT_OF_KASTELI=348
    COUNTY_COURT_OF_LASITHI=349
    COUNTY_COURT_OF_IERAPETRA=350
    COUNTY_COURT_OF_SITEIA=351
    COUNTY_COURT_OF_THIVA=352
    COUNTY_COURT_OF_CHALKIDA=353
    COUNTY_COURT_OF_ISTIAIA=354
    COUNTY_COURT_OF_KARYSTOS=355
    COUNTY_COURT_OF_KIMI=356
    COUNTY_COURT_OF_TAMINEON=357
    DISTRICT_COURT_OF_ATHENS=358
    DISTRICT_COURT_OF_LAMIA=359
    DISTRICT_COURT_OF_LIVADIA=360
    DISTRICT_COURT_OF_PIRAEUS=361
    DISTRICT_COURT_OF_THESSALONIKI=362
    DISTRICT_COURT_OF_VEROIA=363
    DISTRICT_COURT_OF_PIERIA=364
    DISTRICT_COURT_OF_SERRES=365
    DISTRICT_COURT_OF_CORFU=366
    DISTRICT_COURT_OF_KOMOTINI=367
    DISTRICT_COURT_OF_DRAMA=368
    DISTRICT_COURT_OF_KAVALA=369
    DISTRICT_COURT_OF_ARTA=370
    DISTRICT_COURT_OF_RODOS=371
    DISTRICT_COURT_OF_CHANIA=372
    DISTRICT_COURT_OF_RETHYMNO=373
    DISTRICT_COURT_OF_KOZANI=374
    DISTRICT_COURT_OF_KLEISOURA=375
    DISTRICT_COURT_OF_LARISA=376
    DISTRICT_COURT_OF_ELASSONAS=377
    DISTRICT_COURT_OF_VOLOS=378
    DISTRICT_COURT_OF_KARDITSA=379
    DISTRICT_COURT_OF_TRIKALA=380
    DISTRICT_COURT_OF_NAFPLIO=381
    DISTRICT_COURT_OF_ARGOS=382
    DISTRICT_COURT_OF_CORINTH=383
    DISTRICT_COURT_OF_SIKIONOS=384
    DISTRICT_COURT_OF_SPARTI=385
    DISTRICT_COURT_OF_TRIPOLI=386
    DISTRICT_COURT_OF_KALAMATA=387
    DISTRICT_COURT_OF_PATRAS=388
    DISTRICT_COURT_OF_AIGIALIA=389
    DISTRICT_COURT_OF_PIRGOS=390
    DISTRICT_COURT_OF_AMALIADA=391
    DISTRICT_COURT_OF_AGRINIO=392
    DISTRICT_COURT_OF_VALTOS=393
    DISTRICT_COURT_OF_MESOLOGGI=394
    DISTRICT_COURT_OF_MITILINI=395
    DISTRICT_COURT_OF_LIMNOS=396
    DISTRICT_COURT_OF_PLOMARI=397
    DISTRICT_COURT_OF_HRAKLEIO=398
    DISTRICT_COURT_OF_MOIRES=399
    DISTRICT_COURT_OF_PIRGOS_KRITIS=400
    DISTRICT_COURT_OF_THIVA=401
    DISTRICT_COURT_OF_CHALKIDA=402
    ALL_CHARS=403
    SPECIAL_CHARS=404
    SPACE=405

    def __init__(self, input, output=sys.stdout):
        super(Legal_refParser, self).__init__(input, output=output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class All_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.All_textContext, self).__init__(parent, invokingState)
            self.parser = parser

        def legal_text(self):
            return self.getTypedRuleContext(Legal_refParser.Legal_textContext,0)


        def EOF(self):
            return self.getToken(Legal_refParser.EOF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_all_text

        def enterRule(self, listener):
            if hasattr(listener, "enterAll_text"):
                listener.enterAll_text(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAll_text"):
                listener.exitAll_text(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAll_text"):
                return visitor.visitAll_text(self)
            else:
                return visitor.visitChildren(self)




    def all_text(self):

        localctx = Legal_refParser.All_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_all_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.legal_text()
            self.state = 173
            self.match(Legal_refParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Legal_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Legal_textContext, self).__init__(parent, invokingState)
            self.parser = parser

        def legal_reference(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Legal_referenceContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Legal_referenceContext,i)


        def other_text(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Other_textContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Other_textContext,i)


        def getRuleIndex(self):
            return Legal_refParser.RULE_legal_text

        def enterRule(self, listener):
            if hasattr(listener, "enterLegal_text"):
                listener.enterLegal_text(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLegal_text"):
                listener.exitLegal_text(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLegal_text"):
                return visitor.visitLegal_text(self)
            else:
                return visitor.visitChildren(self)




    def legal_text(self):

        localctx = Legal_refParser.Legal_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_legal_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 175
                    self.legal_reference()
                    pass

                elif la_ == 2:
                    self.state = 176
                    self.other_text()
                    pass


                self.state = 179 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Legal_refParser.T__0) | (1 << Legal_refParser.T__1) | (1 << Legal_refParser.T__2) | (1 << Legal_refParser.EOK) | (1 << Legal_refParser.EE_COUNCIL) | (1 << Legal_refParser.NSK) | (1 << Legal_refParser.COURT_TEXT) | (1 << Legal_refParser.OLOMELEIA) | (1 << Legal_refParser.MELI) | (1 << Legal_refParser.IONIKO_SYSTEM) | (1 << Legal_refParser.LEKTIKO_ID) | (1 << Legal_refParser.LATIN_ID) | (1 << Legal_refParser.WITH) | (1 << Legal_refParser.SINCE) | (1 << Legal_refParser.NEXT_ALL) | (1 << Legal_refParser.NUM) | (1 << Legal_refParser.HYPHEN) | (1 << Legal_refParser.SLASH) | (1 << Legal_refParser.COMMA) | (1 << Legal_refParser.DOT) | (1 << Legal_refParser.COLON) | (1 << Legal_refParser.BACKSLASH) | (1 << Legal_refParser.BRACKET) | (1 << Legal_refParser.APOSTROPHE) | (1 << Legal_refParser.OF) | (1 << Legal_refParser.AND) | (1 << Legal_refParser.RANGE) | (1 << Legal_refParser.BT) | (1 << Legal_refParser.ACTS) | (1 << Legal_refParser.ROYAL_DECREE) | (1 << Legal_refParser.COMPULSORY_LAW) | (1 << Legal_refParser.DECREE_LAW) | (1 << Legal_refParser.PRESIDENTIAL_DECREE) | (1 << Legal_refParser.DECREE) | (1 << Legal_refParser.SYNTAGMA) | (1 << Legal_refParser.KWDIKAS_TEXT) | (1 << Legal_refParser.KWDIKAS_FOROLOGIKIS_DIADIKASIAS) | (1 << Legal_refParser.YPALLILIKOS_KWDIKAS) | (1 << Legal_refParser.AGROTIKOS_KWDIKAS) | (1 << Legal_refParser.ALIEUTIKOS_KWDIKAS) | (1 << Legal_refParser.ASTIKOS_KWDIKAS) | (1 << Legal_refParser.AGORANOMIKOS_KWDIKAS) | (1 << Legal_refParser.GENIKOS_OIKODOMIKOS_KANONISMOS) | (1 << Legal_refParser.NEOS_OIKODOMIKOS_KANONISMOS) | (1 << Legal_refParser.KWDIKAS_ADEIWN_FORTIGWN_AUTOKINITWN) | (1 << Legal_refParser.KWDIKAS_APODIMIAS_METANASTEUSIS_DIAVATIRIA) | (1 << Legal_refParser.KWDIKAS_DEONTOLOGIAS_DIKIGORIKOU_LEITOURGIMATOS) | (1 << Legal_refParser.KWDIKAS_DIATAGMATWN_GIA_DIMOTOLOGIA) | (1 << Legal_refParser.KWDIKAS_DIATAKSEWN_STRATOLOGIKIS_FISIS) | (1 << Legal_refParser.KWDIKAS_ELLINIKIS_ITHAGENEIAS) | (1 << Legal_refParser.KWDIKAS_ESODWN_DIMWN_KAI_KOINOTITWN) | (1 << Legal_refParser.DASIKOS_KWDIKAS) | (1 << Legal_refParser.KWDIKAS_AEROPORIKOY_DIKAIOY) | (1 << Legal_refParser.KWDIKAS_KATASKEUIS_DIMOSIWN_ERGWN) | (1 << Legal_refParser.KWDIKAS_NOMOTHESIAS_KUVERNISIS) | (1 << Legal_refParser.KWDIKAS_NOMWN_GIA_NARKWTIKA) | (1 << Legal_refParser.KWDIKAS_PAROXIS_EPENDITIKWN_KINITRWN) | (1 << Legal_refParser.KWDIKAS_PERI_ARXAIOTITWN) | (1 << Legal_refParser.KWDIKAS_SYNALLAGWN_HLEKTRIKIS_ENERGEIAS) | (1 << Legal_refParser.KWDIKAS_TAMEIOU_NOMIKWN) | (1 << Legal_refParser.KWDIKAS_TROFIMWN_KAI_POTWN) | (1 << Legal_refParser.KWDIKAS_FOROLOGIAS_KAPNOU) | (1 << Legal_refParser.KWDIKAS_FOROLOGIKWN_STOIXEIWN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Legal_refParser.KWDIKAS_ANAGK_APAL_AKINITWN - 64)) | (1 << (Legal_refParser.KWDIKAS_BIBLIWN_KAI_STOIXEIWN - 64)) | (1 << (Legal_refParser.KWDIKAS_POINIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.POINIKOS_KWDIKAS - 64)) | (1 << (Legal_refParser.ETHNIKOS_TELWNIAKOS_KWDIKAS - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIAS_EISODIMATOS - 64)) | (1 << (Legal_refParser.KWDIKAS_BASIKIS_POLEODOMIKIS_NOMOTHESIAS - 64)) | (1 << (Legal_refParser.KTINOTROFIKOS_KWDIKAS - 64)) | (1 << (Legal_refParser.KWDIKAS_TELWN_XARTOSIMOU - 64)) | (1 << (Legal_refParser.KWDIKAS_BASIKWN_KANONWN_KRATOUMENWN - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKIGORWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIMOSIOU_LOGISTIKOU - 64)) | (1 << (Legal_refParser.KWDIKAS_DIMOSIOU_NAUTIKOU_DIKAIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROY_PROSTITHEMENIS_AKSIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_POLITIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DHMWN_KAI_KOINOTITWN - 64)) | (1 << (Legal_refParser.KWDIKAS_ODIKIS_KYKLOFORIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKASTIKOU_SWMATOS_ENOPLWN_DINAMEWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKASTIKWN_EPIMELITWN - 64)) | (1 << (Legal_refParser.KWDIKAS_ORGANISMOU_DIKASTIRIWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKASTIKWN_YPALLHLWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKWN_DIMOSIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_DIOIKITIKIS_DIADIKASIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DIOIKITIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_EISPRAKSEWN_DHMOSIWN_ESODWN - 64)) | (1 << (Legal_refParser.KWDIKAS_FARMAKEUTIKIS_DEONTOLOGIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_IDIWTIKOU_NAUTIKOU_DIKAIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_POLEMIKWN_SYNTAKSEWN - 64)) | (1 << (Legal_refParser.KWDIKAS_POLITIKWN_KAI_STRATIWTIKWN_SUNTAKSEWN - 64)) | (1 << (Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_POLITIKWN_YPALLHLWN - 64)) | (1 << (Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_STRATOU - 64)) | (1 << (Legal_refParser.KWDIKAS_PROSOPIKOU_LIMENIKOU_SWMATOS - 64)) | (1 << (Legal_refParser.KWDIKAS_SYMVOLEOGRAFWN - 64)) | (1 << (Legal_refParser.KWDIKAS_SYNTAKSEWN_PROSOPIKOU_OSE - 64)) | (1 << (Legal_refParser.KWDIKAS_ANOTATOU_EIDIKOU_DIKASTIRIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIAS_KLIRONOMIWN - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIKIS_APEIKONISIS_SYNALLAGWN - 64)) | (1 << (Legal_refParser.PARARTIMA_TEXT - 64)) | (1 << (Legal_refParser.PART_TEXT - 64)) | (1 << (Legal_refParser.CHAPTER_TEXT - 64)) | (1 << (Legal_refParser.ARTHRA_PLURAL - 64)) | (1 << (Legal_refParser.ARTHRO_TEXT - 64)) | (1 << (Legal_refParser.PAR_TEXT - 64)) | (1 << (Legal_refParser.POINT_TEXT - 64)) | (1 << (Legal_refParser.SUBPAR_TEXT - 64)) | (1 << (Legal_refParser.PERIPTWSI_TEXT - 64)) | (1 << (Legal_refParser.EDAFIO_TEXT - 64)) | (1 << (Legal_refParser.STOIXEIO_TEXT - 64)) | (1 << (Legal_refParser.SPECIAL_TEXT - 64)) | (1 << (Legal_refParser.DECISION_ELEMENT - 64)) | (1 << (Legal_refParser.YP_ARITHM - 64)) | (1 << (Legal_refParser.EU_REGULATION - 64)) | (1 << (Legal_refParser.EU_DIRECTIVE - 64)) | (1 << (Legal_refParser.EU_TEXT - 64)) | (1 << (Legal_refParser.LEGAL_OPINION_TEXT - 64)) | (1 << (Legal_refParser.NOMIKO_SYMB_KRATOUS - 64)) | (1 << (Legal_refParser.STO - 64)) | (1 << (Legal_refParser.ME_TO - 64)) | (1 << (Legal_refParser.STE - 64)) | (1 << (Legal_refParser.AED - 64)) | (1 << (Legal_refParser.SUPREME_COURT - 64)) | (1 << (Legal_refParser.MAGISTRATE_COURT_OF_THESSALONIKI - 64)) | (1 << (Legal_refParser.MAGISTRATE_COURT_OF_LAMIA - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (Legal_refParser.MAGISTRATE_COURT_OF_PIRAEUS - 128)) | (1 << (Legal_refParser.MAGISTRATE_COURT_OF_ATHENS - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_ATHENS - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_LAMIA - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_PIRAEUS - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_THESSALONIKI - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_CORFU - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_THRAKI - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_IOANNINA - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_DODEKANISA - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_AEGEAN - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_CRETE - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_WEST_MACEDONIA - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_LARISA - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_NAFPLIO - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_PATRAS - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_WEST_STEREAS - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_NORTH_AEGEAN - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_EAST_CRETE - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_KALAMATA - 128)) | (1 << (Legal_refParser.APELLATE_COURT_OF_EVOIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_ATHENS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_LAMIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_AMFISSA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_EVRITANIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_LIVADIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_PIRAEUS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_THESSALONIKI - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_VEROIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_EDESSA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KATERINI - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KILKIS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_SERRES - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_XALKIDIKI - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_CORFU - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_GIANNITSA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_THESPRWTIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOPI - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_DRAMA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_EVROS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KAVALA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_XANTHI - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_ORESTIADA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_IOANNINA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_ARTA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_PREVEZA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KOS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_SYROS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_SAMOS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_NAXOS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_CHANIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_RETHYMNO - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KOZANI - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_GREVENA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KASTORIA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_FLORINA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_LARISA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_VOLOS - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KARDITSA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIKALA - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_NAFPLIO - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_CORINTH - 128)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_SPARTI - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIPOLI - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAMATA - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KIPARISSIA - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_GYHTEIO - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_PATRAS - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_AIGIO - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAVRITA - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_HLEIAS - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_AMALIADA - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_ZAKINTHOS - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_KEFALLONIA - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_AGRINIO - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_LEFKADA - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_MESOLOGGI - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_MITILINI - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_CHIOS - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_HRAKLEIO - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_LASITHI - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_THIVA - 192)) | (1 << (Legal_refParser.FIRST_INSTANCE_COURT_OF_CHALKIDA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ATHENS - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MAROUSSI - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AXARNON - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ELEFSINA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KALLITHEA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KROPIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LAVRIO - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NEAS_IONIAS - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NEA_LIOSIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MARATHONA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MEGARA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PERISTERI - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_CHALANDRI - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LAMIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ATALANTI - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AMFISSA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_EVRITANIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LIVADIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AIGINA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KALAVRIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KITHIRA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NIKAIAS - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SALAMINA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SPETSES - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_THESSALONIKI - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PIRAEUS - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_VASILIKON - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KOUFALION - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LAGKADA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ALEXANDRIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NAOUSA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_EDESSA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ALMOPIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SKYDRA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PIERIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KOLINDROU - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_POLIKASTRO - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SERRES - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NIGRITA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_RODOLIVON - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SINTIKIS - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_POLIGIROU - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ARNAIA - 192)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KASSANDRA - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (Legal_refParser.COUNTY_COURT_OF_NEA_MOUDANIA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_CORFU - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_IGOUMENITSA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KOMOTINI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_DRAMA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_THASOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PAGGAIOU - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ORESTIADA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ALEXANDROUPOLI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KAVALA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_DIDIMOTEIXO - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_IOANNINA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KONITSA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ARTA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PREVEZA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_RODOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KARPATHOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KALIMNOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LEROS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ANDROS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ERMOUPOLI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MILOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MYKONOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PAROS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_TINOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SAMOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_IKARIA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KARLOVASI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NAXOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_CHANIA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_VAMOU - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_RETHYMNO - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KOZANI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_EORDAIA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_GREVENA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KASTORIA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_FLORINA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AMUNTAIO - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LARISA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ELASSONAS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_FARSALA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_VOLOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ALMIROS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SKOPELOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KARDITSA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_TRIKALA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KALAMPAKA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NAFPLIO - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ASTROS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ARGOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MASSITOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_THIRA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_CORINTH - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SIKIONOS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NEMEA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_XYLOKASTRO - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SPARTI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_EPIDAVROS_LIMIRAS - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_TRIPOLI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MEGALOPOLI - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PSOFIDA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KALAMATA - 256)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PILOS - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (Legal_refParser.COUNTY_COURT_OF_KIPARISSIA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PLATAMODA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_GYTHEIO - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NEAPOLI_VOIWN - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PATRAS - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_DIMI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AIGIALIA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KALAVRITA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AKRATA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_PIRGOS - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_OLYMPIA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ARINI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AMALIADA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_GASTOUNI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MYRTOUNTION - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ZAKINTHOS - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ARGOSTOLI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SAMEON - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_AGRINIO - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_VALTOS - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LEFKADA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_VONITSA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MESOLOGGI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_NAFPAKTOS - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_MITILINI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KALLONI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_CHIOS - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_HRAKLEIO - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KASTELI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_LASITHI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_IERAPETRA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_SITEIA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_THIVA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_CHALKIDA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_ISTIAIA - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KARYSTOS - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_KIMI - 320)) | (1 << (Legal_refParser.COUNTY_COURT_OF_TAMINEON - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_ATHENS - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_LAMIA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_LIVADIA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_PIRAEUS - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_THESSALONIKI - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_VEROIA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_PIERIA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_SERRES - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_CORFU - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_KOMOTINI - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_DRAMA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_KAVALA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_ARTA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_RODOS - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_CHANIA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_RETHYMNO - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_KOZANI - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_KLEISOURA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_LARISA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_ELASSONAS - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_VOLOS - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_KARDITSA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_TRIKALA - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_NAFPLIO - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_ARGOS - 320)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_CORINTH - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (Legal_refParser.DISTRICT_COURT_OF_SIKIONOS - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_SPARTI - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_TRIPOLI - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_KALAMATA - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_PATRAS - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_AIGIALIA - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_PIRGOS - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_AMALIADA - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_AGRINIO - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_VALTOS - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_MESOLOGGI - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_MITILINI - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_LIMNOS - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_PLOMARI - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_HRAKLEIO - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_MOIRES - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_PIRGOS_KRITIS - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_THIVA - 384)) | (1 << (Legal_refParser.DISTRICT_COURT_OF_CHALKIDA - 384)) | (1 << (Legal_refParser.ALL_CHARS - 384)) | (1 << (Legal_refParser.SPECIAL_CHARS - 384)) | (1 << (Legal_refParser.SPACE - 384)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Other_textContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Legal_refParser.RULE_other_text

        def enterRule(self, listener):
            if hasattr(listener, "enterOther_text"):
                listener.enterOther_text(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOther_text"):
                listener.exitOther_text(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOther_text"):
                return visitor.visitOther_text(self)
            else:
                return visitor.visitChildren(self)




    def other_text(self):

        localctx = Legal_refParser.Other_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_other_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.matchWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Legal_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Legal_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def courtDecision(self):
            return self.getTypedRuleContext(Legal_refParser.CourtDecisionContext,0)


        def legislation(self):
            return self.getTypedRuleContext(Legal_refParser.LegislationContext,0)


        def legalOpinion(self):
            return self.getTypedRuleContext(Legal_refParser.LegalOpinionContext,0)


        def euLegislation(self):
            return self.getTypedRuleContext(Legal_refParser.EuLegislationContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_legal_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterLegal_reference"):
                listener.enterLegal_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLegal_reference"):
                listener.exitLegal_reference(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLegal_reference"):
                return visitor.visitLegal_reference(self)
            else:
                return visitor.visitChildren(self)




    def legal_reference(self):

        localctx = Legal_refParser.Legal_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_legal_reference)
        try:
            self.state = 187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 183
                self.courtDecision()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self.legislation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 185
                self.legalOpinion()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 186
                self.euLegislation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EuLegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.EuLegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def singleEULegislation(self):
            return self.getTypedRuleContext(Legal_refParser.SingleEULegislationContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_euLegislation

        def enterRule(self, listener):
            if hasattr(listener, "enterEuLegislation"):
                listener.enterEuLegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEuLegislation"):
                listener.exitEuLegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEuLegislation"):
                return visitor.visitEuLegislation(self)
            else:
                return visitor.visitChildren(self)




    def euLegislation(self):

        localctx = Legal_refParser.EuLegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_euLegislation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.singleEULegislation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleEULegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.SingleEULegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def completeEULegislation(self):
            return self.getTypedRuleContext(Legal_refParser.CompleteEULegislationContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_singleEULegislation

        def enterRule(self, listener):
            if hasattr(listener, "enterSingleEULegislation"):
                listener.enterSingleEULegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSingleEULegislation"):
                listener.exitSingleEULegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleEULegislation"):
                return visitor.visitSingleEULegislation(self)
            else:
                return visitor.visitChildren(self)




    def singleEULegislation(self):

        localctx = Legal_refParser.SingleEULegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleEULegislation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.completeEULegislation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompleteEULegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CompleteEULegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explicitLegalElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.ExplicitLegalElementContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.ExplicitLegalElementContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def ids(self):
            return self.getTypedRuleContext(Legal_refParser.IdsContext,0)


        def eu_regulation(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Eu_regulationContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Eu_regulationContext,i)


        def eu_directive(self):
            return self.getTypedRuleContext(Legal_refParser.Eu_directiveContext,0)


        def OF(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OF)
            else:
                return self.getToken(Legal_refParser.OF, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def SLASH(self):
            return self.getToken(Legal_refParser.SLASH, 0)

        def EE_COUNCIL(self):
            return self.getToken(Legal_refParser.EE_COUNCIL, 0)

        def eok(self):
            return self.getTypedRuleContext(Legal_refParser.EokContext,0)


        def PAR_TEXT(self):
            return self.getToken(Legal_refParser.PAR_TEXT, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_completeEULegislation

        def enterRule(self, listener):
            if hasattr(listener, "enterCompleteEULegislation"):
                listener.enterCompleteEULegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompleteEULegislation"):
                listener.exitCompleteEULegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompleteEULegislation"):
                return visitor.visitCompleteEULegislation(self)
            else:
                return visitor.visitChildren(self)




    def completeEULegislation(self):

        localctx = Legal_refParser.CompleteEULegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_completeEULegislation)
        self._la = 0 # Token type
        try:
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 193
                self.explicitLegalElement()
                self.state = 204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 195
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 194
                            self.match(Legal_refParser.SPACE)


                        self.state = 199
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                        if la_ == 1:
                            self.state = 197
                            _la = self._input.LA(1)
                            if not(_la==Legal_refParser.COMMA or _la==Legal_refParser.OF):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 198
                            self.match(Legal_refParser.SPACE)


                        self.state = 201
                        self.explicitLegalElement() 
                    self.state = 206
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                self.state = 207
                self.match(Legal_refParser.SPACE)
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 208
                    self.match(Legal_refParser.OF)
                    self.state = 209
                    self.match(Legal_refParser.SPACE)


                self.state = 214
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Legal_refParser.EU_REGULATION]:
                    self.state = 212
                    self.eu_regulation()
                    pass
                elif token in [Legal_refParser.EU_DIRECTIVE]:
                    self.state = 213
                    self.eu_directive()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 216
                self.match(Legal_refParser.SPACE)
                self.state = 217
                self.ids()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 221
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Legal_refParser.EU_REGULATION]:
                    self.state = 219
                    self.eu_regulation()
                    pass
                elif token in [Legal_refParser.EU_DIRECTIVE]:
                    self.state = 220
                    self.eu_directive()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 223
                self.match(Legal_refParser.SPACE)
                self.state = 225
                self.ids()
                self.state = 231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 226
                    self.match(Legal_refParser.SLASH)
                    self.state = 229
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Legal_refParser.EU_REGULATION]:
                        self.state = 227
                        self.eu_regulation()
                        pass
                    elif token in [Legal_refParser.EOK]:
                        self.state = 228
                        self.eok()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 233
                    self.match(Legal_refParser.SPACE)
                    self.state = 234
                    self.match(Legal_refParser.OF)
                    self.state = 235
                    self.match(Legal_refParser.SPACE)
                    self.state = 236
                    self.match(Legal_refParser.EE_COUNCIL)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 239
                self.eu_regulation()
                self.state = 240
                self.match(Legal_refParser.SPACE)
                self.state = 241
                self.match(Legal_refParser.PAR_TEXT)
                self.state = 242
                self.match(Legal_refParser.SPACE)
                self.state = 243
                self.ids()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 245
                self.eu_directive()
                self.state = 246
                self.match(Legal_refParser.SPACE)
                self.state = 247
                self.match(Legal_refParser.T__0)
                self.state = 248
                self.match(Legal_refParser.SPACE)
                self.state = 249
                self.ids()

                self.state = 250
                self.match(Legal_refParser.SLASH)
                self.state = 253
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Legal_refParser.EU_REGULATION]:
                    self.state = 251
                    self.eu_regulation()
                    pass
                elif token in [Legal_refParser.EOK]:
                    self.state = 252
                    self.eok()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eu_regulationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Eu_regulationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EU_REGULATION(self):
            return self.getToken(Legal_refParser.EU_REGULATION, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_eu_regulation

        def enterRule(self, listener):
            if hasattr(listener, "enterEu_regulation"):
                listener.enterEu_regulation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEu_regulation"):
                listener.exitEu_regulation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEu_regulation"):
                return visitor.visitEu_regulation(self)
            else:
                return visitor.visitChildren(self)




    def eu_regulation(self):

        localctx = Legal_refParser.Eu_regulationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_eu_regulation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(Legal_refParser.EU_REGULATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eu_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Eu_directiveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EU_DIRECTIVE(self):
            return self.getToken(Legal_refParser.EU_DIRECTIVE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_eu_directive

        def enterRule(self, listener):
            if hasattr(listener, "enterEu_directive"):
                listener.enterEu_directive(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEu_directive"):
                listener.exitEu_directive(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEu_directive"):
                return visitor.visitEu_directive(self)
            else:
                return visitor.visitChildren(self)




    def eu_directive(self):

        localctx = Legal_refParser.Eu_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_eu_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(Legal_refParser.EU_DIRECTIVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EuContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.EuContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EU_TEXT(self):
            return self.getToken(Legal_refParser.EU_TEXT, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_eu

        def enterRule(self, listener):
            if hasattr(listener, "enterEu"):
                listener.enterEu(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEu"):
                listener.exitEu(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEu"):
                return visitor.visitEu(self)
            else:
                return visitor.visitChildren(self)




    def eu(self):

        localctx = Legal_refParser.EuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_eu)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(Legal_refParser.EU_TEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EokContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.EokContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOK(self):
            return self.getToken(Legal_refParser.EOK, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_eok

        def enterRule(self, listener):
            if hasattr(listener, "enterEok"):
                listener.enterEok(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEok"):
                listener.exitEok(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEok"):
                return visitor.visitEok(self)
            else:
                return visitor.visitChildren(self)




    def eok(self):

        localctx = Legal_refParser.EokContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_eok)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(Legal_refParser.EOK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegalOpinionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.LegalOpinionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def singleLegalOpinion(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalOpinionContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_legalOpinion

        def enterRule(self, listener):
            if hasattr(listener, "enterLegalOpinion"):
                listener.enterLegalOpinion(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLegalOpinion"):
                listener.exitLegalOpinion(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLegalOpinion"):
                return visitor.visitLegalOpinion(self)
            else:
                return visitor.visitChildren(self)




    def legalOpinion(self):

        localctx = Legal_refParser.LegalOpinionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_legalOpinion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.singleLegalOpinion()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLegalOpinionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.SingleLegalOpinionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def completeLegalOpinion(self):
            return self.getTypedRuleContext(Legal_refParser.CompleteLegalOpinionContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_singleLegalOpinion

        def enterRule(self, listener):
            if hasattr(listener, "enterSingleLegalOpinion"):
                listener.enterSingleLegalOpinion(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSingleLegalOpinion"):
                listener.exitSingleLegalOpinion(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleLegalOpinion"):
                return visitor.visitSingleLegalOpinion(self)
            else:
                return visitor.visitChildren(self)




    def singleLegalOpinion(self):

        localctx = Legal_refParser.SingleLegalOpinionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_singleLegalOpinion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.completeLegalOpinion()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompleteLegalOpinionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CompleteLegalOpinionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def nsk(self):
            return self.getTypedRuleContext(Legal_refParser.NskContext,0)


        def ids(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.IdsContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.IdsContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def AND(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.AND)
            else:
                return self.getToken(Legal_refParser.AND, i)

        def LEGAL_OPINION_TEXT(self):
            return self.getToken(Legal_refParser.LEGAL_OPINION_TEXT, 0)

        def YP_ARITHM(self):
            return self.getToken(Legal_refParser.YP_ARITHM, 0)

        def WITH(self):
            return self.getToken(Legal_refParser.WITH, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_completeLegalOpinion

        def enterRule(self, listener):
            if hasattr(listener, "enterCompleteLegalOpinion"):
                listener.enterCompleteLegalOpinion(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompleteLegalOpinion"):
                listener.exitCompleteLegalOpinion(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompleteLegalOpinion"):
                return visitor.visitCompleteLegalOpinion(self)
            else:
                return visitor.visitChildren(self)




    def completeLegalOpinion(self):

        localctx = Legal_refParser.CompleteLegalOpinionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_completeLegalOpinion)
        self._la = 0 # Token type
        try:
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.nsk()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 270
                    self.match(Legal_refParser.SPACE)


                self.state = 273
                self.ids()
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 279
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Legal_refParser.COMMA]:
                            self.state = 274
                            self.match(Legal_refParser.COMMA)
                            self.state = 275
                            self.match(Legal_refParser.SPACE)
                            pass
                        elif token in [Legal_refParser.SPACE]:
                            self.state = 276
                            self.match(Legal_refParser.SPACE)
                            self.state = 277
                            self.match(Legal_refParser.AND)
                            self.state = 278
                            self.match(Legal_refParser.SPACE)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 281
                        self.ids() 
                    self.state = 286
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.ids()
                self.state = 288
                self.match(Legal_refParser.SPACE)
                self.state = 289
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                self.state = 290
                self.match(Legal_refParser.SPACE)
                self.state = 291
                self.nsk()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.nsk()
                self.state = 294
                self.match(Legal_refParser.SPACE)
                self.state = 295
                self.match(Legal_refParser.YP_ARITHM)
                self.state = 296
                self.match(Legal_refParser.SPACE)
                self.state = 297
                self.ids()
                self.state = 298
                self.match(Legal_refParser.COMMA)
                self.state = 299
                self.match(Legal_refParser.SPACE)
                self.state = 300
                self.ids()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 302
                self.nsk()
                self.state = 303
                self.match(Legal_refParser.SPACE)
                self.state = 304
                self.match(Legal_refParser.WITH)
                self.state = 305
                self.match(Legal_refParser.SPACE)
                self.state = 306
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                self.state = 307
                self.match(Legal_refParser.SPACE)
                self.state = 308
                self.ids()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 310
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                self.state = 311
                self.match(Legal_refParser.SPACE)
                self.state = 312
                self.ids()
                self.state = 313
                self.match(Legal_refParser.SPACE)
                self.state = 314
                self.nsk()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 316
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                self.state = 317
                self.match(Legal_refParser.SPACE)
                self.state = 318
                self.nsk()
                self.state = 319
                self.match(Legal_refParser.SPACE)
                self.state = 320
                self.ids()
                self.state = 321
                self.match(Legal_refParser.COMMA)
                self.state = 322
                self.match(Legal_refParser.SPACE)
                self.state = 323
                self.ids()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 325
                self.nsk()
                self.state = 326
                self.match(Legal_refParser.COMMA)
                self.state = 327
                self.match(Legal_refParser.SPACE)
                self.state = 328
                self.match(Legal_refParser.WITH)
                self.state = 329
                self.match(Legal_refParser.SPACE)
                self.state = 330
                self.ids()
                self.state = 331
                self.match(Legal_refParser.SPACE)
                self.state = 332
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 334
                self.match(Legal_refParser.YP_ARITHM)
                self.state = 335
                self.match(Legal_refParser.SPACE)
                self.state = 336
                self.ids()
                self.state = 337
                self.match(Legal_refParser.SPACE)
                self.state = 338
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 340
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                self.state = 341
                self.match(Legal_refParser.SPACE)
                self.state = 342
                self.ids()
                self.state = 353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 348
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Legal_refParser.COMMA]:
                            self.state = 343
                            self.match(Legal_refParser.COMMA)
                            self.state = 344
                            self.match(Legal_refParser.SPACE)
                            pass
                        elif token in [Legal_refParser.SPACE]:
                            self.state = 345
                            self.match(Legal_refParser.SPACE)
                            self.state = 346
                            self.match(Legal_refParser.AND)
                            self.state = 347
                            self.match(Legal_refParser.SPACE)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 350
                        self.ids() 
                    self.state = 355
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 356
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                self.state = 357
                self.match(Legal_refParser.SPACE)
                self.state = 358
                self.match(Legal_refParser.YP_ARITHM)
                self.state = 359
                self.match(Legal_refParser.SPACE)
                self.state = 360
                self.ids()
                self.state = 361
                self.match(Legal_refParser.SPACE)
                self.state = 362
                self.nsk()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 364
                self.nsk()
                self.state = 365
                self.match(Legal_refParser.SPACE)
                self.state = 366
                self.match(Legal_refParser.YP_ARITHM)
                self.state = 367
                self.match(Legal_refParser.SPACE)
                self.state = 368
                self.ids()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 370
                self.match(Legal_refParser.LEGAL_OPINION_TEXT)
                self.state = 371
                self.match(Legal_refParser.SPACE)
                self.state = 372
                self.nsk()
                self.state = 373
                self.match(Legal_refParser.SPACE)
                self.state = 374
                self.match(Legal_refParser.YP_ARITHM)
                self.state = 375
                self.match(Legal_refParser.SPACE)
                self.state = 376
                self.ids()
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 382
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Legal_refParser.COMMA]:
                            self.state = 377
                            self.match(Legal_refParser.COMMA)
                            self.state = 378
                            self.match(Legal_refParser.SPACE)
                            pass
                        elif token in [Legal_refParser.SPACE]:
                            self.state = 379
                            self.match(Legal_refParser.SPACE)
                            self.state = 380
                            self.match(Legal_refParser.AND)
                            self.state = 381
                            self.match(Legal_refParser.SPACE)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 384
                        self.ids() 
                    self.state = 389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NskContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.NskContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NSK(self):
            return self.getToken(Legal_refParser.NSK, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_nsk

        def enterRule(self, listener):
            if hasattr(listener, "enterNsk"):
                listener.enterNsk(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNsk"):
                listener.exitNsk(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNsk"):
                return visitor.visitNsk(self)
            else:
                return visitor.visitChildren(self)




    def nsk(self):

        localctx = Legal_refParser.NskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_nsk)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(Legal_refParser.NSK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.LegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multipleLegislation(self):
            return self.getTypedRuleContext(Legal_refParser.MultipleLegislationContext,0)


        def singleLegislation(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegislationContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_legislation

        def enterRule(self, listener):
            if hasattr(listener, "enterLegislation"):
                listener.enterLegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLegislation"):
                listener.exitLegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLegislation"):
                return visitor.visitLegislation(self)
            else:
                return visitor.visitChildren(self)




    def legislation(self):

        localctx = Legal_refParser.LegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_legislation)
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.multipleLegislation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.singleLegislation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.SingleLegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def completeLegislation(self):
            return self.getTypedRuleContext(Legal_refParser.CompleteLegislationContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_singleLegislation

        def enterRule(self, listener):
            if hasattr(listener, "enterSingleLegislation"):
                listener.enterSingleLegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSingleLegislation"):
                listener.exitSingleLegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleLegislation"):
                return visitor.visitSingleLegislation(self)
            else:
                return visitor.visitChildren(self)




    def singleLegislation(self):

        localctx = Legal_refParser.SingleLegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_singleLegislation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.completeLegislation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Par_multContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Par_multContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arthro_id(self):
            return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def PAR_TEXT(self):
            return self.getToken(Legal_refParser.PAR_TEXT, 0)

        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def case_mult(self):
            return self.getTypedRuleContext(Legal_refParser.Case_multContext,0)


        def passage_mult(self):
            return self.getTypedRuleContext(Legal_refParser.Passage_multContext,0)


        def element_mult(self):
            return self.getTypedRuleContext(Legal_refParser.Element_multContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_par_mult

        def enterRule(self, listener):
            if hasattr(listener, "enterPar_mult"):
                listener.enterPar_mult(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPar_mult"):
                listener.exitPar_mult(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPar_mult"):
                return visitor.visitPar_mult(self)
            else:
                return visitor.visitChildren(self)




    def par_mult(self):

        localctx = Legal_refParser.Par_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_par_mult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.arthro_id()
            self.state = 401
            self.match(Legal_refParser.SPACE)
            self.state = 402
            self.match(Legal_refParser.PAR_TEXT)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 403
                self.match(Legal_refParser.SPACE)


            self.state = 406
            self.singleLegalElementId()
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 407
                self.match(Legal_refParser.SPACE)
                self.state = 411
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Legal_refParser.PERIPTWSI_TEXT]:
                    self.state = 408
                    self.case_mult()
                    pass
                elif token in [Legal_refParser.EDAFIO_TEXT]:
                    self.state = 409
                    self.passage_mult()
                    pass
                elif token in [Legal_refParser.STOIXEIO_TEXT]:
                    self.state = 410
                    self.element_mult()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_multContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Case_multContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PERIPTWSI_TEXT(self):
            return self.getToken(Legal_refParser.PERIPTWSI_TEXT, 0)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_case_mult

        def enterRule(self, listener):
            if hasattr(listener, "enterCase_mult"):
                listener.enterCase_mult(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCase_mult"):
                listener.exitCase_mult(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCase_mult"):
                return visitor.visitCase_mult(self)
            else:
                return visitor.visitChildren(self)




    def case_mult(self):

        localctx = Legal_refParser.Case_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_case_mult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(Legal_refParser.PERIPTWSI_TEXT)
            self.state = 416
            self.match(Legal_refParser.SPACE)
            self.state = 417
            self.singleLegalElementId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Passage_multContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Passage_multContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EDAFIO_TEXT(self):
            return self.getToken(Legal_refParser.EDAFIO_TEXT, 0)

        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_passage_mult

        def enterRule(self, listener):
            if hasattr(listener, "enterPassage_mult"):
                listener.enterPassage_mult(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPassage_mult"):
                listener.exitPassage_mult(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPassage_mult"):
                return visitor.visitPassage_mult(self)
            else:
                return visitor.visitChildren(self)




    def passage_mult(self):

        localctx = Legal_refParser.Passage_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_passage_mult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(Legal_refParser.EDAFIO_TEXT)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 420
                self.match(Legal_refParser.SPACE)


            self.state = 423
            self.singleLegalElementId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_multContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Element_multContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STOIXEIO_TEXT(self):
            return self.getToken(Legal_refParser.STOIXEIO_TEXT, 0)

        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_element_mult

        def enterRule(self, listener):
            if hasattr(listener, "enterElement_mult"):
                listener.enterElement_mult(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElement_mult"):
                listener.exitElement_mult(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitElement_mult"):
                return visitor.visitElement_mult(self)
            else:
                return visitor.visitChildren(self)




    def element_mult(self):

        localctx = Legal_refParser.Element_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_element_mult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(Legal_refParser.STOIXEIO_TEXT)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 426
                self.match(Legal_refParser.SPACE)


            self.state = 429
            self.singleLegalElementId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleLegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.MultipleLegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arthra(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.ArthraContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.ArthraContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def par_mult(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Par_multContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Par_multContext,i)


        def AND(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.AND)
            else:
                return self.getToken(Legal_refParser.AND, i)

        def arthro_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Arthro_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,i)


        def explicitLegalType(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitLegalTypeContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def OF(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OF)
            else:
                return self.getToken(Legal_refParser.OF, i)

        def case_mult(self):
            return self.getTypedRuleContext(Legal_refParser.Case_multContext,0)


        def explicitPar(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitParContext,0)


        def explicitLegalElement(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitLegalElementContext,0)


        def multipleCompleteLegislation_1(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.MultipleCompleteLegislation_1Context)
            else:
                return self.getTypedRuleContext(Legal_refParser.MultipleCompleteLegislation_1Context,i)


        def SINCE(self):
            return self.getToken(Legal_refParser.SINCE, 0)

        def singleLegislation(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegislationContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_multipleLegislation

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleLegislation"):
                listener.enterMultipleLegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleLegislation"):
                listener.exitMultipleLegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultipleLegislation"):
                return visitor.visitMultipleLegislation(self)
            else:
                return visitor.visitChildren(self)




    def multipleLegislation(self):

        localctx = Legal_refParser.MultipleLegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_multipleLegislation)
        self._la = 0 # Token type
        try:
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.arthra()
                self.state = 432
                self.match(Legal_refParser.SPACE)
                self.state = 433
                self.par_mult()
                self.state = 437 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 434
                    self.match(Legal_refParser.COMMA)
                    self.state = 435
                    self.match(Legal_refParser.SPACE)
                    self.state = 436
                    self.arthro_id()
                    self.state = 439 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Legal_refParser.COMMA):
                        break

                self.state = 441
                self.match(Legal_refParser.SPACE)
                self.state = 442
                self.match(Legal_refParser.AND)
                self.state = 443
                self.match(Legal_refParser.SPACE)
                self.state = 444
                self.arthro_id()
                self.state = 445
                self.match(Legal_refParser.SPACE)
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 446
                    self.match(Legal_refParser.OF)
                    self.state = 447
                    self.match(Legal_refParser.SPACE)


                self.state = 450
                self.explicitLegalType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.arthra()
                self.state = 453
                self.match(Legal_refParser.SPACE)
                self.state = 454
                self.par_mult()
                self.state = 455
                self.match(Legal_refParser.SPACE)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.PERIPTWSI_TEXT:
                    self.state = 456
                    self.case_mult()
                    self.state = 457
                    self.match(Legal_refParser.SPACE)


                self.state = 461
                self.match(Legal_refParser.AND)
                self.state = 462
                self.match(Legal_refParser.SPACE)
                self.state = 463
                self.par_mult()
                self.state = 464
                self.match(Legal_refParser.SPACE)
                self.state = 467
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 465
                    self.match(Legal_refParser.OF)
                    self.state = 466
                    self.match(Legal_refParser.SPACE)


                self.state = 469
                self.explicitLegalType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 471
                self.arthra()
                self.state = 472
                self.match(Legal_refParser.SPACE)
                self.state = 473
                self.par_mult()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.COMMA:
                    self.state = 474
                    self.match(Legal_refParser.COMMA)


                self.state = 477
                self.match(Legal_refParser.SPACE)
                self.state = 478
                self.par_mult()
                self.state = 479
                self.match(Legal_refParser.SPACE)
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 480
                    self.match(Legal_refParser.OF)
                    self.state = 481
                    self.match(Legal_refParser.SPACE)


                self.state = 484
                self.explicitLegalType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 486
                self.arthra()
                self.state = 487
                self.match(Legal_refParser.SPACE)
                self.state = 488
                self.par_mult()
                self.state = 489
                self.match(Legal_refParser.SPACE)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.PERIPTWSI_TEXT:
                    self.state = 490
                    self.case_mult()
                    self.state = 491
                    self.match(Legal_refParser.SPACE)


                self.state = 495
                self.match(Legal_refParser.AND)
                self.state = 496
                self.match(Legal_refParser.SPACE)
                self.state = 497
                self.arthro_id()
                self.state = 498
                self.match(Legal_refParser.SPACE)
                self.state = 501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 499
                    self.match(Legal_refParser.OF)
                    self.state = 500
                    self.match(Legal_refParser.SPACE)


                self.state = 503
                self.explicitLegalType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.arthra()
                self.state = 506
                self.match(Legal_refParser.SPACE)
                self.state = 513 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 507
                    self.par_mult()
                    self.state = 509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.COMMA:
                        self.state = 508
                        self.match(Legal_refParser.COMMA)


                    self.state = 511
                    self.match(Legal_refParser.SPACE)
                    self.state = 515 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Legal_refParser.LEKTIKO_ID or _la==Legal_refParser.NUM):
                        break

                self.state = 517
                self.match(Legal_refParser.AND)
                self.state = 518
                self.match(Legal_refParser.SPACE)
                self.state = 519
                self.par_mult()
                self.state = 520
                self.match(Legal_refParser.SPACE)
                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 521
                    self.match(Legal_refParser.OF)
                    self.state = 522
                    self.match(Legal_refParser.SPACE)


                self.state = 525
                self.explicitLegalType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 527
                self.arthra()
                self.state = 528
                self.match(Legal_refParser.SPACE)
                self.state = 529
                self.par_mult()
                self.state = 530
                self.match(Legal_refParser.COMMA)
                self.state = 531
                self.match(Legal_refParser.SPACE)
                self.state = 532
                self.par_mult()
                self.state = 533
                self.match(Legal_refParser.COMMA)
                self.state = 534
                self.match(Legal_refParser.SPACE)
                self.state = 535
                self.arthro_id()
                self.state = 536
                self.match(Legal_refParser.COMMA)
                self.state = 537
                self.match(Legal_refParser.SPACE)
                self.state = 538
                self.arthro_id()
                self.state = 539
                self.match(Legal_refParser.SPACE)
                self.state = 540
                self.explicitPar()
                self.state = 541
                self.match(Legal_refParser.SPACE)
                self.state = 544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 542
                    self.match(Legal_refParser.OF)
                    self.state = 543
                    self.match(Legal_refParser.SPACE)


                self.state = 546
                self.explicitLegalType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 548
                self.arthra()
                self.state = 549
                self.match(Legal_refParser.SPACE)
                self.state = 550
                self.par_mult()
                self.state = 551
                self.match(Legal_refParser.COMMA)
                self.state = 552
                self.match(Legal_refParser.SPACE)
                self.state = 553
                self.arthro_id()
                self.state = 554
                self.match(Legal_refParser.SPACE)
                self.state = 555
                self.explicitPar()
                self.state = 556
                self.match(Legal_refParser.SPACE)
                self.state = 559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 557
                    self.match(Legal_refParser.OF)
                    self.state = 558
                    self.match(Legal_refParser.SPACE)


                self.state = 561
                self.explicitLegalType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 563
                self.arthra()
                self.state = 564
                self.match(Legal_refParser.SPACE)
                self.state = 565
                self.arthro_id()
                self.state = 566
                self.match(Legal_refParser.SPACE)
                self.state = 567
                self.match(Legal_refParser.AND)
                self.state = 568
                self.match(Legal_refParser.SPACE)
                self.state = 569
                self.par_mult()
                self.state = 570
                self.match(Legal_refParser.SPACE)
                self.state = 573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 571
                    self.match(Legal_refParser.OF)
                    self.state = 572
                    self.match(Legal_refParser.SPACE)


                self.state = 575
                self.explicitLegalType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 577
                self.arthra()
                self.state = 578
                self.match(Legal_refParser.SPACE)
                self.state = 579
                self.arthro_id()
                self.state = 585 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 580
                    self.match(Legal_refParser.COMMA)
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.SPACE:
                        self.state = 581
                        self.match(Legal_refParser.SPACE)


                    self.state = 584
                    self.arthro_id()
                    self.state = 587 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Legal_refParser.COMMA):
                        break

                self.state = 593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 589
                    self.match(Legal_refParser.SPACE)
                    self.state = 590
                    self.match(Legal_refParser.AND)
                    self.state = 591
                    self.match(Legal_refParser.SPACE)
                    self.state = 592
                    self.arthro_id()


                self.state = 595
                self.match(Legal_refParser.SPACE)
                self.state = 601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 596
                    self.match(Legal_refParser.OF)
                    self.state = 597
                    self.match(Legal_refParser.SPACE)
                    self.state = 598
                    self.explicitLegalElement()
                    self.state = 599
                    self.match(Legal_refParser.SPACE)


                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 603
                    self.match(Legal_refParser.OF)
                    self.state = 604
                    self.match(Legal_refParser.SPACE)


                self.state = 607
                self.explicitLegalType()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 609
                self.arthra()
                self.state = 610
                self.match(Legal_refParser.SPACE)
                self.state = 611
                self.arthro_id()
                self.state = 612
                self.match(Legal_refParser.SPACE)
                self.state = 613
                self.match(Legal_refParser.AND)
                self.state = 614
                self.match(Legal_refParser.SPACE)
                self.state = 615
                self.arthro_id()
                self.state = 616
                self.match(Legal_refParser.SPACE)
                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 617
                    self.match(Legal_refParser.OF)
                    self.state = 618
                    self.match(Legal_refParser.SPACE)


                self.state = 621
                self.explicitLegalType()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 623
                self.arthra()
                self.state = 624
                self.match(Legal_refParser.SPACE)
                self.state = 625
                self.multipleCompleteLegislation_1()
                self.state = 626
                self.match(Legal_refParser.COMMA)
                self.state = 627
                self.match(Legal_refParser.SPACE)
                self.state = 628
                self.multipleCompleteLegislation_1()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 630
                self.arthra()
                self.state = 631
                self.match(Legal_refParser.SPACE)
                self.state = 632
                self.multipleCompleteLegislation_1()
                self.state = 633
                self.match(Legal_refParser.SPACE)
                self.state = 634
                self.match(Legal_refParser.AND)
                self.state = 635
                self.match(Legal_refParser.SPACE)
                self.state = 636
                self.multipleCompleteLegislation_1()
                self.state = 637
                self.arthra()
                self.state = 638
                self.match(Legal_refParser.SPACE)
                self.state = 639
                self.multipleCompleteLegislation_1()
                self.state = 647
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 640
                    self.match(Legal_refParser.COMMA)
                    self.state = 641
                    self.match(Legal_refParser.SPACE)
                    self.state = 642
                    self.match(Legal_refParser.SINCE)
                    self.state = 643
                    self.match(Legal_refParser.SPACE)
                    self.state = 644
                    self.match(Legal_refParser.AND)
                    self.state = 645
                    self.match(Legal_refParser.SPACE)
                    self.state = 646
                    self.multipleCompleteLegislation_1()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 649
                self.arthra()
                self.state = 650
                self.match(Legal_refParser.SPACE)
                self.state = 651
                self.multipleCompleteLegislation_1()
                self.state = 658 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 652
                            self.match(Legal_refParser.SPACE)


                        self.state = 655
                        _la = self._input.LA(1)
                        if not(_la==Legal_refParser.COMMA or _la==Legal_refParser.AND):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 656
                        self.match(Legal_refParser.SPACE)
                        self.state = 657
                        self.multipleCompleteLegislation_1()

                    else:
                        raise NoViableAltException(self)
                    self.state = 660 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 662
                self.arthra()
                self.state = 663
                self.match(Legal_refParser.SPACE)
                self.state = 664
                self.multipleCompleteLegislation_1()
                self.state = 665
                self.match(Legal_refParser.SPACE)
                self.state = 666
                self.match(Legal_refParser.AND)
                self.state = 667
                self.match(Legal_refParser.SPACE)
                self.state = 668
                self.multipleCompleteLegislation_1()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 670
                self.arthra()
                self.state = 671
                self.match(Legal_refParser.SPACE)
                self.state = 672
                self.multipleCompleteLegislation_1()
                self.state = 673
                self.match(Legal_refParser.COMMA)
                self.state = 674
                self.match(Legal_refParser.SPACE)
                self.state = 675
                self.multipleCompleteLegislation_1()
                self.state = 676
                self.match(Legal_refParser.SPACE)
                self.state = 677
                self.match(Legal_refParser.AND)
                self.state = 678
                self.match(Legal_refParser.SPACE)
                self.state = 679
                self.multipleCompleteLegislation_1()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 681
                self.singleLegislation()
                self.state = 683 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 682
                        self.multipleCompleteLegislation_1()

                    else:
                        raise NoViableAltException(self)
                    self.state = 685 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleCompleteLegislation_1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.MultipleCompleteLegislation_1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def m1(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.M1Context)
            else:
                return self.getTypedRuleContext(Legal_refParser.M1Context,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def AND(self):
            return self.getToken(Legal_refParser.AND, 0)

        def explicitLegalType(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitLegalTypeContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def arthro_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Arthro_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,i)


        def m2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.M2Context)
            else:
                return self.getTypedRuleContext(Legal_refParser.M2Context,i)


        def arthra(self):
            return self.getTypedRuleContext(Legal_refParser.ArthraContext,0)


        def SPECIAL_TEXT(self):
            return self.getToken(Legal_refParser.SPECIAL_TEXT, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_multipleCompleteLegislation_1

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleCompleteLegislation_1"):
                listener.enterMultipleCompleteLegislation_1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleCompleteLegislation_1"):
                listener.exitMultipleCompleteLegislation_1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultipleCompleteLegislation_1"):
                return visitor.visitMultipleCompleteLegislation_1(self)
            else:
                return visitor.visitChildren(self)




    def multipleCompleteLegislation_1(self):

        localctx = Legal_refParser.MultipleCompleteLegislation_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_multipleCompleteLegislation_1)
        self._la = 0 # Token type
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.m1()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Legal_refParser.COMMA:
                    self.state = 690
                    self.match(Legal_refParser.COMMA)
                    self.state = 691
                    self.match(Legal_refParser.SPACE)
                    self.state = 692
                    self.m1()
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 698
                self.match(Legal_refParser.SPACE)
                self.state = 699
                self.match(Legal_refParser.AND)
                self.state = 700
                self.match(Legal_refParser.SPACE)
                self.state = 701
                self.m1()
                self.state = 702
                self.match(Legal_refParser.SPACE)
                self.state = 703
                self.explicitLegalType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.m1()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Legal_refParser.COMMA:
                    self.state = 706
                    self.match(Legal_refParser.COMMA)
                    self.state = 707
                    self.match(Legal_refParser.SPACE)
                    self.state = 708
                    self.m1()
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 714
                self.match(Legal_refParser.SPACE)
                self.state = 715
                self.match(Legal_refParser.AND)
                self.state = 716
                self.match(Legal_refParser.SPACE)
                self.state = 717
                self.m1()
                self.state = 718
                self.match(Legal_refParser.SPACE)
                self.state = 719
                self.explicitLegalType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self.m1()
                self.state = 722
                self.match(Legal_refParser.SPACE)
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 723
                    self.match(Legal_refParser.OF)
                    self.state = 724
                    self.match(Legal_refParser.SPACE)


                self.state = 727
                self.explicitLegalType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 729
                self.m1()
                self.state = 730
                self.match(Legal_refParser.SPACE)
                self.state = 731
                self.match(Legal_refParser.AND)
                self.state = 732
                self.match(Legal_refParser.SPACE)
                self.state = 733
                self.arthro_id()
                self.state = 734
                self.match(Legal_refParser.SPACE)
                self.state = 735
                self.explicitLegalType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 737
                self.m1()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Legal_refParser.COMMA:
                    self.state = 738
                    self.match(Legal_refParser.COMMA)
                    self.state = 740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.SPACE:
                        self.state = 739
                        self.match(Legal_refParser.SPACE)


                    self.state = 744
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        self.state = 742
                        self.m1()
                        pass

                    elif la_ == 2:
                        self.state = 743
                        self.m2()
                        pass


                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 751
                self.match(Legal_refParser.SPACE)
                self.state = 754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 752
                    self.match(Legal_refParser.OF)
                    self.state = 753
                    self.match(Legal_refParser.SPACE)


                self.state = 756
                self.explicitLegalType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 758
                self.m1()
                self.state = 759
                self.match(Legal_refParser.SPACE)
                self.state = 760
                self.match(Legal_refParser.AND)
                self.state = 761
                self.match(Legal_refParser.SPACE)
                self.state = 762
                self.m1()
                self.state = 763
                self.match(Legal_refParser.SPACE)
                self.state = 766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 764
                    self.match(Legal_refParser.OF)
                    self.state = 765
                    self.match(Legal_refParser.SPACE)


                self.state = 768
                self.explicitLegalType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 770
                self.arthro_id()
                self.state = 771
                self.match(Legal_refParser.SPACE)
                self.state = 774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 772
                    self.match(Legal_refParser.OF)
                    self.state = 773
                    self.match(Legal_refParser.SPACE)


                self.state = 776
                self.explicitLegalType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 778
                self.m2()
                self.state = 779
                self.match(Legal_refParser.SPACE)
                self.state = 782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.match(Legal_refParser.OF)
                    self.state = 781
                    self.match(Legal_refParser.SPACE)


                self.state = 784
                self.explicitLegalType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.COMMA:
                    self.state = 786
                    self.match(Legal_refParser.COMMA)


                self.state = 789
                self.match(Legal_refParser.SPACE)
                self.state = 790
                self.match(Legal_refParser.AND)
                self.state = 791
                self.match(Legal_refParser.SPACE)
                self.state = 794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 792
                    self.arthro_id()
                    pass

                elif la_ == 2:
                    self.state = 793
                    self.m1()
                    pass


                self.state = 796
                self.match(Legal_refParser.SPACE)
                self.state = 799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 797
                    self.match(Legal_refParser.OF)
                    self.state = 798
                    self.match(Legal_refParser.SPACE)


                self.state = 801
                self.explicitLegalType()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 803
                self.arthra()
                self.state = 804
                self.match(Legal_refParser.SPACE)
                self.state = 805
                self.arthro_id()
                self.state = 806
                self.match(Legal_refParser.SPACE)
                self.state = 807
                self.match(Legal_refParser.AND)
                self.state = 808
                self.match(Legal_refParser.SPACE)
                self.state = 809
                self.arthro_id()
                self.state = 810
                self.match(Legal_refParser.SPACE)
                self.state = 811
                self.match(Legal_refParser.OF)
                self.state = 812
                self.match(Legal_refParser.SPACE)
                self.state = 813
                self.match(Legal_refParser.SPECIAL_TEXT)
                self.state = 814
                self.match(Legal_refParser.SPACE)
                self.state = 815
                self.explicitLegalType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompleteLegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CompleteLegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explicitLegalElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.ExplicitLegalElementContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.ExplicitLegalElementContext,i)


        def explicitLegalType(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitLegalTypeContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def OF(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OF)
            else:
                return self.getToken(Legal_refParser.OF, i)

        def ME_TO(self):
            return self.getToken(Legal_refParser.ME_TO, 0)

        def BRACKET(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.BRACKET)
            else:
                return self.getToken(Legal_refParser.BRACKET, i)

        def STO(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.STO)
            else:
                return self.getToken(Legal_refParser.STO, i)

        def arthro_id(self):
            return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def arthra(self):
            return self.getTypedRuleContext(Legal_refParser.ArthraContext,0)


        def range_id(self):
            return self.getTypedRuleContext(Legal_refParser.Range_idContext,0)


        def AND(self):
            return self.getToken(Legal_refParser.AND, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_completeLegislation

        def enterRule(self, listener):
            if hasattr(listener, "enterCompleteLegislation"):
                listener.enterCompleteLegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompleteLegislation"):
                listener.exitCompleteLegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompleteLegislation"):
                return visitor.visitCompleteLegislation(self)
            else:
                return visitor.visitChildren(self)




    def completeLegislation(self):

        localctx = Legal_refParser.CompleteLegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_completeLegislation)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.explicitLegalElement()
                self.state = 835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 820
                            self.match(Legal_refParser.SPACE)


                        self.state = 827
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.BRACKET or _la==Legal_refParser.OF or _la==Legal_refParser.STO:
                            self.state = 823
                            _la = self._input.LA(1)
                            if not(_la==Legal_refParser.BRACKET or _la==Legal_refParser.OF or _la==Legal_refParser.STO):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 825
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Legal_refParser.SPACE:
                                self.state = 824
                                self.match(Legal_refParser.SPACE)




                        self.state = 829
                        self.explicitLegalElement()
                        self.state = 831
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                        if la_ == 1:
                            self.state = 830
                            self.match(Legal_refParser.BRACKET)

                 
                    self.state = 837
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 838
                    self.match(Legal_refParser.SPACE)


                self.state = 843
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 841
                    self.match(Legal_refParser.OF)
                    self.state = 842
                    self.match(Legal_refParser.SPACE)


                self.state = 845
                self.explicitLegalType()
                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 846
                    self.match(Legal_refParser.SPACE)
                    self.state = 847
                    self.match(Legal_refParser.ME_TO)
                    self.state = 848
                    self.match(Legal_refParser.SPACE)
                    self.state = 849
                    self.explicitLegalElement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.match(Legal_refParser.BRACKET)

                self.state = 853
                self.explicitLegalType()
                self.state = 854
                self.match(Legal_refParser.SPACE)
                self.state = 855
                self.arthro_id()
                self.state = 856
                self.match(Legal_refParser.BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 858
                self.explicitLegalType()
                self.state = 859
                self.match(Legal_refParser.SPACE)
                self.state = 860
                self.match(Legal_refParser.STO)
                self.state = 861
                self.match(Legal_refParser.SPACE)
                self.state = 862
                self.explicitLegalElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                self.explicitLegalType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 865
                self.explicitLegalType()
                self.state = 871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 866
                    self.match(Legal_refParser.SPACE)
                    self.state = 867
                    self.match(Legal_refParser.BRACKET)
                    self.state = 868
                    self.explicitLegalElement()
                    self.state = 869
                    self.match(Legal_refParser.BRACKET)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 873
                self.match(Legal_refParser.BRACKET)
                self.state = 874
                self.explicitLegalType()
                self.state = 875
                self.match(Legal_refParser.COMMA)
                self.state = 876
                self.match(Legal_refParser.SPACE)
                self.state = 877
                self.explicitLegalElement()
                self.state = 878
                self.match(Legal_refParser.BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 880
                self.arthra()
                self.state = 881
                self.match(Legal_refParser.SPACE)
                self.state = 882
                self.range_id()
                self.state = 883
                self.match(Legal_refParser.SPACE)
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 884
                    self.match(Legal_refParser.OF)
                    self.state = 885
                    self.match(Legal_refParser.SPACE)


                self.state = 888
                self.explicitLegalType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 890
                self.explicitLegalElement()
                self.state = 891
                self.match(Legal_refParser.SPACE)
                self.state = 892
                self.match(Legal_refParser.AND)
                self.state = 893
                self.match(Legal_refParser.SPACE)
                self.state = 894
                self.match(Legal_refParser.T__1)
                self.state = 895
                self.match(Legal_refParser.SPACE)
                self.state = 896
                self.explicitLegalElement()
                self.state = 897
                self.match(Legal_refParser.SPACE)
                self.state = 898
                self.match(Legal_refParser.OF)
                self.state = 899
                self.match(Legal_refParser.SPACE)
                self.state = 900
                self.explicitLegalType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 902
                self.explicitLegalElement()
                self.state = 906 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 903
                    self.match(Legal_refParser.COMMA)
                    self.state = 904
                    self.match(Legal_refParser.SPACE)
                    self.state = 905
                    self.explicitLegalElement()
                    self.state = 908 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Legal_refParser.COMMA):
                        break

                self.state = 910
                self.match(Legal_refParser.SPACE)
                self.state = 913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.match(Legal_refParser.OF)
                    self.state = 912
                    self.match(Legal_refParser.SPACE)


                self.state = 915
                self.explicitLegalType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteLegislationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.IncompleteLegislationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explicitLegalElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.ExplicitLegalElementContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.ExplicitLegalElementContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def implicitKwdikas(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitKwdikasContext,0)


        def implicitLegalType(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitLegalTypeContext,0)


        def OF(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OF)
            else:
                return self.getToken(Legal_refParser.OF, i)

        def BRACKET(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.BRACKET)
            else:
                return self.getToken(Legal_refParser.BRACKET, i)

        def STO(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.STO)
            else:
                return self.getToken(Legal_refParser.STO, i)

        def AND(self):
            return self.getToken(Legal_refParser.AND, 0)

        def legislative_type(self):
            return self.getTypedRuleContext(Legal_refParser.Legislative_typeContext,0)


        def implicitLegalElement(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitLegalElementContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_incompleteLegislation

        def enterRule(self, listener):
            if hasattr(listener, "enterIncompleteLegislation"):
                listener.enterIncompleteLegislation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIncompleteLegislation"):
                listener.exitIncompleteLegislation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIncompleteLegislation"):
                return visitor.visitIncompleteLegislation(self)
            else:
                return visitor.visitChildren(self)




    def incompleteLegislation(self):

        localctx = Legal_refParser.IncompleteLegislationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_incompleteLegislation)
        self._la = 0 # Token type
        try:
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.explicitLegalElement()
                self.state = 935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 920
                            self.match(Legal_refParser.SPACE)


                        self.state = 927
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.BRACKET or _la==Legal_refParser.OF or _la==Legal_refParser.STO:
                            self.state = 923
                            _la = self._input.LA(1)
                            if not(_la==Legal_refParser.BRACKET or _la==Legal_refParser.OF or _la==Legal_refParser.STO):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 925
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Legal_refParser.SPACE:
                                self.state = 924
                                self.match(Legal_refParser.SPACE)




                        self.state = 929
                        self.explicitLegalElement()
                        self.state = 931
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                        if la_ == 1:
                            self.state = 930
                            self.match(Legal_refParser.BRACKET)

                 
                    self.state = 937
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                self.state = 938
                self.match(Legal_refParser.SPACE)
                self.state = 941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 939
                    self.match(Legal_refParser.OF)
                    self.state = 940
                    self.match(Legal_refParser.SPACE)


                self.state = 945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 943
                    self.implicitKwdikas()
                    pass

                elif la_ == 2:
                    self.state = 944
                    self.implicitLegalType()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.explicitLegalElement()

                self.state = 948
                self.match(Legal_refParser.SPACE)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 949
                    self.match(Legal_refParser.OF)
                    self.state = 950
                    self.match(Legal_refParser.SPACE)


                self.state = 953
                self.implicitLegalElement()
                self.state = 955
                self.match(Legal_refParser.SPACE)
                self.state = 956
                self.match(Legal_refParser.AND)
                self.state = 957
                self.match(Legal_refParser.SPACE)
                self.state = 958
                self.legislative_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitLegalElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitLegalElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explicitParartima(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitParartimaContext,0)


        def explicitPart(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitPartContext,0)


        def explicitChapter(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitChapterContext,0)


        def explicitArthro(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitArthroContext,0)


        def explicitPar(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitParContext,0)


        def explicitSubPar(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitSubParContext,0)


        def explicitPeriptwsi(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitPeriptwsiContext,0)


        def explicitStoixeio(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitStoixeioContext,0)


        def explicitEdafio(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitEdafioContext,0)


        def explicitPoint(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitPointContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitLegalElement

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitLegalElement"):
                listener.enterExplicitLegalElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitLegalElement"):
                listener.exitExplicitLegalElement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitLegalElement"):
                return visitor.visitExplicitLegalElement(self)
            else:
                return visitor.visitChildren(self)




    def explicitLegalElement(self):

        localctx = Legal_refParser.ExplicitLegalElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_explicitLegalElement)
        try:
            self.state = 972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.PARARTIMA_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.explicitParartima()
                pass
            elif token in [Legal_refParser.PART_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.explicitPart()
                pass
            elif token in [Legal_refParser.CHAPTER_TEXT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 964
                self.explicitChapter()
                pass
            elif token in [Legal_refParser.COMMA, Legal_refParser.ARTHRO_TEXT, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 965
                self.explicitArthro()
                pass
            elif token in [Legal_refParser.PAR_TEXT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 966
                self.explicitPar()
                pass
            elif token in [Legal_refParser.SUBPAR_TEXT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 967
                self.explicitSubPar()
                pass
            elif token in [Legal_refParser.PERIPTWSI_TEXT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 968
                self.explicitPeriptwsi()
                pass
            elif token in [Legal_refParser.STOIXEIO_TEXT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 969
                self.explicitStoixeio()
                pass
            elif token in [Legal_refParser.IONIKO_SYSTEM, Legal_refParser.LEKTIKO_ID, Legal_refParser.NUM, Legal_refParser.EDAFIO_TEXT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 970
                self.explicitEdafio()
                pass
            elif token in [Legal_refParser.POINT_TEXT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 971
                self.explicitPoint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitLegalElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitLegalElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def implicitChapter(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitChapterContext,0)


        def implicitArthro(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitArthroContext,0)


        def implicitPar(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitParContext,0)


        def implicitSubPar(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitSubParContext,0)


        def implicitPeriptwsi(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitPeriptwsiContext,0)


        def implicitStoixeio(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitStoixeioContext,0)


        def implicitEdafio(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitEdafioContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitLegalElement

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitLegalElement"):
                listener.enterImplicitLegalElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitLegalElement"):
                listener.exitImplicitLegalElement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitLegalElement"):
                return visitor.visitImplicitLegalElement(self)
            else:
                return visitor.visitChildren(self)




    def implicitLegalElement(self):

        localctx = Legal_refParser.ImplicitLegalElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_implicitLegalElement)
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.implicitChapter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.implicitArthro()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 976
                self.implicitPar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 977
                self.implicitSubPar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 978
                self.implicitPeriptwsi()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 979
                self.implicitStoixeio()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 980
                self.implicitEdafio()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitPointContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitPointContext, self).__init__(parent, invokingState)
            self.parser = parser

        def POINT_TEXT(self):
            return self.getToken(Legal_refParser.POINT_TEXT, 0)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitPoint

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitPoint"):
                listener.enterExplicitPoint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitPoint"):
                listener.exitExplicitPoint(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitPoint"):
                return visitor.visitExplicitPoint(self)
            else:
                return visitor.visitChildren(self)




    def explicitPoint(self):

        localctx = Legal_refParser.ExplicitPointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_explicitPoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(Legal_refParser.POINT_TEXT)
            self.state = 984
            self.match(Legal_refParser.SPACE)
            self.state = 985
            self.singleLegalElementId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitPartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitPartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PART_TEXT(self):
            return self.getToken(Legal_refParser.PART_TEXT, 0)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitPart

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitPart"):
                listener.enterExplicitPart(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitPart"):
                listener.exitExplicitPart(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitPart"):
                return visitor.visitExplicitPart(self)
            else:
                return visitor.visitChildren(self)




    def explicitPart(self):

        localctx = Legal_refParser.ExplicitPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_explicitPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(Legal_refParser.PART_TEXT)
            self.state = 988
            self.match(Legal_refParser.SPACE)
            self.state = 989
            self.singleLegalElementId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitChapterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitChapterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def CHAPTER_TEXT(self):
            return self.getToken(Legal_refParser.CHAPTER_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitChapter

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitChapter"):
                listener.enterImplicitChapter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitChapter"):
                listener.exitImplicitChapter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitChapter"):
                return visitor.visitImplicitChapter(self)
            else:
                return visitor.visitChildren(self)




    def implicitChapter(self):

        localctx = Legal_refParser.ImplicitChapterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_implicitChapter)
        self._la = 0 # Token type
        try:
            self.state = 1002
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                self.special()
                self.state = 992
                self.match(Legal_refParser.SPACE)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 993
                    self.match(Legal_refParser.OF)
                    self.state = 994
                    self.match(Legal_refParser.SPACE)


                self.state = 997
                self.match(Legal_refParser.CHAPTER_TEXT)
                pass
            elif token in [Legal_refParser.CHAPTER_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.match(Legal_refParser.CHAPTER_TEXT)
                self.state = 1000
                self.match(Legal_refParser.SPACE)
                self.state = 1001
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitChapterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitChapterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHAPTER_TEXT(self):
            return self.getToken(Legal_refParser.CHAPTER_TEXT, 0)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitChapter

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitChapter"):
                listener.enterExplicitChapter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitChapter"):
                listener.exitExplicitChapter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitChapter"):
                return visitor.visitExplicitChapter(self)
            else:
                return visitor.visitChildren(self)




    def explicitChapter(self):

        localctx = Legal_refParser.ExplicitChapterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_explicitChapter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(Legal_refParser.CHAPTER_TEXT)
            self.state = 1005
            self.match(Legal_refParser.SPACE)
            self.state = 1006
            self.singleLegalElementId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitArthroContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitArthroContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.SpecialContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.SpecialContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def ARTHRO_TEXT(self):
            return self.getToken(Legal_refParser.ARTHRO_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitArthro

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitArthro"):
                listener.enterImplicitArthro(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitArthro"):
                listener.exitImplicitArthro(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitArthro"):
                return visitor.visitImplicitArthro(self)
            else:
                return visitor.visitChildren(self)




    def implicitArthro(self):

        localctx = Legal_refParser.ImplicitArthroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_implicitArthro)
        self._la = 0 # Token type
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self.special()
                self.state = 1017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.COMMA:
                        self.state = 1009
                        self.match(Legal_refParser.COMMA)


                    self.state = 1012
                    self.match(Legal_refParser.SPACE)
                    self.state = 1013
                    self.special()
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.COMMA:
                        self.state = 1014
                        self.match(Legal_refParser.COMMA)




                self.state = 1019
                self.match(Legal_refParser.SPACE)
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1020
                    self.match(Legal_refParser.OF)
                    self.state = 1021
                    self.match(Legal_refParser.SPACE)


                self.state = 1024
                self.match(Legal_refParser.ARTHRO_TEXT)
                pass
            elif token in [Legal_refParser.ARTHRO_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.match(Legal_refParser.ARTHRO_TEXT)
                self.state = 1027
                self.match(Legal_refParser.SPACE)
                self.state = 1028
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitArthroContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitArthroContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ARTHRO_TEXT(self):
            return self.getToken(Legal_refParser.ARTHRO_TEXT, 0)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def range_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Range_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Range_idContext,i)


        def multipleLegalElementIds(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.MultipleLegalElementIdsContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.MultipleLegalElementIdsContext,i)


        def singleLegalElementId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.SingleLegalElementIdContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def AND(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.AND)
            else:
                return self.getToken(Legal_refParser.AND, i)

        def next_all(self):
            return self.getTypedRuleContext(Legal_refParser.Next_allContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitArthro

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitArthro"):
                listener.enterExplicitArthro(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitArthro"):
                listener.exitExplicitArthro(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitArthro"):
                return visitor.visitExplicitArthro(self)
            else:
                return visitor.visitChildren(self)




    def explicitArthro(self):

        localctx = Legal_refParser.ExplicitArthroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_explicitArthro)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.COMMA or _la==Legal_refParser.SPECIAL_TEXT:
                self.state = 1031
                self.special()
                self.state = 1032
                self.match(Legal_refParser.SPACE)


            self.state = 1036
            self.match(Legal_refParser.ARTHRO_TEXT)
            self.state = 1037
            self.match(Legal_refParser.SPACE)

            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.range_id()
                pass

            elif la_ == 2:
                self.state = 1039
                self.multipleLegalElementIds()
                pass

            elif la_ == 3:
                self.state = 1040
                self.singleLegalElementId()
                pass


            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 1043
                self.match(Legal_refParser.SPACE)
                self.state = 1044
                self.next_all()


            self.state = 1061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.SPACE:
                        self.state = 1047
                        self.match(Legal_refParser.SPACE)


                    self.state = 1050
                    _la = self._input.LA(1)
                    if not(_la==Legal_refParser.COMMA or _la==Legal_refParser.AND):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1052
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.SPACE:
                        self.state = 1051
                        self.match(Legal_refParser.SPACE)


                    self.state = 1057
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        self.state = 1054
                        self.range_id()
                        pass

                    elif la_ == 2:
                        self.state = 1055
                        self.multipleLegalElementIds()
                        pass

                    elif la_ == 3:
                        self.state = 1056
                        self.singleLegalElementId()
                        pass

             
                self.state = 1063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitArthro_1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitArthro_1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def ARTHRA_PLURAL(self):
            return self.getToken(Legal_refParser.ARTHRA_PLURAL, 0)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def range_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Range_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Range_idContext,i)


        def arthro_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Arthro_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def AND(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.AND)
            else:
                return self.getToken(Legal_refParser.AND, i)

        def next_all(self):
            return self.getTypedRuleContext(Legal_refParser.Next_allContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitArthro_1

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitArthro_1"):
                listener.enterExplicitArthro_1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitArthro_1"):
                listener.exitExplicitArthro_1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitArthro_1"):
                return visitor.visitExplicitArthro_1(self)
            else:
                return visitor.visitChildren(self)




    def explicitArthro_1(self):

        localctx = Legal_refParser.ExplicitArthro_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_explicitArthro_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.COMMA or _la==Legal_refParser.SPECIAL_TEXT:
                self.state = 1064
                self.special()
                self.state = 1065
                self.match(Legal_refParser.SPACE)


            self.state = 1069
            self.match(Legal_refParser.ARTHRA_PLURAL)
            self.state = 1070
            self.match(Legal_refParser.SPACE)

            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1071
                self.range_id()
                pass

            elif la_ == 2:
                self.state = 1072
                self.arthro_id()
                pass


            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1075
                self.match(Legal_refParser.SPACE)
                self.state = 1076
                self.next_all()


            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Legal_refParser.COMMA or _la==Legal_refParser.AND or _la==Legal_refParser.SPACE:
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1079
                    self.match(Legal_refParser.SPACE)


                self.state = 1082
                _la = self._input.LA(1)
                if not(_la==Legal_refParser.COMMA or _la==Legal_refParser.AND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1083
                    self.match(Legal_refParser.SPACE)


                self.state = 1088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1086
                    self.range_id()
                    pass

                elif la_ == 2:
                    self.state = 1087
                    self.arthro_id()
                    pass


                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitParContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitParContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def PAR_TEXT(self):
            return self.getToken(Legal_refParser.PAR_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitPar

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitPar"):
                listener.enterImplicitPar(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitPar"):
                listener.exitImplicitPar(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitPar"):
                return visitor.visitImplicitPar(self)
            else:
                return visitor.visitChildren(self)




    def implicitPar(self):

        localctx = Legal_refParser.ImplicitParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_implicitPar)
        self._la = 0 # Token type
        try:
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self.special()
                self.state = 1096
                self.match(Legal_refParser.SPACE)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1097
                    self.match(Legal_refParser.OF)
                    self.state = 1098
                    self.match(Legal_refParser.SPACE)


                self.state = 1101
                self.match(Legal_refParser.PAR_TEXT)
                pass
            elif token in [Legal_refParser.PAR_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.match(Legal_refParser.PAR_TEXT)
                self.state = 1104
                self.match(Legal_refParser.SPACE)
                self.state = 1105
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitParContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitParContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PAR_TEXT(self):
            return self.getToken(Legal_refParser.PAR_TEXT, 0)

        def multipleLegalElementIds(self):
            return self.getTypedRuleContext(Legal_refParser.MultipleLegalElementIdsContext,0)


        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def range_id(self):
            return self.getTypedRuleContext(Legal_refParser.Range_idContext,0)


        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitPar

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitPar"):
                listener.enterExplicitPar(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitPar"):
                listener.exitExplicitPar(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitPar"):
                return visitor.visitExplicitPar(self)
            else:
                return visitor.visitChildren(self)




    def explicitPar(self):

        localctx = Legal_refParser.ExplicitParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_explicitPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(Legal_refParser.PAR_TEXT)
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 1109
                self.match(Legal_refParser.SPACE)


            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1112
                self.multipleLegalElementIds()
                pass

            elif la_ == 2:
                self.state = 1113
                self.singleLegalElementId()
                pass

            elif la_ == 3:
                self.state = 1114
                self.range_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitSubParContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitSubParContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def SUBPAR_TEXT(self):
            return self.getToken(Legal_refParser.SUBPAR_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitSubPar

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitSubPar"):
                listener.enterImplicitSubPar(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitSubPar"):
                listener.exitImplicitSubPar(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitSubPar"):
                return visitor.visitImplicitSubPar(self)
            else:
                return visitor.visitChildren(self)




    def implicitSubPar(self):

        localctx = Legal_refParser.ImplicitSubParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_implicitSubPar)
        self._la = 0 # Token type
        try:
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1117
                self.special()
                self.state = 1118
                self.match(Legal_refParser.SPACE)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1119
                    self.match(Legal_refParser.OF)
                    self.state = 1120
                    self.match(Legal_refParser.SPACE)


                self.state = 1123
                self.match(Legal_refParser.SUBPAR_TEXT)
                pass
            elif token in [Legal_refParser.SUBPAR_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1125
                self.match(Legal_refParser.SUBPAR_TEXT)
                self.state = 1126
                self.match(Legal_refParser.SPACE)
                self.state = 1127
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitSubParContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitSubParContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SUBPAR_TEXT(self):
            return self.getToken(Legal_refParser.SUBPAR_TEXT, 0)

        def multipleLegalElementIds(self):
            return self.getTypedRuleContext(Legal_refParser.MultipleLegalElementIdsContext,0)


        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitSubPar

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitSubPar"):
                listener.enterExplicitSubPar(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitSubPar"):
                listener.exitExplicitSubPar(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitSubPar"):
                return visitor.visitExplicitSubPar(self)
            else:
                return visitor.visitChildren(self)




    def explicitSubPar(self):

        localctx = Legal_refParser.ExplicitSubParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_explicitSubPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(Legal_refParser.SUBPAR_TEXT)
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 1131
                self.match(Legal_refParser.SPACE)


            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1134
                self.multipleLegalElementIds()
                pass

            elif la_ == 2:
                self.state = 1135
                self.singleLegalElementId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitPeriptwsiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitPeriptwsiContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def PERIPTWSI_TEXT(self):
            return self.getToken(Legal_refParser.PERIPTWSI_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitPeriptwsi

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitPeriptwsi"):
                listener.enterImplicitPeriptwsi(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitPeriptwsi"):
                listener.exitImplicitPeriptwsi(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitPeriptwsi"):
                return visitor.visitImplicitPeriptwsi(self)
            else:
                return visitor.visitChildren(self)




    def implicitPeriptwsi(self):

        localctx = Legal_refParser.ImplicitPeriptwsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_implicitPeriptwsi)
        self._la = 0 # Token type
        try:
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1138
                self.special()
                self.state = 1139
                self.match(Legal_refParser.SPACE)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1140
                    self.match(Legal_refParser.OF)
                    self.state = 1141
                    self.match(Legal_refParser.SPACE)


                self.state = 1144
                self.match(Legal_refParser.PERIPTWSI_TEXT)
                pass
            elif token in [Legal_refParser.PERIPTWSI_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.match(Legal_refParser.PERIPTWSI_TEXT)
                self.state = 1147
                self.match(Legal_refParser.SPACE)
                self.state = 1148
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitPeriptwsiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitPeriptwsiContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PERIPTWSI_TEXT(self):
            return self.getToken(Legal_refParser.PERIPTWSI_TEXT, 0)

        def multipleLegalElementIds(self):
            return self.getTypedRuleContext(Legal_refParser.MultipleLegalElementIdsContext,0)


        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitPeriptwsi

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitPeriptwsi"):
                listener.enterExplicitPeriptwsi(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitPeriptwsi"):
                listener.exitExplicitPeriptwsi(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitPeriptwsi"):
                return visitor.visitExplicitPeriptwsi(self)
            else:
                return visitor.visitChildren(self)




    def explicitPeriptwsi(self):

        localctx = Legal_refParser.ExplicitPeriptwsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_explicitPeriptwsi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(Legal_refParser.PERIPTWSI_TEXT)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 1152
                self.match(Legal_refParser.SPACE)


            self.state = 1157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1155
                self.multipleLegalElementIds()
                pass

            elif la_ == 2:
                self.state = 1156
                self.singleLegalElementId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitStoixeioContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitStoixeioContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def STOIXEIO_TEXT(self):
            return self.getToken(Legal_refParser.STOIXEIO_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitStoixeio

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitStoixeio"):
                listener.enterImplicitStoixeio(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitStoixeio"):
                listener.exitImplicitStoixeio(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitStoixeio"):
                return visitor.visitImplicitStoixeio(self)
            else:
                return visitor.visitChildren(self)




    def implicitStoixeio(self):

        localctx = Legal_refParser.ImplicitStoixeioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_implicitStoixeio)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.special()
                self.state = 1160
                self.match(Legal_refParser.SPACE)
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1161
                    self.match(Legal_refParser.OF)
                    self.state = 1162
                    self.match(Legal_refParser.SPACE)


                self.state = 1165
                self.match(Legal_refParser.STOIXEIO_TEXT)
                pass
            elif token in [Legal_refParser.STOIXEIO_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.match(Legal_refParser.STOIXEIO_TEXT)
                self.state = 1168
                self.match(Legal_refParser.SPACE)
                self.state = 1169
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitStoixeioContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitStoixeioContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STOIXEIO_TEXT(self):
            return self.getToken(Legal_refParser.STOIXEIO_TEXT, 0)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def multipleLegalElementIds(self):
            return self.getTypedRuleContext(Legal_refParser.MultipleLegalElementIdsContext,0)


        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitStoixeio

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitStoixeio"):
                listener.enterExplicitStoixeio(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitStoixeio"):
                listener.exitExplicitStoixeio(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitStoixeio"):
                return visitor.visitExplicitStoixeio(self)
            else:
                return visitor.visitChildren(self)




    def explicitStoixeio(self):

        localctx = Legal_refParser.ExplicitStoixeioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_explicitStoixeio)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(Legal_refParser.STOIXEIO_TEXT)
            self.state = 1173
            self.match(Legal_refParser.SPACE)
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1174
                self.multipleLegalElementIds()
                pass

            elif la_ == 2:
                self.state = 1175
                self.singleLegalElementId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitEdafioContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitEdafioContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def EDAFIO_TEXT(self):
            return self.getToken(Legal_refParser.EDAFIO_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitEdafio

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitEdafio"):
                listener.enterImplicitEdafio(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitEdafio"):
                listener.exitImplicitEdafio(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitEdafio"):
                return visitor.visitImplicitEdafio(self)
            else:
                return visitor.visitChildren(self)




    def implicitEdafio(self):

        localctx = Legal_refParser.ImplicitEdafioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_implicitEdafio)
        self._la = 0 # Token type
        try:
            self.state = 1189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.special()
                self.state = 1179
                self.match(Legal_refParser.SPACE)
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1180
                    self.match(Legal_refParser.OF)
                    self.state = 1181
                    self.match(Legal_refParser.SPACE)


                self.state = 1184
                self.match(Legal_refParser.EDAFIO_TEXT)
                pass
            elif token in [Legal_refParser.EDAFIO_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1186
                self.match(Legal_refParser.EDAFIO_TEXT)
                self.state = 1187
                self.match(Legal_refParser.SPACE)
                self.state = 1188
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitEdafioContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitEdafioContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def EDAFIO_TEXT(self):
            return self.getToken(Legal_refParser.EDAFIO_TEXT, 0)

        def multipleLegalElementIds(self):
            return self.getTypedRuleContext(Legal_refParser.MultipleLegalElementIdsContext,0)


        def singleLegalElementId(self):
            return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitEdafio

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitEdafio"):
                listener.enterExplicitEdafio(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitEdafio"):
                listener.exitExplicitEdafio(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitEdafio"):
                return visitor.visitExplicitEdafio(self)
            else:
                return visitor.visitChildren(self)




    def explicitEdafio(self):

        localctx = Legal_refParser.ExplicitEdafioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_explicitEdafio)
        self._la = 0 # Token type
        try:
            self.state = 1206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.IONIKO_SYSTEM, Legal_refParser.LEKTIKO_ID, Legal_refParser.NUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1191
                    self.multipleLegalElementIds()
                    pass

                elif la_ == 2:
                    self.state = 1192
                    self.singleLegalElementId()
                    pass


                self.state = 1195
                self.match(Legal_refParser.SPACE)
                self.state = 1196
                self.match(Legal_refParser.EDAFIO_TEXT)
                pass
            elif token in [Legal_refParser.EDAFIO_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self.match(Legal_refParser.EDAFIO_TEXT)
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1199
                    self.match(Legal_refParser.SPACE)


                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1202
                    self.multipleLegalElementIds()
                    pass

                elif la_ == 2:
                    self.state = 1203
                    self.singleLegalElementId()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitParartimaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitParartimaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parartima(self):
            return self.getTypedRuleContext(Legal_refParser.ParartimaContext,0)


        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def latin_id(self):
            return self.getTypedRuleContext(Legal_refParser.Latin_idContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitParartima

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitParartima"):
                listener.enterExplicitParartima(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitParartima"):
                listener.exitExplicitParartima(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitParartima"):
                return visitor.visitExplicitParartima(self)
            else:
                return visitor.visitChildren(self)




    def explicitParartima(self):

        localctx = Legal_refParser.ExplicitParartimaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_explicitParartima)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.parartima()
            self.state = 1209
            self.match(Legal_refParser.SPACE)
            self.state = 1210
            self.latin_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitLegalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitLegalTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def legislative_type(self):
            return self.getTypedRuleContext(Legal_refParser.Legislative_typeContext,0)


        def OF(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OF)
            else:
                return self.getToken(Legal_refParser.OF, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitLegalType

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitLegalType"):
                listener.enterImplicitLegalType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitLegalType"):
                listener.exitImplicitLegalType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitLegalType"):
                return visitor.visitImplicitLegalType(self)
            else:
                return visitor.visitChildren(self)




    def implicitLegalType(self):

        localctx = Legal_refParser.ImplicitLegalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_implicitLegalType)
        self._la = 0 # Token type
        try:
            self.state = 1228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.COMMA, Legal_refParser.OF, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1212
                    self.match(Legal_refParser.OF)
                    self.state = 1213
                    self.match(Legal_refParser.SPACE)


                self.state = 1216
                self.special()
                self.state = 1217
                self.match(Legal_refParser.SPACE)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1218
                    self.match(Legal_refParser.OF)
                    self.state = 1219
                    self.match(Legal_refParser.SPACE)


                self.state = 1222
                self.legislative_type()
                pass
            elif token in [Legal_refParser.ACTS, Legal_refParser.ROYAL_DECREE, Legal_refParser.COMPULSORY_LAW, Legal_refParser.DECREE_LAW, Legal_refParser.PRESIDENTIAL_DECREE, Legal_refParser.DECREE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.legislative_type()
                self.state = 1225
                self.match(Legal_refParser.SPACE)
                self.state = 1226
                self.special()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitLegalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitLegalTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def legislative_type(self):
            return self.getTypedRuleContext(Legal_refParser.Legislative_typeContext,0)


        def law_id(self):
            return self.getTypedRuleContext(Legal_refParser.Law_idContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def syntagma(self):
            return self.getTypedRuleContext(Legal_refParser.SyntagmaContext,0)


        def explicitKwdikas(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitKwdikasContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitLegalType

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitLegalType"):
                listener.enterExplicitLegalType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitLegalType"):
                listener.exitExplicitLegalType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitLegalType"):
                return visitor.visitExplicitLegalType(self)
            else:
                return visitor.visitChildren(self)




    def explicitLegalType(self):

        localctx = Legal_refParser.ExplicitLegalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_explicitLegalType)
        self._la = 0 # Token type
        try:
            self.state = 1254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.ACTS, Legal_refParser.ROYAL_DECREE, Legal_refParser.COMPULSORY_LAW, Legal_refParser.DECREE_LAW, Legal_refParser.PRESIDENTIAL_DECREE, Legal_refParser.DECREE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.legislative_type()
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1231
                    self.match(Legal_refParser.SPACE)


                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1234
                    self.match(Legal_refParser.OF)
                    self.state = 1235
                    self.match(Legal_refParser.SPACE)


                self.state = 1238
                self.law_id()
                pass
            elif token in [Legal_refParser.COMMA, Legal_refParser.OF, Legal_refParser.SPECIAL_TEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OF:
                    self.state = 1240
                    self.match(Legal_refParser.OF)
                    self.state = 1241
                    self.match(Legal_refParser.SPACE)


                self.state = 1244
                self.special()
                self.state = 1245
                self.match(Legal_refParser.SPACE)
                self.state = 1246
                self.syntagma()
                pass
            elif token in [Legal_refParser.SYNTAGMA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1248
                self.syntagma()
                pass
            elif token in [Legal_refParser.NUM, Legal_refParser.ALL_CHARS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1249
                self.law_id()
                self.state = 1250
                self.match(Legal_refParser.SPACE)
                self.state = 1251
                self.legislative_type()
                pass
            elif token in [Legal_refParser.KWDIKAS_FOROLOGIKIS_DIADIKASIAS, Legal_refParser.YPALLILIKOS_KWDIKAS, Legal_refParser.AGROTIKOS_KWDIKAS, Legal_refParser.ALIEUTIKOS_KWDIKAS, Legal_refParser.ASTIKOS_KWDIKAS, Legal_refParser.AGORANOMIKOS_KWDIKAS, Legal_refParser.GENIKOS_OIKODOMIKOS_KANONISMOS, Legal_refParser.NEOS_OIKODOMIKOS_KANONISMOS, Legal_refParser.KWDIKAS_ADEIWN_FORTIGWN_AUTOKINITWN, Legal_refParser.KWDIKAS_APODIMIAS_METANASTEUSIS_DIAVATIRIA, Legal_refParser.KWDIKAS_DEONTOLOGIAS_DIKIGORIKOU_LEITOURGIMATOS, Legal_refParser.KWDIKAS_DIATAGMATWN_GIA_DIMOTOLOGIA, Legal_refParser.KWDIKAS_DIATAKSEWN_STRATOLOGIKIS_FISIS, Legal_refParser.KWDIKAS_ELLINIKIS_ITHAGENEIAS, Legal_refParser.KWDIKAS_ESODWN_DIMWN_KAI_KOINOTITWN, Legal_refParser.DASIKOS_KWDIKAS, Legal_refParser.KWDIKAS_AEROPORIKOY_DIKAIOY, Legal_refParser.KWDIKAS_KATASKEUIS_DIMOSIWN_ERGWN, Legal_refParser.KWDIKAS_NOMOTHESIAS_KUVERNISIS, Legal_refParser.KWDIKAS_NOMWN_GIA_NARKWTIKA, Legal_refParser.KWDIKAS_PAROXIS_EPENDITIKWN_KINITRWN, Legal_refParser.KWDIKAS_PERI_ARXAIOTITWN, Legal_refParser.KWDIKAS_SYNALLAGWN_HLEKTRIKIS_ENERGEIAS, Legal_refParser.KWDIKAS_TAMEIOU_NOMIKWN, Legal_refParser.KWDIKAS_TROFIMWN_KAI_POTWN, Legal_refParser.KWDIKAS_FOROLOGIAS_KAPNOU, Legal_refParser.KWDIKAS_FOROLOGIKWN_STOIXEIWN, Legal_refParser.KWDIKAS_ANAGK_APAL_AKINITWN, Legal_refParser.KWDIKAS_BIBLIWN_KAI_STOIXEIWN, Legal_refParser.KWDIKAS_POINIKIS_DIKONOMIAS, Legal_refParser.POINIKOS_KWDIKAS, Legal_refParser.ETHNIKOS_TELWNIAKOS_KWDIKAS, Legal_refParser.KWDIKAS_FOROLOGIAS_EISODIMATOS, Legal_refParser.KWDIKAS_BASIKIS_POLEODOMIKIS_NOMOTHESIAS, Legal_refParser.KTINOTROFIKOS_KWDIKAS, Legal_refParser.KWDIKAS_TELWN_XARTOSIMOU, Legal_refParser.KWDIKAS_BASIKWN_KANONWN_KRATOUMENWN, Legal_refParser.KWDIKAS_FOROLOGIKIS_DIKONOMIAS, Legal_refParser.KWDIKAS_DIKIGORWN, Legal_refParser.KWDIKAS_DIMOSIOU_LOGISTIKOU, Legal_refParser.KWDIKAS_DIMOSIOU_NAUTIKOU_DIKAIOU, Legal_refParser.KWDIKAS_FOROY_PROSTITHEMENIS_AKSIAS, Legal_refParser.KWDIKAS_POLITIKIS_DIKONOMIAS, Legal_refParser.KWDIKAS_DHMWN_KAI_KOINOTITWN, Legal_refParser.KWDIKAS_ODIKIS_KYKLOFORIAS, Legal_refParser.KWDIKAS_DIKASTIKOU_SWMATOS_ENOPLWN_DINAMEWN, Legal_refParser.KWDIKAS_DIKASTIKWN_EPIMELITWN, Legal_refParser.KWDIKAS_ORGANISMOU_DIKASTIRIWN, Legal_refParser.KWDIKAS_DIKASTIKWN_YPALLHLWN, Legal_refParser.KWDIKAS_DIKWN_DIMOSIOU, Legal_refParser.KWDIKAS_DIOIKITIKIS_DIADIKASIAS, Legal_refParser.KWDIKAS_DIOIKITIKIS_DIKONOMIAS, Legal_refParser.KWDIKAS_EISPRAKSEWN_DHMOSIWN_ESODWN, Legal_refParser.KWDIKAS_FARMAKEUTIKIS_DEONTOLOGIAS, Legal_refParser.KWDIKAS_IDIWTIKOU_NAUTIKOU_DIKAIOU, Legal_refParser.KWDIKAS_POLEMIKWN_SYNTAKSEWN, Legal_refParser.KWDIKAS_POLITIKWN_KAI_STRATIWTIKWN_SUNTAKSEWN, Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_POLITIKWN_YPALLHLWN, Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_STRATOU, Legal_refParser.KWDIKAS_PROSOPIKOU_LIMENIKOU_SWMATOS, Legal_refParser.KWDIKAS_SYMVOLEOGRAFWN, Legal_refParser.KWDIKAS_SYNTAKSEWN_PROSOPIKOU_OSE, Legal_refParser.KWDIKAS_ANOTATOU_EIDIKOU_DIKASTIRIOU, Legal_refParser.KWDIKAS_FOROLOGIAS_KLIRONOMIWN, Legal_refParser.KWDIKAS_FOROLOGIKIS_APEIKONISIS_SYNALLAGWN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1253
                self.explicitKwdikas()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitKwdikasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitKwdikasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def KWDIKAS_TEXT(self):
            return self.getToken(Legal_refParser.KWDIKAS_TEXT, 0)

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitKwdikas

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitKwdikas"):
                listener.enterImplicitKwdikas(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitKwdikas"):
                listener.exitImplicitKwdikas(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitKwdikas"):
                return visitor.visitImplicitKwdikas(self)
            else:
                return visitor.visitChildren(self)




    def implicitKwdikas(self):

        localctx = Legal_refParser.ImplicitKwdikasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_implicitKwdikas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.OF:
                self.state = 1256
                self.match(Legal_refParser.OF)
                self.state = 1257
                self.match(Legal_refParser.SPACE)


            self.state = 1260
            self.special()
            self.state = 1261
            self.match(Legal_refParser.SPACE)
            self.state = 1262
            self.match(Legal_refParser.KWDIKAS_TEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitKwdikasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitKwdikasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def KWDIKAS_FOROLOGIKIS_DIADIKASIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROLOGIKIS_DIADIKASIAS, 0)

        def YPALLILIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.YPALLILIKOS_KWDIKAS, 0)

        def AGROTIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.AGROTIKOS_KWDIKAS, 0)

        def ALIEUTIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.ALIEUTIKOS_KWDIKAS, 0)

        def ASTIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.ASTIKOS_KWDIKAS, 0)

        def AGORANOMIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.AGORANOMIKOS_KWDIKAS, 0)

        def GENIKOS_OIKODOMIKOS_KANONISMOS(self):
            return self.getToken(Legal_refParser.GENIKOS_OIKODOMIKOS_KANONISMOS, 0)

        def NEOS_OIKODOMIKOS_KANONISMOS(self):
            return self.getToken(Legal_refParser.NEOS_OIKODOMIKOS_KANONISMOS, 0)

        def KWDIKAS_ADEIWN_FORTIGWN_AUTOKINITWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_ADEIWN_FORTIGWN_AUTOKINITWN, 0)

        def KWDIKAS_APODIMIAS_METANASTEUSIS_DIAVATIRIA(self):
            return self.getToken(Legal_refParser.KWDIKAS_APODIMIAS_METANASTEUSIS_DIAVATIRIA, 0)

        def KWDIKAS_DEONTOLOGIAS_DIKIGORIKOU_LEITOURGIMATOS(self):
            return self.getToken(Legal_refParser.KWDIKAS_DEONTOLOGIAS_DIKIGORIKOU_LEITOURGIMATOS, 0)

        def KWDIKAS_DIATAGMATWN_GIA_DIMOTOLOGIA(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIATAGMATWN_GIA_DIMOTOLOGIA, 0)

        def KWDIKAS_DIATAKSEWN_STRATOLOGIKIS_FISIS(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIATAKSEWN_STRATOLOGIKIS_FISIS, 0)

        def KWDIKAS_ELLINIKIS_ITHAGENEIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_ELLINIKIS_ITHAGENEIAS, 0)

        def KWDIKAS_ESODWN_DIMWN_KAI_KOINOTITWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_ESODWN_DIMWN_KAI_KOINOTITWN, 0)

        def DASIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.DASIKOS_KWDIKAS, 0)

        def KWDIKAS_AEROPORIKOY_DIKAIOY(self):
            return self.getToken(Legal_refParser.KWDIKAS_AEROPORIKOY_DIKAIOY, 0)

        def KWDIKAS_KATASKEUIS_DIMOSIWN_ERGWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_KATASKEUIS_DIMOSIWN_ERGWN, 0)

        def KWDIKAS_NOMOTHESIAS_KUVERNISIS(self):
            return self.getToken(Legal_refParser.KWDIKAS_NOMOTHESIAS_KUVERNISIS, 0)

        def KWDIKAS_NOMWN_GIA_NARKWTIKA(self):
            return self.getToken(Legal_refParser.KWDIKAS_NOMWN_GIA_NARKWTIKA, 0)

        def KWDIKAS_PAROXIS_EPENDITIKWN_KINITRWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_PAROXIS_EPENDITIKWN_KINITRWN, 0)

        def KWDIKAS_PERI_ARXAIOTITWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_PERI_ARXAIOTITWN, 0)

        def KWDIKAS_SYNALLAGWN_HLEKTRIKIS_ENERGEIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_SYNALLAGWN_HLEKTRIKIS_ENERGEIAS, 0)

        def KWDIKAS_TAMEIOU_NOMIKWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_TAMEIOU_NOMIKWN, 0)

        def KWDIKAS_TROFIMWN_KAI_POTWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_TROFIMWN_KAI_POTWN, 0)

        def KWDIKAS_FOROLOGIAS_KAPNOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROLOGIAS_KAPNOU, 0)

        def KWDIKAS_FOROLOGIKWN_STOIXEIWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROLOGIKWN_STOIXEIWN, 0)

        def KWDIKAS_ANAGK_APAL_AKINITWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_ANAGK_APAL_AKINITWN, 0)

        def KWDIKAS_BIBLIWN_KAI_STOIXEIWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_BIBLIWN_KAI_STOIXEIWN, 0)

        def KWDIKAS_POINIKIS_DIKONOMIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_POINIKIS_DIKONOMIAS, 0)

        def POINIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.POINIKOS_KWDIKAS, 0)

        def ETHNIKOS_TELWNIAKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.ETHNIKOS_TELWNIAKOS_KWDIKAS, 0)

        def KWDIKAS_FOROLOGIAS_EISODIMATOS(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROLOGIAS_EISODIMATOS, 0)

        def KWDIKAS_BASIKIS_POLEODOMIKIS_NOMOTHESIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_BASIKIS_POLEODOMIKIS_NOMOTHESIAS, 0)

        def KTINOTROFIKOS_KWDIKAS(self):
            return self.getToken(Legal_refParser.KTINOTROFIKOS_KWDIKAS, 0)

        def KWDIKAS_TELWN_XARTOSIMOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_TELWN_XARTOSIMOU, 0)

        def KWDIKAS_BASIKWN_KANONWN_KRATOUMENWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_BASIKWN_KANONWN_KRATOUMENWN, 0)

        def KWDIKAS_FOROLOGIKIS_DIKONOMIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROLOGIKIS_DIKONOMIAS, 0)

        def KWDIKAS_DIKIGORWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIKIGORWN, 0)

        def KWDIKAS_DIMOSIOU_LOGISTIKOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIMOSIOU_LOGISTIKOU, 0)

        def KWDIKAS_DIMOSIOU_NAUTIKOU_DIKAIOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIMOSIOU_NAUTIKOU_DIKAIOU, 0)

        def KWDIKAS_FOROY_PROSTITHEMENIS_AKSIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROY_PROSTITHEMENIS_AKSIAS, 0)

        def KWDIKAS_POLITIKIS_DIKONOMIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_POLITIKIS_DIKONOMIAS, 0)

        def KWDIKAS_DHMWN_KAI_KOINOTITWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_DHMWN_KAI_KOINOTITWN, 0)

        def KWDIKAS_ODIKIS_KYKLOFORIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_ODIKIS_KYKLOFORIAS, 0)

        def KWDIKAS_DIKASTIKOU_SWMATOS_ENOPLWN_DINAMEWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIKASTIKOU_SWMATOS_ENOPLWN_DINAMEWN, 0)

        def KWDIKAS_DIKASTIKWN_EPIMELITWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIKASTIKWN_EPIMELITWN, 0)

        def KWDIKAS_ORGANISMOU_DIKASTIRIWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_ORGANISMOU_DIKASTIRIWN, 0)

        def KWDIKAS_DIKASTIKWN_YPALLHLWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIKASTIKWN_YPALLHLWN, 0)

        def KWDIKAS_DIKWN_DIMOSIOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIKWN_DIMOSIOU, 0)

        def KWDIKAS_DIOIKITIKIS_DIADIKASIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIOIKITIKIS_DIADIKASIAS, 0)

        def KWDIKAS_DIOIKITIKIS_DIKONOMIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_DIOIKITIKIS_DIKONOMIAS, 0)

        def KWDIKAS_EISPRAKSEWN_DHMOSIWN_ESODWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_EISPRAKSEWN_DHMOSIWN_ESODWN, 0)

        def KWDIKAS_FARMAKEUTIKIS_DEONTOLOGIAS(self):
            return self.getToken(Legal_refParser.KWDIKAS_FARMAKEUTIKIS_DEONTOLOGIAS, 0)

        def KWDIKAS_IDIWTIKOU_NAUTIKOU_DIKAIOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_IDIWTIKOU_NAUTIKOU_DIKAIOU, 0)

        def KWDIKAS_POLEMIKWN_SYNTAKSEWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_POLEMIKWN_SYNTAKSEWN, 0)

        def KWDIKAS_METOXIKOU_TAMEIOU_POLITIKWN_YPALLHLWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_POLITIKWN_YPALLHLWN, 0)

        def KWDIKAS_METOXIKOU_TAMEIOU_STRATOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_STRATOU, 0)

        def KWDIKAS_PROSOPIKOU_LIMENIKOU_SWMATOS(self):
            return self.getToken(Legal_refParser.KWDIKAS_PROSOPIKOU_LIMENIKOU_SWMATOS, 0)

        def KWDIKAS_SYMVOLEOGRAFWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_SYMVOLEOGRAFWN, 0)

        def KWDIKAS_SYNTAKSEWN_PROSOPIKOU_OSE(self):
            return self.getToken(Legal_refParser.KWDIKAS_SYNTAKSEWN_PROSOPIKOU_OSE, 0)

        def KWDIKAS_ANOTATOU_EIDIKOU_DIKASTIRIOU(self):
            return self.getToken(Legal_refParser.KWDIKAS_ANOTATOU_EIDIKOU_DIKASTIRIOU, 0)

        def KWDIKAS_FOROLOGIAS_KLIRONOMIWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROLOGIAS_KLIRONOMIWN, 0)

        def KWDIKAS_FOROLOGIKIS_APEIKONISIS_SYNALLAGWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_FOROLOGIKIS_APEIKONISIS_SYNALLAGWN, 0)

        def KWDIKAS_POLITIKWN_KAI_STRATIWTIKWN_SUNTAKSEWN(self):
            return self.getToken(Legal_refParser.KWDIKAS_POLITIKWN_KAI_STRATIWTIKWN_SUNTAKSEWN, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitKwdikas

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitKwdikas"):
                listener.enterExplicitKwdikas(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitKwdikas"):
                listener.exitExplicitKwdikas(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitKwdikas"):
                return visitor.visitExplicitKwdikas(self)
            else:
                return visitor.visitChildren(self)




    def explicitKwdikas(self):

        localctx = Legal_refParser.ExplicitKwdikasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_explicitKwdikas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Legal_refParser.KWDIKAS_FOROLOGIKIS_DIADIKASIAS) | (1 << Legal_refParser.YPALLILIKOS_KWDIKAS) | (1 << Legal_refParser.AGROTIKOS_KWDIKAS) | (1 << Legal_refParser.ALIEUTIKOS_KWDIKAS) | (1 << Legal_refParser.ASTIKOS_KWDIKAS) | (1 << Legal_refParser.AGORANOMIKOS_KWDIKAS) | (1 << Legal_refParser.GENIKOS_OIKODOMIKOS_KANONISMOS) | (1 << Legal_refParser.NEOS_OIKODOMIKOS_KANONISMOS) | (1 << Legal_refParser.KWDIKAS_ADEIWN_FORTIGWN_AUTOKINITWN) | (1 << Legal_refParser.KWDIKAS_APODIMIAS_METANASTEUSIS_DIAVATIRIA) | (1 << Legal_refParser.KWDIKAS_DEONTOLOGIAS_DIKIGORIKOU_LEITOURGIMATOS) | (1 << Legal_refParser.KWDIKAS_DIATAGMATWN_GIA_DIMOTOLOGIA) | (1 << Legal_refParser.KWDIKAS_DIATAKSEWN_STRATOLOGIKIS_FISIS) | (1 << Legal_refParser.KWDIKAS_ELLINIKIS_ITHAGENEIAS) | (1 << Legal_refParser.KWDIKAS_ESODWN_DIMWN_KAI_KOINOTITWN) | (1 << Legal_refParser.DASIKOS_KWDIKAS) | (1 << Legal_refParser.KWDIKAS_AEROPORIKOY_DIKAIOY) | (1 << Legal_refParser.KWDIKAS_KATASKEUIS_DIMOSIWN_ERGWN) | (1 << Legal_refParser.KWDIKAS_NOMOTHESIAS_KUVERNISIS) | (1 << Legal_refParser.KWDIKAS_NOMWN_GIA_NARKWTIKA) | (1 << Legal_refParser.KWDIKAS_PAROXIS_EPENDITIKWN_KINITRWN) | (1 << Legal_refParser.KWDIKAS_PERI_ARXAIOTITWN) | (1 << Legal_refParser.KWDIKAS_SYNALLAGWN_HLEKTRIKIS_ENERGEIAS) | (1 << Legal_refParser.KWDIKAS_TAMEIOU_NOMIKWN) | (1 << Legal_refParser.KWDIKAS_TROFIMWN_KAI_POTWN) | (1 << Legal_refParser.KWDIKAS_FOROLOGIAS_KAPNOU) | (1 << Legal_refParser.KWDIKAS_FOROLOGIKWN_STOIXEIWN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Legal_refParser.KWDIKAS_ANAGK_APAL_AKINITWN - 64)) | (1 << (Legal_refParser.KWDIKAS_BIBLIWN_KAI_STOIXEIWN - 64)) | (1 << (Legal_refParser.KWDIKAS_POINIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.POINIKOS_KWDIKAS - 64)) | (1 << (Legal_refParser.ETHNIKOS_TELWNIAKOS_KWDIKAS - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIAS_EISODIMATOS - 64)) | (1 << (Legal_refParser.KWDIKAS_BASIKIS_POLEODOMIKIS_NOMOTHESIAS - 64)) | (1 << (Legal_refParser.KTINOTROFIKOS_KWDIKAS - 64)) | (1 << (Legal_refParser.KWDIKAS_TELWN_XARTOSIMOU - 64)) | (1 << (Legal_refParser.KWDIKAS_BASIKWN_KANONWN_KRATOUMENWN - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKIGORWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIMOSIOU_LOGISTIKOU - 64)) | (1 << (Legal_refParser.KWDIKAS_DIMOSIOU_NAUTIKOU_DIKAIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROY_PROSTITHEMENIS_AKSIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_POLITIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DHMWN_KAI_KOINOTITWN - 64)) | (1 << (Legal_refParser.KWDIKAS_ODIKIS_KYKLOFORIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKASTIKOU_SWMATOS_ENOPLWN_DINAMEWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKASTIKWN_EPIMELITWN - 64)) | (1 << (Legal_refParser.KWDIKAS_ORGANISMOU_DIKASTIRIWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKASTIKWN_YPALLHLWN - 64)) | (1 << (Legal_refParser.KWDIKAS_DIKWN_DIMOSIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_DIOIKITIKIS_DIADIKASIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_DIOIKITIKIS_DIKONOMIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_EISPRAKSEWN_DHMOSIWN_ESODWN - 64)) | (1 << (Legal_refParser.KWDIKAS_FARMAKEUTIKIS_DEONTOLOGIAS - 64)) | (1 << (Legal_refParser.KWDIKAS_IDIWTIKOU_NAUTIKOU_DIKAIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_POLEMIKWN_SYNTAKSEWN - 64)) | (1 << (Legal_refParser.KWDIKAS_POLITIKWN_KAI_STRATIWTIKWN_SUNTAKSEWN - 64)) | (1 << (Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_POLITIKWN_YPALLHLWN - 64)) | (1 << (Legal_refParser.KWDIKAS_METOXIKOU_TAMEIOU_STRATOU - 64)) | (1 << (Legal_refParser.KWDIKAS_PROSOPIKOU_LIMENIKOU_SWMATOS - 64)) | (1 << (Legal_refParser.KWDIKAS_SYMVOLEOGRAFWN - 64)) | (1 << (Legal_refParser.KWDIKAS_SYNTAKSEWN_PROSOPIKOU_OSE - 64)) | (1 << (Legal_refParser.KWDIKAS_ANOTATOU_EIDIKOU_DIKASTIRIOU - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIAS_KLIRONOMIWN - 64)) | (1 << (Legal_refParser.KWDIKAS_FOROLOGIKIS_APEIKONISIS_SYNALLAGWN - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Legislative_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Legislative_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def acts(self):
            return self.getTypedRuleContext(Legal_refParser.ActsContext,0)


        def presidential_decree(self):
            return self.getTypedRuleContext(Legal_refParser.Presidential_decreeContext,0)


        def compulsory_law(self):
            return self.getTypedRuleContext(Legal_refParser.Compulsory_lawContext,0)


        def decree_law(self):
            return self.getTypedRuleContext(Legal_refParser.Decree_lawContext,0)


        def decree(self):
            return self.getTypedRuleContext(Legal_refParser.DecreeContext,0)


        def royal_decree(self):
            return self.getTypedRuleContext(Legal_refParser.Royal_decreeContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_legislative_type

        def enterRule(self, listener):
            if hasattr(listener, "enterLegislative_type"):
                listener.enterLegislative_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLegislative_type"):
                listener.exitLegislative_type(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLegislative_type"):
                return visitor.visitLegislative_type(self)
            else:
                return visitor.visitChildren(self)




    def legislative_type(self):

        localctx = Legal_refParser.Legislative_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_legislative_type)
        try:
            self.state = 1272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.ACTS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1266
                self.acts()
                pass
            elif token in [Legal_refParser.PRESIDENTIAL_DECREE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1267
                self.presidential_decree()
                pass
            elif token in [Legal_refParser.COMPULSORY_LAW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1268
                self.compulsory_law()
                pass
            elif token in [Legal_refParser.DECREE_LAW]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1269
                self.decree_law()
                pass
            elif token in [Legal_refParser.DECREE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1270
                self.decree()
                pass
            elif token in [Legal_refParser.ROYAL_DECREE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1271
                self.royal_decree()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ActsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ACTS(self):
            return self.getToken(Legal_refParser.ACTS, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_acts

        def enterRule(self, listener):
            if hasattr(listener, "enterActs"):
                listener.enterActs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitActs"):
                listener.exitActs(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitActs"):
                return visitor.visitActs(self)
            else:
                return visitor.visitChildren(self)




    def acts(self):

        localctx = Legal_refParser.ActsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_acts)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(Legal_refParser.ACTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Presidential_decreeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Presidential_decreeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PRESIDENTIAL_DECREE(self):
            return self.getToken(Legal_refParser.PRESIDENTIAL_DECREE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_presidential_decree

        def enterRule(self, listener):
            if hasattr(listener, "enterPresidential_decree"):
                listener.enterPresidential_decree(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPresidential_decree"):
                listener.exitPresidential_decree(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPresidential_decree"):
                return visitor.visitPresidential_decree(self)
            else:
                return visitor.visitChildren(self)




    def presidential_decree(self):

        localctx = Legal_refParser.Presidential_decreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_presidential_decree)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(Legal_refParser.PRESIDENTIAL_DECREE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compulsory_lawContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Compulsory_lawContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMPULSORY_LAW(self):
            return self.getToken(Legal_refParser.COMPULSORY_LAW, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_compulsory_law

        def enterRule(self, listener):
            if hasattr(listener, "enterCompulsory_law"):
                listener.enterCompulsory_law(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompulsory_law"):
                listener.exitCompulsory_law(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompulsory_law"):
                return visitor.visitCompulsory_law(self)
            else:
                return visitor.visitChildren(self)




    def compulsory_law(self):

        localctx = Legal_refParser.Compulsory_lawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_compulsory_law)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(Legal_refParser.COMPULSORY_LAW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decree_lawContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Decree_lawContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECREE_LAW(self):
            return self.getToken(Legal_refParser.DECREE_LAW, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_decree_law

        def enterRule(self, listener):
            if hasattr(listener, "enterDecree_law"):
                listener.enterDecree_law(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDecree_law"):
                listener.exitDecree_law(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDecree_law"):
                return visitor.visitDecree_law(self)
            else:
                return visitor.visitChildren(self)




    def decree_law(self):

        localctx = Legal_refParser.Decree_lawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_decree_law)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(Legal_refParser.DECREE_LAW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecreeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.DecreeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECREE(self):
            return self.getToken(Legal_refParser.DECREE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_decree

        def enterRule(self, listener):
            if hasattr(listener, "enterDecree"):
                listener.enterDecree(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDecree"):
                listener.exitDecree(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDecree"):
                return visitor.visitDecree(self)
            else:
                return visitor.visitChildren(self)




    def decree(self):

        localctx = Legal_refParser.DecreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_decree)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(Legal_refParser.DECREE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Royal_decreeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Royal_decreeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ROYAL_DECREE(self):
            return self.getToken(Legal_refParser.ROYAL_DECREE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_royal_decree

        def enterRule(self, listener):
            if hasattr(listener, "enterRoyal_decree"):
                listener.enterRoyal_decree(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoyal_decree"):
                listener.exitRoyal_decree(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRoyal_decree"):
                return visitor.visitRoyal_decree(self)
            else:
                return visitor.visitChildren(self)




    def royal_decree(self):

        localctx = Legal_refParser.Royal_decreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_royal_decree)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(Legal_refParser.ROYAL_DECREE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyntagmaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.SyntagmaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SYNTAGMA(self):
            return self.getToken(Legal_refParser.SYNTAGMA, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_syntagma

        def enterRule(self, listener):
            if hasattr(listener, "enterSyntagma"):
                listener.enterSyntagma(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSyntagma"):
                listener.exitSyntagma(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSyntagma"):
                return visitor.visitSyntagma(self)
            else:
                return visitor.visitChildren(self)




    def syntagma(self):

        localctx = Legal_refParser.SyntagmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_syntagma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(Legal_refParser.SYNTAGMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.SpecialContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SPECIAL_TEXT(self):
            return self.getToken(Legal_refParser.SPECIAL_TEXT, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_special

        def enterRule(self, listener):
            if hasattr(listener, "enterSpecial"):
                listener.enterSpecial(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecial"):
                listener.exitSpecial(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecial"):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = Legal_refParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.COMMA:
                self.state = 1288
                self.match(Legal_refParser.COMMA)


            self.state = 1291
            self.match(Legal_refParser.SPECIAL_TEXT)
            self.state = 1294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1292
                self.match(Legal_refParser.SPACE)
                self.state = 1293
                self.match(Legal_refParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_idContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Range_idContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(Legal_refParser.RANGE, 0)

        def HYPHEN(self):
            return self.getToken(Legal_refParser.HYPHEN, 0)

        def singleLegalElementId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.SingleLegalElementIdContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,i)


        def arthro_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Arthro_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_range_id

        def enterRule(self, listener):
            if hasattr(listener, "enterRange_id"):
                listener.enterRange_id(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRange_id"):
                listener.exitRange_id(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRange_id"):
                return visitor.visitRange_id(self)
            else:
                return visitor.visitChildren(self)




    def range_id(self):

        localctx = Legal_refParser.Range_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_range_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1296
                self.singleLegalElementId()
                pass

            elif la_ == 2:
                self.state = 1297
                self.arthro_id()
                pass


            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 1300
                self.match(Legal_refParser.SPACE)


            self.state = 1303
            _la = self._input.LA(1)
            if not(_la==Legal_refParser.HYPHEN or _la==Legal_refParser.RANGE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 1304
                self.match(Legal_refParser.SPACE)


            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1307
                self.singleLegalElementId()
                pass

            elif la_ == 2:
                self.state = 1308
                self.arthro_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArthraContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ArthraContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ARTHRA_PLURAL(self):
            return self.getToken(Legal_refParser.ARTHRA_PLURAL, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_arthra

        def enterRule(self, listener):
            if hasattr(listener, "enterArthra"):
                listener.enterArthra(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArthra"):
                listener.exitArthra(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitArthra"):
                return visitor.visitArthra(self)
            else:
                return visitor.visitChildren(self)




    def arthra(self):

        localctx = Legal_refParser.ArthraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arthra)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(Legal_refParser.ARTHRA_PLURAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class M1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.M1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def arthro_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Arthro_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,i)


        def COMMA(self):
            return self.getToken(Legal_refParser.COMMA, 0)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def explicitLegalElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.ExplicitLegalElementContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.ExplicitLegalElementContext,i)


        def AND(self):
            return self.getToken(Legal_refParser.AND, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_m1

        def enterRule(self, listener):
            if hasattr(listener, "enterM1"):
                listener.enterM1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitM1"):
                listener.exitM1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitM1"):
                return visitor.visitM1(self)
            else:
                return visitor.visitChildren(self)




    def m1(self):

        localctx = Legal_refParser.M1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_m1)
        self._la = 0 # Token type
        try:
            self.state = 1330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1313
                self.arthro_id()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.COMMA:
                    self.state = 1314
                    self.match(Legal_refParser.COMMA)


                self.state = 1319 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1317
                        self.match(Legal_refParser.SPACE)
                        self.state = 1318
                        self.explicitLegalElement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1321 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.arthro_id()
                self.state = 1328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1324
                    self.match(Legal_refParser.SPACE)
                    self.state = 1325
                    self.match(Legal_refParser.AND)
                    self.state = 1326
                    self.match(Legal_refParser.SPACE)
                    self.state = 1327
                    self.arthro_id()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class M2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.M2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def arthro_id(self):
            return self.getTypedRuleContext(Legal_refParser.Arthro_idContext,0)


        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def next_all(self):
            return self.getTypedRuleContext(Legal_refParser.Next_allContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_m2

        def enterRule(self, listener):
            if hasattr(listener, "enterM2"):
                listener.enterM2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitM2"):
                listener.exitM2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitM2"):
                return visitor.visitM2(self)
            else:
                return visitor.visitChildren(self)




    def m2(self):

        localctx = Legal_refParser.M2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_m2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.arthro_id()
            self.state = 1335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1333
                self.match(Legal_refParser.SPACE)
                self.state = 1334
                self.next_all()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Next_allContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Next_allContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT_ALL(self):
            return self.getToken(Legal_refParser.NEXT_ALL, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_next_all

        def enterRule(self, listener):
            if hasattr(listener, "enterNext_all"):
                listener.enterNext_all(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNext_all"):
                listener.exitNext_all(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNext_all"):
                return visitor.visitNext_all(self)
            else:
                return visitor.visitChildren(self)




    def next_all(self):

        localctx = Legal_refParser.Next_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_next_all)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(Legal_refParser.NEXT_ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CourtDecisionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CourtDecisionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def singleCourtDec(self):
            return self.getTypedRuleContext(Legal_refParser.SingleCourtDecContext,0)


        def multipleCourtsDec(self):
            return self.getTypedRuleContext(Legal_refParser.MultipleCourtsDecContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_courtDecision

        def enterRule(self, listener):
            if hasattr(listener, "enterCourtDecision"):
                listener.enterCourtDecision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCourtDecision"):
                listener.exitCourtDecision(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCourtDecision"):
                return visitor.visitCourtDecision(self)
            else:
                return visitor.visitChildren(self)




    def courtDecision(self):

        localctx = Legal_refParser.CourtDecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_courtDecision)
        try:
            self.state = 1341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1339
                self.singleCourtDec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1340
                self.multipleCourtsDec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleCourtDecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.SingleCourtDecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def completeCourtDec(self):
            return self.getTypedRuleContext(Legal_refParser.CompleteCourtDecContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_singleCourtDec

        def enterRule(self, listener):
            if hasattr(listener, "enterSingleCourtDec"):
                listener.enterSingleCourtDec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSingleCourtDec"):
                listener.exitSingleCourtDec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleCourtDec"):
                return visitor.visitSingleCourtDec(self)
            else:
                return visitor.visitChildren(self)




    def singleCourtDec(self):

        localctx = Legal_refParser.SingleCourtDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_singleCourtDec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.completeCourtDec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleCourtsDecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.MultipleCourtsDecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decision(self):
            return self.getTypedRuleContext(Legal_refParser.DecisionContext,0)


        def incompleteCourtDecAlt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.IncompleteCourtDecAltContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.IncompleteCourtDecAltContext,i)


        def completeCourtDecAlt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.CompleteCourtDecAltContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.CompleteCourtDecAltContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def COLON(self):
            return self.getToken(Legal_refParser.COLON, 0)

        def AND(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.AND)
            else:
                return self.getToken(Legal_refParser.AND, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_multipleCourtsDec

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleCourtsDec"):
                listener.enterMultipleCourtsDec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleCourtsDec"):
                listener.exitMultipleCourtsDec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultipleCourtsDec"):
                return visitor.visitMultipleCourtsDec(self)
            else:
                return visitor.visitChildren(self)




    def multipleCourtsDec(self):

        localctx = Legal_refParser.MultipleCourtsDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_multipleCourtsDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.decision()
            self.state = 1347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1346
                self.match(Legal_refParser.SPACE)


            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.COLON:
                self.state = 1349
                self.match(Legal_refParser.COLON)


            self.state = 1353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 1352
                self.match(Legal_refParser.SPACE)


            self.state = 1357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1355
                self.incompleteCourtDecAlt()
                pass

            elif la_ == 2:
                self.state = 1356
                self.completeCourtDecAlt()
                pass


            self.state = 1368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1359
                    self.match(Legal_refParser.SPACE)
                    self.state = 1360
                    self.match(Legal_refParser.AND)
                    self.state = 1361
                    self.match(Legal_refParser.SPACE)
                    self.state = 1364
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1362
                        self.incompleteCourtDecAlt()
                        pass

                    elif la_ == 2:
                        self.state = 1363
                        self.completeCourtDecAlt()
                        pass

             
                self.state = 1370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompleteCourtDecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CompleteCourtDecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def completeCourtMultipleDecisions(self):
            return self.getTypedRuleContext(Legal_refParser.CompleteCourtMultipleDecisionsContext,0)


        def completeCourtSingleDecision(self):
            return self.getTypedRuleContext(Legal_refParser.CompleteCourtSingleDecisionContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_completeCourtDec

        def enterRule(self, listener):
            if hasattr(listener, "enterCompleteCourtDec"):
                listener.enterCompleteCourtDec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompleteCourtDec"):
                listener.exitCompleteCourtDec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompleteCourtDec"):
                return visitor.visitCompleteCourtDec(self)
            else:
                return visitor.visitChildren(self)




    def completeCourtDec(self):

        localctx = Legal_refParser.CompleteCourtDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_completeCourtDec)
        try:
            self.state = 1373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.completeCourtMultipleDecisions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.completeCourtSingleDecision()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompleteCourtMultipleDecisionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CompleteCourtMultipleDecisionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explicitCourt(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitCourtContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def multiple_ids(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Multiple_idsContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Multiple_idsContext,i)


        def AND(self):
            return self.getToken(Legal_refParser.AND, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def OLOMELEIA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OLOMELEIA)
            else:
                return self.getToken(Legal_refParser.OLOMELEIA, i)

        def MELI(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.MELI)
            else:
                return self.getToken(Legal_refParser.MELI, i)

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def decision(self):
            return self.getTypedRuleContext(Legal_refParser.DecisionContext,0)


        def BRACKET(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.BRACKET)
            else:
                return self.getToken(Legal_refParser.BRACKET, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_completeCourtMultipleDecisions

        def enterRule(self, listener):
            if hasattr(listener, "enterCompleteCourtMultipleDecisions"):
                listener.enterCompleteCourtMultipleDecisions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompleteCourtMultipleDecisions"):
                listener.exitCompleteCourtMultipleDecisions(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompleteCourtMultipleDecisions"):
                return visitor.visitCompleteCourtMultipleDecisions(self)
            else:
                return visitor.visitChildren(self)




    def completeCourtMultipleDecisions(self):

        localctx = Legal_refParser.CompleteCourtMultipleDecisionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_completeCourtMultipleDecisions)
        self._la = 0 # Token type
        try:
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1375
                self.explicitCourt()
                self.state = 1376
                self.match(Legal_refParser.SPACE)
                self.state = 1377
                self.multiple_ids()
                self.state = 1378
                self.match(Legal_refParser.SPACE)
                self.state = 1379
                self.match(Legal_refParser.AND)
                self.state = 1380
                self.match(Legal_refParser.SPACE)
                self.state = 1381
                self.multiple_ids()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1383
                self.explicitCourt()
                self.state = 1384
                self.match(Legal_refParser.SPACE)
                self.state = 1385
                self.multiple_ids()
                self.state = 1393 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1386
                        self.match(Legal_refParser.COMMA)
                        self.state = 1387
                        self.match(Legal_refParser.SPACE)
                        self.state = 1388
                        self.multiple_ids()
                        self.state = 1391
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                        if la_ == 1:
                            self.state = 1389
                            self.match(Legal_refParser.SPACE)
                            self.state = 1390
                            _la = self._input.LA(1)
                            if not(_la==Legal_refParser.OLOMELEIA or _la==Legal_refParser.MELI):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()



                    else:
                        raise NoViableAltException(self)
                    self.state = 1395 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1397
                self.explicitCourt()
                self.state = 1398
                self.match(Legal_refParser.SPACE)
                self.state = 1399
                self.multiple_ids()
                self.state = 1402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1400
                    self.match(Legal_refParser.SPACE)
                    self.state = 1401
                    self.special()


                self.state = 1423 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1407
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                        if la_ == 1:
                            self.state = 1404
                            self.match(Legal_refParser.COMMA)
                            self.state = 1405
                            self.match(Legal_refParser.SPACE)
                            self.state = 1406
                            _la = self._input.LA(1)
                            if not(_la==Legal_refParser.OLOMELEIA or _la==Legal_refParser.MELI):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1410
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                        if la_ == 1:
                            self.state = 1409
                            self.match(Legal_refParser.SPACE)


                        self.state = 1413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.COMMA:
                            self.state = 1412
                            self.match(Legal_refParser.COMMA)


                        self.state = 1416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 1415
                            self.match(Legal_refParser.SPACE)


                        self.state = 1418
                        self.multiple_ids()
                        self.state = 1421
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                        if la_ == 1:
                            self.state = 1419
                            self.match(Legal_refParser.SPACE)
                            self.state = 1420
                            self.match(Legal_refParser.OLOMELEIA)



                    else:
                        raise NoViableAltException(self)
                    self.state = 1425 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1427
                self.explicitCourt()
                self.state = 1428
                self.match(Legal_refParser.SPACE)
                self.state = 1437 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1429
                        self.multiple_ids()
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 1430
                            self.match(Legal_refParser.SPACE)
                            self.state = 1431
                            _la = self._input.LA(1)
                            if not(_la==Legal_refParser.OLOMELEIA or _la==Legal_refParser.MELI):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1434
                        self.match(Legal_refParser.COMMA)
                        self.state = 1435
                        self.match(Legal_refParser.SPACE)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1439 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

                self.state = 1442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1441
                    self.multiple_ids()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1444
                self.explicitCourt()
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.COMMA:
                    self.state = 1445
                    self.match(Legal_refParser.COMMA)


                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1448
                    self.match(Legal_refParser.SPACE)


                self.state = 1451
                self.multiple_ids()
                self.state = 1454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1452
                    self.match(Legal_refParser.SPACE)
                    self.state = 1453
                    _la = self._input.LA(1)
                    if not(_la==Legal_refParser.OLOMELEIA or _la==Legal_refParser.MELI):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1464 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1457
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 1456
                            self.match(Legal_refParser.SPACE)


                        self.state = 1459
                        self.match(Legal_refParser.COMMA)
                        self.state = 1461
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.SPACE:
                            self.state = 1460
                            self.match(Legal_refParser.SPACE)


                        self.state = 1463
                        self.multiple_ids()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1466 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1468
                self.multiple_ids()
                self.state = 1469
                self.match(Legal_refParser.COMMA)
                self.state = 1470
                self.match(Legal_refParser.SPACE)
                self.state = 1471
                self.multiple_ids()
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Legal_refParser.SPACE:
                    self.state = 1472
                    self.match(Legal_refParser.SPACE)
                    self.state = 1477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1478
                self.explicitCourt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1480
                self.multiple_ids()
                self.state = 1481
                self.match(Legal_refParser.SPACE)
                self.state = 1482
                self.match(Legal_refParser.AND)
                self.state = 1483
                self.match(Legal_refParser.SPACE)
                self.state = 1484
                self.multiple_ids()
                self.state = 1485
                self.match(Legal_refParser.SPACE)
                self.state = 1486
                self.decision()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1487
                    self.match(Legal_refParser.SPACE)


                self.state = 1490
                self.explicitCourt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1492
                self.decision()
                self.state = 1493
                self.match(Legal_refParser.SPACE)
                self.state = 1494
                self.multiple_ids()
                self.state = 1495
                self.match(Legal_refParser.SPACE)
                self.state = 1496
                self.match(Legal_refParser.AND)
                self.state = 1497
                self.match(Legal_refParser.SPACE)
                self.state = 1498
                self.multiple_ids()
                self.state = 1499
                self.match(Legal_refParser.SPACE)
                self.state = 1500
                self.explicitCourt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1502
                self.explicitCourt()
                self.state = 1503
                self.match(Legal_refParser.SPACE)
                self.state = 1504
                self.match(Legal_refParser.BRACKET)
                self.state = 1505
                self.multiple_ids()
                self.state = 1509 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1506
                        self.match(Legal_refParser.COMMA)
                        self.state = 1507
                        self.match(Legal_refParser.SPACE)
                        self.state = 1508
                        self.multiple_ids()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1511 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                self.state = 1514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1513
                    self.match(Legal_refParser.BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompleteCourtSingleDecisionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CompleteCourtSingleDecisionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ids(self):
            return self.getTypedRuleContext(Legal_refParser.IdsContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def decision(self):
            return self.getTypedRuleContext(Legal_refParser.DecisionContext,0)


        def explicitCourt(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitCourtContext,0)


        def YP_ARITHM(self):
            return self.getToken(Legal_refParser.YP_ARITHM, 0)

        def btrimeles(self):
            return self.getTypedRuleContext(Legal_refParser.BtrimelesContext,0)


        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def OLOMELEIA(self):
            return self.getToken(Legal_refParser.OLOMELEIA, 0)

        def COMMA(self):
            return self.getToken(Legal_refParser.COMMA, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_completeCourtSingleDecision

        def enterRule(self, listener):
            if hasattr(listener, "enterCompleteCourtSingleDecision"):
                listener.enterCompleteCourtSingleDecision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompleteCourtSingleDecision"):
                listener.exitCompleteCourtSingleDecision(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompleteCourtSingleDecision"):
                return visitor.visitCompleteCourtSingleDecision(self)
            else:
                return visitor.visitChildren(self)




    def completeCourtSingleDecision(self):

        localctx = Legal_refParser.CompleteCourtSingleDecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_completeCourtSingleDecision)
        self._la = 0 # Token type
        try:
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.YP_ARITHM:
                    self.state = 1518
                    self.match(Legal_refParser.YP_ARITHM)
                    self.state = 1519
                    self.match(Legal_refParser.SPACE)


                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.BT:
                    self.state = 1522
                    self.btrimeles()
                    self.state = 1523
                    self.match(Legal_refParser.SPACE)


                self.state = 1527
                self.ids()
                self.state = 1528
                self.match(Legal_refParser.SPACE)
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.COMMA or _la==Legal_refParser.SPECIAL_TEXT:
                    self.state = 1529
                    self.special()
                    self.state = 1530
                    self.match(Legal_refParser.SPACE)


                self.state = 1534
                self.decision()
                self.state = 1535
                self.match(Legal_refParser.SPACE)
                self.state = 1536
                self.explicitCourt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self.decision()
                self.state = 1539
                self.match(Legal_refParser.SPACE)
                self.state = 1540
                self.ids()
                self.state = 1541
                self.match(Legal_refParser.SPACE)
                self.state = 1542
                self.explicitCourt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1544
                self.explicitCourt()
                self.state = 1545
                self.match(Legal_refParser.SPACE)
                self.state = 1546
                self.ids()
                self.state = 1549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1547
                    self.match(Legal_refParser.SPACE)
                    self.state = 1548
                    self.special()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1551
                self.explicitCourt()
                self.state = 1553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1552
                    self.match(Legal_refParser.SPACE)


                self.state = 1555
                self.ids()
                self.state = 1558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1556
                    self.match(Legal_refParser.SPACE)
                    self.state = 1557
                    self.match(Legal_refParser.OLOMELEIA)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1560
                self.decision()
                self.state = 1561
                self.match(Legal_refParser.SPACE)
                self.state = 1562
                self.match(Legal_refParser.YP_ARITHM)
                self.state = 1563
                self.match(Legal_refParser.SPACE)
                self.state = 1564
                self.ids()
                self.state = 1565
                self.match(Legal_refParser.COMMA)
                self.state = 1566
                self.match(Legal_refParser.SPACE)
                self.state = 1567
                self.explicitCourt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteCourtDecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.IncompleteCourtDecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ids(self):
            return self.getTypedRuleContext(Legal_refParser.IdsContext,0)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def decision(self):
            return self.getTypedRuleContext(Legal_refParser.DecisionContext,0)


        def implicitCourt(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitCourtContext,0)


        def getRuleIndex(self):
            return Legal_refParser.RULE_incompleteCourtDec

        def enterRule(self, listener):
            if hasattr(listener, "enterIncompleteCourtDec"):
                listener.enterIncompleteCourtDec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIncompleteCourtDec"):
                listener.exitIncompleteCourtDec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIncompleteCourtDec"):
                return visitor.visitIncompleteCourtDec(self)
            else:
                return visitor.visitChildren(self)




    def incompleteCourtDec(self):

        localctx = Legal_refParser.IncompleteCourtDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_incompleteCourtDec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.ids()
            self.state = 1572
            self.match(Legal_refParser.SPACE)
            self.state = 1573
            self.special()
            self.state = 1574
            self.match(Legal_refParser.SPACE)
            self.state = 1575
            self.decision()
            self.state = 1576
            self.match(Legal_refParser.SPACE)
            self.state = 1577
            self.implicitCourt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompleteCourtDecAltContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.CompleteCourtDecAltContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explicitCourt(self):
            return self.getTypedRuleContext(Legal_refParser.ExplicitCourtContext,0)


        def ids(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.IdsContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.IdsContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def special(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.SpecialContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.SpecialContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_completeCourtDecAlt

        def enterRule(self, listener):
            if hasattr(listener, "enterCompleteCourtDecAlt"):
                listener.enterCompleteCourtDecAlt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompleteCourtDecAlt"):
                listener.exitCompleteCourtDecAlt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompleteCourtDecAlt"):
                return visitor.visitCompleteCourtDecAlt(self)
            else:
                return visitor.visitChildren(self)




    def completeCourtDecAlt(self):

        localctx = Legal_refParser.CompleteCourtDecAltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_completeCourtDecAlt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1579
                self.ids()
                self.state = 1591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1580
                    self.match(Legal_refParser.SPACE)
                    pass

                elif la_ == 2:
                    self.state = 1582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.COMMA:
                        self.state = 1581
                        self.match(Legal_refParser.COMMA)


                    self.state = 1584
                    self.match(Legal_refParser.SPACE)
                    self.state = 1585
                    self.special()
                    self.state = 1587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.COMMA:
                        self.state = 1586
                        self.match(Legal_refParser.COMMA)


                    self.state = 1589
                    self.match(Legal_refParser.SPACE)
                    pass


                self.state = 1595 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Legal_refParser.NUM):
                    break

            self.state = 1597
            self.explicitCourt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteCourtDecAltContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.IncompleteCourtDecAltContext, self).__init__(parent, invokingState)
            self.parser = parser

        def implicitCourt(self):
            return self.getTypedRuleContext(Legal_refParser.ImplicitCourtContext,0)


        def ids(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.IdsContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.IdsContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def special(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.SpecialContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.SpecialContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_incompleteCourtDecAlt

        def enterRule(self, listener):
            if hasattr(listener, "enterIncompleteCourtDecAlt"):
                listener.enterIncompleteCourtDecAlt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIncompleteCourtDecAlt"):
                listener.exitIncompleteCourtDecAlt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIncompleteCourtDecAlt"):
                return visitor.visitIncompleteCourtDecAlt(self)
            else:
                return visitor.visitChildren(self)




    def incompleteCourtDecAlt(self):

        localctx = Legal_refParser.IncompleteCourtDecAltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_incompleteCourtDecAlt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1599
                self.ids()
                self.state = 1611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1600
                    self.match(Legal_refParser.SPACE)
                    pass

                elif la_ == 2:
                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.COMMA:
                        self.state = 1601
                        self.match(Legal_refParser.COMMA)


                    self.state = 1604
                    self.match(Legal_refParser.SPACE)
                    self.state = 1605
                    self.special()
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.COMMA:
                        self.state = 1606
                        self.match(Legal_refParser.COMMA)


                    self.state = 1609
                    self.match(Legal_refParser.SPACE)
                    pass


                self.state = 1615 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Legal_refParser.NUM):
                    break

            self.state = 1617
            self.implicitCourt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecisionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.DecisionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECISION_ELEMENT(self):
            return self.getToken(Legal_refParser.DECISION_ELEMENT, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_decision

        def enterRule(self, listener):
            if hasattr(listener, "enterDecision"):
                listener.enterDecision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDecision"):
                listener.exitDecision(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDecision"):
                return visitor.visitDecision(self)
            else:
                return visitor.visitChildren(self)




    def decision(self):

        localctx = Legal_refParser.DecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_decision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.match(Legal_refParser.DECISION_ELEMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLegalElementIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.SingleLegalElementIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(Legal_refParser.NUM, 0)

        def IONIKO_SYSTEM(self):
            return self.getToken(Legal_refParser.IONIKO_SYSTEM, 0)

        def LEKTIKO_ID(self):
            return self.getToken(Legal_refParser.LEKTIKO_ID, 0)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_singleLegalElementId

        def enterRule(self, listener):
            if hasattr(listener, "enterSingleLegalElementId"):
                listener.enterSingleLegalElementId(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSingleLegalElementId"):
                listener.exitSingleLegalElementId(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleLegalElementId"):
                return visitor.visitSingleLegalElementId(self)
            else:
                return visitor.visitChildren(self)




    def singleLegalElementId(self):

        localctx = Legal_refParser.SingleLegalElementIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_singleLegalElementId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1621
                self.match(Legal_refParser.NUM)
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1622
                    self.match(Legal_refParser.SPACE)


                self.state = 1625
                self.match(Legal_refParser.IONIKO_SYSTEM)
                pass

            elif la_ == 2:
                self.state = 1626
                self.match(Legal_refParser.NUM)
                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.match(Legal_refParser.T__2)


                pass

            elif la_ == 3:
                self.state = 1630
                self.match(Legal_refParser.IONIKO_SYSTEM)
                pass

            elif la_ == 4:
                self.state = 1631
                self.match(Legal_refParser.LEKTIKO_ID)
                pass

            elif la_ == 5:
                self.state = 1632
                self.match(Legal_refParser.IONIKO_SYSTEM)
                self.state = 1633
                self.match(Legal_refParser.NUM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleLegalElementIdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.MultipleLegalElementIdsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def singleLegalElementId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.SingleLegalElementIdContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.SingleLegalElementIdContext,i)


        def range_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Legal_refParser.Range_idContext)
            else:
                return self.getTypedRuleContext(Legal_refParser.Range_idContext,i)


        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def AND(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.AND)
            else:
                return self.getToken(Legal_refParser.AND, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_multipleLegalElementIds

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleLegalElementIds"):
                listener.enterMultipleLegalElementIds(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleLegalElementIds"):
                listener.exitMultipleLegalElementIds(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultipleLegalElementIds"):
                return visitor.visitMultipleLegalElementIds(self)
            else:
                return visitor.visitChildren(self)




    def multipleLegalElementIds(self):

        localctx = Legal_refParser.MultipleLegalElementIdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_multipleLegalElementIds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1636
                self.singleLegalElementId()
                pass

            elif la_ == 2:
                self.state = 1637
                self.range_id()
                pass


            self.state = 1655 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.SPACE:
                        self.state = 1640
                        self.match(Legal_refParser.SPACE)


                    self.state = 1648
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                    if la_ == 1:
                        self.state = 1643
                        self.match(Legal_refParser.COMMA)
                        pass

                    elif la_ == 2:
                        self.state = 1644
                        self.match(Legal_refParser.AND)
                        pass

                    elif la_ == 3:
                        self.state = 1645
                        self.match(Legal_refParser.COMMA)
                        self.state = 1646
                        self.match(Legal_refParser.SPACE)
                        self.state = 1647
                        self.match(Legal_refParser.AND)
                        pass


                    self.state = 1650
                    self.match(Legal_refParser.SPACE)
                    self.state = 1653
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1651
                        self.singleLegalElementId()
                        pass

                    elif la_ == 2:
                        self.state = 1652
                        self.range_id()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 1657 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arthro_idContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Arthro_idContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(Legal_refParser.NUM, 0)

        def IONIKO_SYSTEM(self):
            return self.getToken(Legal_refParser.IONIKO_SYSTEM, 0)

        def LEKTIKO_ID(self):
            return self.getToken(Legal_refParser.LEKTIKO_ID, 0)

        def SPACE(self):
            return self.getToken(Legal_refParser.SPACE, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_arthro_id

        def enterRule(self, listener):
            if hasattr(listener, "enterArthro_id"):
                listener.enterArthro_id(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArthro_id"):
                listener.exitArthro_id(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitArthro_id"):
                return visitor.visitArthro_id(self)
            else:
                return visitor.visitChildren(self)




    def arthro_id(self):

        localctx = Legal_refParser.Arthro_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_arthro_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1659
                self.match(Legal_refParser.NUM)
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1660
                    self.match(Legal_refParser.SPACE)


                self.state = 1663
                self.match(Legal_refParser.IONIKO_SYSTEM)
                pass

            elif la_ == 2:
                self.state = 1664
                self.match(Legal_refParser.NUM)
                pass

            elif la_ == 3:
                self.state = 1665
                self.match(Legal_refParser.LEKTIKO_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.IdsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUM(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.NUM)
            else:
                return self.getToken(Legal_refParser.NUM, i)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def DOT(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.DOT)
            else:
                return self.getToken(Legal_refParser.DOT, i)

        def HYPHEN(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.HYPHEN)
            else:
                return self.getToken(Legal_refParser.HYPHEN, i)

        def COMMA(self):
            return self.getToken(Legal_refParser.COMMA, 0)

        def SLASH(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SLASH)
            else:
                return self.getToken(Legal_refParser.SLASH, i)

        def BACKSLASH(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.BACKSLASH)
            else:
                return self.getToken(Legal_refParser.BACKSLASH, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_ids

        def enterRule(self, listener):
            if hasattr(listener, "enterIds"):
                listener.enterIds(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIds"):
                listener.exitIds(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIds"):
                return visitor.visitIds(self)
            else:
                return visitor.visitChildren(self)




    def ids(self):

        localctx = Legal_refParser.IdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ids)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(Legal_refParser.NUM)
            self.state = 1670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.SPACE:
                self.state = 1669
                self.match(Legal_refParser.SPACE)


            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Legal_refParser.HYPHEN) | (1 << Legal_refParser.COMMA) | (1 << Legal_refParser.DOT))) != 0):
                self.state = 1672
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Legal_refParser.HYPHEN) | (1 << Legal_refParser.COMMA) | (1 << Legal_refParser.DOT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1673
                    self.match(Legal_refParser.SPACE)


                self.state = 1676
                self.match(Legal_refParser.NUM)
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.DOT:
                    self.state = 1677
                    self.match(Legal_refParser.DOT)




            self.state = 1697 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1682
                    _la = self._input.LA(1)
                    if not(_la==Legal_refParser.SLASH or _la==Legal_refParser.BACKSLASH):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Legal_refParser.SPACE:
                        self.state = 1683
                        self.match(Legal_refParser.SPACE)


                    self.state = 1686
                    self.match(Legal_refParser.NUM)
                    self.state = 1694
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1688
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Legal_refParser.SPACE:
                                self.state = 1687
                                self.match(Legal_refParser.SPACE)


                            self.state = 1690
                            _la = self._input.LA(1)
                            if not(_la==Legal_refParser.HYPHEN or _la==Legal_refParser.DOT):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1691
                            self.match(Legal_refParser.NUM) 
                        self.state = 1696
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,215,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 1699 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_idsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Multiple_idsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUM(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.NUM)
            else:
                return self.getToken(Legal_refParser.NUM, i)

        def SLASH(self):
            return self.getToken(Legal_refParser.SLASH, 0)

        def DOT(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.DOT)
            else:
                return self.getToken(Legal_refParser.DOT, i)

        def HYPHEN(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.HYPHEN)
            else:
                return self.getToken(Legal_refParser.HYPHEN, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.COMMA)
            else:
                return self.getToken(Legal_refParser.COMMA, i)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_multiple_ids

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiple_ids"):
                listener.enterMultiple_ids(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiple_ids"):
                listener.exitMultiple_ids(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiple_ids"):
                return visitor.visitMultiple_ids(self)
            else:
                return visitor.visitChildren(self)




    def multiple_ids(self):

        localctx = Legal_refParser.Multiple_idsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_multiple_ids)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.match(Legal_refParser.NUM)
            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Legal_refParser.HYPHEN) | (1 << Legal_refParser.COMMA) | (1 << Legal_refParser.DOT))) != 0) or _la==Legal_refParser.SPACE:
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1702
                    self.match(Legal_refParser.SPACE)


                self.state = 1705
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Legal_refParser.HYPHEN) | (1 << Legal_refParser.COMMA) | (1 << Legal_refParser.DOT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.SPACE:
                    self.state = 1706
                    self.match(Legal_refParser.SPACE)


                self.state = 1709
                self.match(Legal_refParser.NUM)
                self.state = 1714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1715
            self.match(Legal_refParser.SLASH)
            self.state = 1716
            self.match(Legal_refParser.NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_idContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Date_idContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUM(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.NUM)
            else:
                return self.getToken(Legal_refParser.NUM, i)

        def HYPHEN(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.HYPHEN)
            else:
                return self.getToken(Legal_refParser.HYPHEN, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_date_id

        def enterRule(self, listener):
            if hasattr(listener, "enterDate_id"):
                listener.enterDate_id(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDate_id"):
                listener.exitDate_id(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDate_id"):
                return visitor.visitDate_id(self)
            else:
                return visitor.visitChildren(self)




    def date_id(self):

        localctx = Legal_refParser.Date_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_date_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(Legal_refParser.NUM)
            self.state = 1721 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1719
                self.match(Legal_refParser.HYPHEN)
                self.state = 1720
                self.match(Legal_refParser.NUM)
                self.state = 1723 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Legal_refParser.HYPHEN):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Law_idContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Law_idContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ids(self):
            return self.getTypedRuleContext(Legal_refParser.IdsContext,0)


        def ALL_CHARS(self):
            return self.getToken(Legal_refParser.ALL_CHARS, 0)

        def SLASH(self):
            return self.getToken(Legal_refParser.SLASH, 0)

        def NUM(self):
            return self.getToken(Legal_refParser.NUM, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_law_id

        def enterRule(self, listener):
            if hasattr(listener, "enterLaw_id"):
                listener.enterLaw_id(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLaw_id"):
                listener.exitLaw_id(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLaw_id"):
                return visitor.visitLaw_id(self)
            else:
                return visitor.visitChildren(self)




    def law_id(self):

        localctx = Legal_refParser.Law_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_law_id)
        try:
            self.state = 1729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.NUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1725
                self.ids()
                pass
            elif token in [Legal_refParser.ALL_CHARS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1726
                self.match(Legal_refParser.ALL_CHARS)
                self.state = 1727
                self.match(Legal_refParser.SLASH)
                self.state = 1728
                self.match(Legal_refParser.NUM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Latin_idContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.Latin_idContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LATIN_ID(self):
            return self.getToken(Legal_refParser.LATIN_ID, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_latin_id

        def enterRule(self, listener):
            if hasattr(listener, "enterLatin_id"):
                listener.enterLatin_id(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLatin_id"):
                listener.exitLatin_id(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLatin_id"):
                return visitor.visitLatin_id(self)
            else:
                return visitor.visitChildren(self)




    def latin_id(self):

        localctx = Legal_refParser.Latin_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_latin_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.match(Legal_refParser.LATIN_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitCourtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ExplicitCourtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dikastirio(self):
            return self.getTypedRuleContext(Legal_refParser.DikastirioContext,0)


        def OF(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OF)
            else:
                return self.getToken(Legal_refParser.OF, i)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def ALL_CHARS(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.ALL_CHARS)
            else:
                return self.getToken(Legal_refParser.ALL_CHARS, i)

        def IONIKO_SYSTEM(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.IONIKO_SYSTEM)
            else:
                return self.getToken(Legal_refParser.IONIKO_SYSTEM, i)

        def NUM(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.NUM)
            else:
                return self.getToken(Legal_refParser.NUM, i)

        def getRuleIndex(self):
            return Legal_refParser.RULE_explicitCourt

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicitCourt"):
                listener.enterExplicitCourt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicitCourt"):
                listener.exitExplicitCourt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExplicitCourt"):
                return visitor.visitExplicitCourt(self)
            else:
                return visitor.visitChildren(self)




    def explicitCourt(self):

        localctx = Legal_refParser.ExplicitCourtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_explicitCourt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1733
                self.match(Legal_refParser.OF)
                self.state = 1734
                self.match(Legal_refParser.SPACE)
                self.state = 1743 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1740
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Legal_refParser.ALL_CHARS]:
                        self.state = 1735
                        self.match(Legal_refParser.ALL_CHARS)
                        pass
                    elif token in [Legal_refParser.IONIKO_SYSTEM]:
                        self.state = 1736
                        self.match(Legal_refParser.IONIKO_SYSTEM)
                        self.state = 1738
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Legal_refParser.NUM:
                            self.state = 1737
                            self.match(Legal_refParser.NUM)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1742
                    self.match(Legal_refParser.SPACE)
                    self.state = 1745 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Legal_refParser.IONIKO_SYSTEM or _la==Legal_refParser.ALL_CHARS):
                        break



            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Legal_refParser.OF:
                self.state = 1749
                self.match(Legal_refParser.OF)
                self.state = 1750
                self.match(Legal_refParser.SPACE)


            self.state = 1753
            self.dikastirio()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DikastirioContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.DikastirioContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STE(self):
            return self.getToken(Legal_refParser.STE, 0)

        def OLOMELEIA(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.OLOMELEIA)
            else:
                return self.getToken(Legal_refParser.OLOMELEIA, i)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def SUPREME_COURT(self):
            return self.getToken(Legal_refParser.SUPREME_COURT, 0)

        def AED(self):
            return self.getToken(Legal_refParser.AED, 0)

        def MAGISTRATE_COURT_OF_THESSALONIKI(self):
            return self.getToken(Legal_refParser.MAGISTRATE_COURT_OF_THESSALONIKI, 0)

        def MAGISTRATE_COURT_OF_LAMIA(self):
            return self.getToken(Legal_refParser.MAGISTRATE_COURT_OF_LAMIA, 0)

        def MAGISTRATE_COURT_OF_PIRAEUS(self):
            return self.getToken(Legal_refParser.MAGISTRATE_COURT_OF_PIRAEUS, 0)

        def MAGISTRATE_COURT_OF_ATHENS(self):
            return self.getToken(Legal_refParser.MAGISTRATE_COURT_OF_ATHENS, 0)

        def APELLATE_COURT_OF_ATHENS(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_ATHENS, 0)

        def APELLATE_COURT_OF_LAMIA(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_LAMIA, 0)

        def APELLATE_COURT_OF_PIRAEUS(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_PIRAEUS, 0)

        def APELLATE_COURT_OF_THESSALONIKI(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_THESSALONIKI, 0)

        def APELLATE_COURT_OF_CORFU(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_CORFU, 0)

        def APELLATE_COURT_OF_THRAKI(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_THRAKI, 0)

        def APELLATE_COURT_OF_IOANNINA(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_IOANNINA, 0)

        def APELLATE_COURT_OF_DODEKANISA(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_DODEKANISA, 0)

        def APELLATE_COURT_OF_AEGEAN(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_AEGEAN, 0)

        def APELLATE_COURT_OF_CRETE(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_CRETE, 0)

        def APELLATE_COURT_OF_WEST_MACEDONIA(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_WEST_MACEDONIA, 0)

        def APELLATE_COURT_OF_LARISA(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_LARISA, 0)

        def APELLATE_COURT_OF_NAFPLIO(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_NAFPLIO, 0)

        def APELLATE_COURT_OF_PATRAS(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_PATRAS, 0)

        def APELLATE_COURT_OF_WEST_STEREAS(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_WEST_STEREAS, 0)

        def APELLATE_COURT_OF_NORTH_AEGEAN(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_NORTH_AEGEAN, 0)

        def APELLATE_COURT_OF_EAST_CRETE(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_EAST_CRETE, 0)

        def APELLATE_COURT_OF_KALAMATA(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_KALAMATA, 0)

        def APELLATE_COURT_OF_EVOIA(self):
            return self.getToken(Legal_refParser.APELLATE_COURT_OF_EVOIA, 0)

        def FIRST_INSTANCE_COURT_OF_ATHENS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_ATHENS, 0)

        def FIRST_INSTANCE_COURT_OF_LAMIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_LAMIA, 0)

        def FIRST_INSTANCE_COURT_OF_AMFISSA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_AMFISSA, 0)

        def FIRST_INSTANCE_COURT_OF_EVRITANIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_EVRITANIA, 0)

        def FIRST_INSTANCE_COURT_OF_LIVADIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_LIVADIA, 0)

        def FIRST_INSTANCE_COURT_OF_PIRAEUS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_PIRAEUS, 0)

        def FIRST_INSTANCE_COURT_OF_THESSALONIKI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_THESSALONIKI, 0)

        def FIRST_INSTANCE_COURT_OF_VEROIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_VEROIA, 0)

        def FIRST_INSTANCE_COURT_OF_EDESSA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_EDESSA, 0)

        def FIRST_INSTANCE_COURT_OF_KATERINI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KATERINI, 0)

        def FIRST_INSTANCE_COURT_OF_KILKIS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KILKIS, 0)

        def FIRST_INSTANCE_COURT_OF_SERRES(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_SERRES, 0)

        def FIRST_INSTANCE_COURT_OF_XALKIDIKI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_XALKIDIKI, 0)

        def FIRST_INSTANCE_COURT_OF_CORFU(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_CORFU, 0)

        def FIRST_INSTANCE_COURT_OF_GIANNITSA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_GIANNITSA, 0)

        def FIRST_INSTANCE_COURT_OF_THESPRWTIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_THESPRWTIA, 0)

        def FIRST_INSTANCE_COURT_OF_RODOPI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOPI, 0)

        def FIRST_INSTANCE_COURT_OF_DRAMA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_DRAMA, 0)

        def FIRST_INSTANCE_COURT_OF_EVROS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_EVROS, 0)

        def FIRST_INSTANCE_COURT_OF_KAVALA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KAVALA, 0)

        def FIRST_INSTANCE_COURT_OF_XANTHI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_XANTHI, 0)

        def FIRST_INSTANCE_COURT_OF_ORESTIADA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_ORESTIADA, 0)

        def FIRST_INSTANCE_COURT_OF_IOANNINA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_IOANNINA, 0)

        def FIRST_INSTANCE_COURT_OF_ARTA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_ARTA, 0)

        def FIRST_INSTANCE_COURT_OF_PREVEZA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_PREVEZA, 0)

        def FIRST_INSTANCE_COURT_OF_RODOS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOS, 0)

        def FIRST_INSTANCE_COURT_OF_KOS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KOS, 0)

        def FIRST_INSTANCE_COURT_OF_SYROS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_SYROS, 0)

        def FIRST_INSTANCE_COURT_OF_SAMOS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_SAMOS, 0)

        def FIRST_INSTANCE_COURT_OF_NAXOS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_NAXOS, 0)

        def FIRST_INSTANCE_COURT_OF_CHANIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_CHANIA, 0)

        def FIRST_INSTANCE_COURT_OF_RETHYMNO(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_RETHYMNO, 0)

        def FIRST_INSTANCE_COURT_OF_KOZANI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KOZANI, 0)

        def FIRST_INSTANCE_COURT_OF_GREVENA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_GREVENA, 0)

        def FIRST_INSTANCE_COURT_OF_KASTORIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KASTORIA, 0)

        def FIRST_INSTANCE_COURT_OF_FLORINA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_FLORINA, 0)

        def FIRST_INSTANCE_COURT_OF_LARISA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_LARISA, 0)

        def FIRST_INSTANCE_COURT_OF_VOLOS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_VOLOS, 0)

        def FIRST_INSTANCE_COURT_OF_KARDITSA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KARDITSA, 0)

        def FIRST_INSTANCE_COURT_OF_TRIKALA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIKALA, 0)

        def FIRST_INSTANCE_COURT_OF_NAFPLIO(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_NAFPLIO, 0)

        def FIRST_INSTANCE_COURT_OF_CORINTH(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_CORINTH, 0)

        def FIRST_INSTANCE_COURT_OF_SPARTI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_SPARTI, 0)

        def FIRST_INSTANCE_COURT_OF_TRIPOLI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIPOLI, 0)

        def FIRST_INSTANCE_COURT_OF_KALAMATA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAMATA, 0)

        def FIRST_INSTANCE_COURT_OF_KIPARISSIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KIPARISSIA, 0)

        def FIRST_INSTANCE_COURT_OF_GYHTEIO(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_GYHTEIO, 0)

        def FIRST_INSTANCE_COURT_OF_PATRAS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_PATRAS, 0)

        def FIRST_INSTANCE_COURT_OF_AIGIO(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_AIGIO, 0)

        def FIRST_INSTANCE_COURT_OF_KALAVRITA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAVRITA, 0)

        def FIRST_INSTANCE_COURT_OF_HLEIAS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_HLEIAS, 0)

        def FIRST_INSTANCE_COURT_OF_AMALIADA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_AMALIADA, 0)

        def FIRST_INSTANCE_COURT_OF_ZAKINTHOS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_ZAKINTHOS, 0)

        def FIRST_INSTANCE_COURT_OF_KEFALLONIA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_KEFALLONIA, 0)

        def FIRST_INSTANCE_COURT_OF_AGRINIO(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_AGRINIO, 0)

        def FIRST_INSTANCE_COURT_OF_LEFKADA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_LEFKADA, 0)

        def FIRST_INSTANCE_COURT_OF_MESOLOGGI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_MESOLOGGI, 0)

        def FIRST_INSTANCE_COURT_OF_MITILINI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_MITILINI, 0)

        def FIRST_INSTANCE_COURT_OF_CHIOS(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_CHIOS, 0)

        def FIRST_INSTANCE_COURT_OF_HRAKLEIO(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_HRAKLEIO, 0)

        def FIRST_INSTANCE_COURT_OF_LASITHI(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_LASITHI, 0)

        def FIRST_INSTANCE_COURT_OF_THIVA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_THIVA, 0)

        def FIRST_INSTANCE_COURT_OF_CHALKIDA(self):
            return self.getToken(Legal_refParser.FIRST_INSTANCE_COURT_OF_CHALKIDA, 0)

        def COUNTY_COURT_OF_ATHENS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ATHENS, 0)

        def COUNTY_COURT_OF_MAROUSSI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MAROUSSI, 0)

        def COUNTY_COURT_OF_AXARNON(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AXARNON, 0)

        def COUNTY_COURT_OF_ELEFSINA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ELEFSINA, 0)

        def COUNTY_COURT_OF_KALLITHEA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KALLITHEA, 0)

        def COUNTY_COURT_OF_KROPIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KROPIA, 0)

        def COUNTY_COURT_OF_LAVRIO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LAVRIO, 0)

        def COUNTY_COURT_OF_NEAS_IONIAS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NEAS_IONIAS, 0)

        def COUNTY_COURT_OF_NEA_LIOSIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NEA_LIOSIA, 0)

        def COUNTY_COURT_OF_MARATHONA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MARATHONA, 0)

        def COUNTY_COURT_OF_MEGARA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MEGARA, 0)

        def COUNTY_COURT_OF_PERISTERI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PERISTERI, 0)

        def COUNTY_COURT_OF_CHALANDRI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_CHALANDRI, 0)

        def COUNTY_COURT_OF_LAMIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LAMIA, 0)

        def COUNTY_COURT_OF_ATALANTI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ATALANTI, 0)

        def COUNTY_COURT_OF_AMFISSA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AMFISSA, 0)

        def COUNTY_COURT_OF_EVRITANIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_EVRITANIA, 0)

        def COUNTY_COURT_OF_LIVADIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LIVADIA, 0)

        def COUNTY_COURT_OF_AIGINA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AIGINA, 0)

        def COUNTY_COURT_OF_KALAVRIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KALAVRIA, 0)

        def COUNTY_COURT_OF_KITHIRA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KITHIRA, 0)

        def COUNTY_COURT_OF_NIKAIAS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NIKAIAS, 0)

        def COUNTY_COURT_OF_SALAMINA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SALAMINA, 0)

        def COUNTY_COURT_OF_SPETSES(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SPETSES, 0)

        def COUNTY_COURT_OF_THESSALONIKI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_THESSALONIKI, 0)

        def COUNTY_COURT_OF_PIRAEUS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PIRAEUS, 0)

        def COUNTY_COURT_OF_VASILIKON(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_VASILIKON, 0)

        def COUNTY_COURT_OF_KOUFALION(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KOUFALION, 0)

        def COUNTY_COURT_OF_LAGKADA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LAGKADA, 0)

        def COUNTY_COURT_OF_ALEXANDRIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ALEXANDRIA, 0)

        def COUNTY_COURT_OF_NAOUSA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NAOUSA, 0)

        def COUNTY_COURT_OF_EDESSA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_EDESSA, 0)

        def COUNTY_COURT_OF_ALMOPIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ALMOPIA, 0)

        def COUNTY_COURT_OF_SKYDRA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SKYDRA, 0)

        def COUNTY_COURT_OF_PIERIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PIERIA, 0)

        def COUNTY_COURT_OF_KOLINDROU(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KOLINDROU, 0)

        def COUNTY_COURT_OF_POLIKASTRO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_POLIKASTRO, 0)

        def COUNTY_COURT_OF_SERRES(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SERRES, 0)

        def COUNTY_COURT_OF_NIGRITA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NIGRITA, 0)

        def COUNTY_COURT_OF_RODOLIVON(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_RODOLIVON, 0)

        def COUNTY_COURT_OF_SINTIKIS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SINTIKIS, 0)

        def COUNTY_COURT_OF_POLIGIROU(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_POLIGIROU, 0)

        def COUNTY_COURT_OF_ARNAIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ARNAIA, 0)

        def COUNTY_COURT_OF_KASSANDRA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KASSANDRA, 0)

        def COUNTY_COURT_OF_NEA_MOUDANIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NEA_MOUDANIA, 0)

        def COUNTY_COURT_OF_CORFU(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_CORFU, 0)

        def COUNTY_COURT_OF_IGOUMENITSA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_IGOUMENITSA, 0)

        def COUNTY_COURT_OF_KOMOTINI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KOMOTINI, 0)

        def COUNTY_COURT_OF_DRAMA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_DRAMA, 0)

        def COUNTY_COURT_OF_THASOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_THASOS, 0)

        def COUNTY_COURT_OF_PAGGAIOU(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PAGGAIOU, 0)

        def COUNTY_COURT_OF_ORESTIADA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ORESTIADA, 0)

        def COUNTY_COURT_OF_ALEXANDROUPOLI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ALEXANDROUPOLI, 0)

        def COUNTY_COURT_OF_KAVALA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KAVALA, 0)

        def COUNTY_COURT_OF_DIDIMOTEIXO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_DIDIMOTEIXO, 0)

        def COUNTY_COURT_OF_IOANNINA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_IOANNINA, 0)

        def COUNTY_COURT_OF_KONITSA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KONITSA, 0)

        def COUNTY_COURT_OF_ARTA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ARTA, 0)

        def COUNTY_COURT_OF_PREVEZA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PREVEZA, 0)

        def COUNTY_COURT_OF_RODOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_RODOS, 0)

        def COUNTY_COURT_OF_KARPATHOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KARPATHOS, 0)

        def COUNTY_COURT_OF_KALIMNOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KALIMNOS, 0)

        def COUNTY_COURT_OF_KOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KOS, 0)

        def COUNTY_COURT_OF_LEROS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LEROS, 0)

        def COUNTY_COURT_OF_ANDROS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ANDROS, 0)

        def COUNTY_COURT_OF_ERMOUPOLI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ERMOUPOLI, 0)

        def COUNTY_COURT_OF_MILOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MILOS, 0)

        def COUNTY_COURT_OF_MYKONOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MYKONOS, 0)

        def COUNTY_COURT_OF_PAROS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PAROS, 0)

        def COUNTY_COURT_OF_TINOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_TINOS, 0)

        def COUNTY_COURT_OF_SAMOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SAMOS, 0)

        def COUNTY_COURT_OF_IKARIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_IKARIA, 0)

        def COUNTY_COURT_OF_KARLOVASI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KARLOVASI, 0)

        def COUNTY_COURT_OF_NAXOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NAXOS, 0)

        def COUNTY_COURT_OF_CHANIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_CHANIA, 0)

        def COUNTY_COURT_OF_VAMOU(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_VAMOU, 0)

        def COUNTY_COURT_OF_RETHYMNO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_RETHYMNO, 0)

        def COUNTY_COURT_OF_KOZANI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KOZANI, 0)

        def COUNTY_COURT_OF_EORDAIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_EORDAIA, 0)

        def COUNTY_COURT_OF_GREVENA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_GREVENA, 0)

        def COUNTY_COURT_OF_KASTORIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KASTORIA, 0)

        def COUNTY_COURT_OF_FLORINA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_FLORINA, 0)

        def COUNTY_COURT_OF_AMUNTAIO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AMUNTAIO, 0)

        def COUNTY_COURT_OF_LARISA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LARISA, 0)

        def COUNTY_COURT_OF_ELASSONAS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ELASSONAS, 0)

        def COUNTY_COURT_OF_FARSALA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_FARSALA, 0)

        def COUNTY_COURT_OF_VOLOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_VOLOS, 0)

        def COUNTY_COURT_OF_ALMIROS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ALMIROS, 0)

        def COUNTY_COURT_OF_SKOPELOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SKOPELOS, 0)

        def COUNTY_COURT_OF_KARDITSA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KARDITSA, 0)

        def COUNTY_COURT_OF_TRIKALA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_TRIKALA, 0)

        def COUNTY_COURT_OF_KALAMPAKA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KALAMPAKA, 0)

        def COUNTY_COURT_OF_NAFPLIO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NAFPLIO, 0)

        def COUNTY_COURT_OF_ASTROS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ASTROS, 0)

        def COUNTY_COURT_OF_ARGOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ARGOS, 0)

        def COUNTY_COURT_OF_MASSITOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MASSITOS, 0)

        def COUNTY_COURT_OF_THIRA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_THIRA, 0)

        def COUNTY_COURT_OF_CORINTH(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_CORINTH, 0)

        def COUNTY_COURT_OF_SIKIONOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SIKIONOS, 0)

        def COUNTY_COURT_OF_NEMEA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NEMEA, 0)

        def COUNTY_COURT_OF_XYLOKASTRO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_XYLOKASTRO, 0)

        def COUNTY_COURT_OF_SPARTI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SPARTI, 0)

        def COUNTY_COURT_OF_EPIDAVROS_LIMIRAS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_EPIDAVROS_LIMIRAS, 0)

        def COUNTY_COURT_OF_TRIPOLI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_TRIPOLI, 0)

        def COUNTY_COURT_OF_MEGALOPOLI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MEGALOPOLI, 0)

        def COUNTY_COURT_OF_PSOFIDA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PSOFIDA, 0)

        def COUNTY_COURT_OF_KALAMATA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KALAMATA, 0)

        def COUNTY_COURT_OF_PILOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PILOS, 0)

        def COUNTY_COURT_OF_KIPARISSIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KIPARISSIA, 0)

        def COUNTY_COURT_OF_PLATAMODA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PLATAMODA, 0)

        def COUNTY_COURT_OF_GYTHEIO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_GYTHEIO, 0)

        def COUNTY_COURT_OF_NEAPOLI_VOIWN(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NEAPOLI_VOIWN, 0)

        def COUNTY_COURT_OF_PATRAS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PATRAS, 0)

        def COUNTY_COURT_OF_DIMI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_DIMI, 0)

        def COUNTY_COURT_OF_AIGIALIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AIGIALIA, 0)

        def COUNTY_COURT_OF_KALAVRITA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KALAVRITA, 0)

        def COUNTY_COURT_OF_AKRATA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AKRATA, 0)

        def COUNTY_COURT_OF_PIRGOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_PIRGOS, 0)

        def COUNTY_COURT_OF_OLYMPIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_OLYMPIA, 0)

        def COUNTY_COURT_OF_ARINI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ARINI, 0)

        def COUNTY_COURT_OF_AMALIADA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AMALIADA, 0)

        def COUNTY_COURT_OF_GASTOUNI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_GASTOUNI, 0)

        def COUNTY_COURT_OF_MYRTOUNTION(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MYRTOUNTION, 0)

        def COUNTY_COURT_OF_ZAKINTHOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ZAKINTHOS, 0)

        def COUNTY_COURT_OF_ARGOSTOLI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ARGOSTOLI, 0)

        def COUNTY_COURT_OF_SAMEON(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SAMEON, 0)

        def COUNTY_COURT_OF_AGRINIO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_AGRINIO, 0)

        def COUNTY_COURT_OF_VALTOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_VALTOS, 0)

        def COUNTY_COURT_OF_LEFKADA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LEFKADA, 0)

        def COUNTY_COURT_OF_VONITSA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_VONITSA, 0)

        def COUNTY_COURT_OF_MESOLOGGI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MESOLOGGI, 0)

        def COUNTY_COURT_OF_NAFPAKTOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_NAFPAKTOS, 0)

        def COUNTY_COURT_OF_MITILINI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_MITILINI, 0)

        def COUNTY_COURT_OF_KALLONI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KALLONI, 0)

        def COUNTY_COURT_OF_CHIOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_CHIOS, 0)

        def COUNTY_COURT_OF_HRAKLEIO(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_HRAKLEIO, 0)

        def COUNTY_COURT_OF_KASTELI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KASTELI, 0)

        def COUNTY_COURT_OF_LASITHI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_LASITHI, 0)

        def COUNTY_COURT_OF_IERAPETRA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_IERAPETRA, 0)

        def COUNTY_COURT_OF_SITEIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_SITEIA, 0)

        def COUNTY_COURT_OF_THIVA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_THIVA, 0)

        def COUNTY_COURT_OF_CHALKIDA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_CHALKIDA, 0)

        def COUNTY_COURT_OF_ISTIAIA(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_ISTIAIA, 0)

        def COUNTY_COURT_OF_KARYSTOS(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KARYSTOS, 0)

        def COUNTY_COURT_OF_KIMI(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_KIMI, 0)

        def COUNTY_COURT_OF_TAMINEON(self):
            return self.getToken(Legal_refParser.COUNTY_COURT_OF_TAMINEON, 0)

        def DISTRICT_COURT_OF_ATHENS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_ATHENS, 0)

        def DISTRICT_COURT_OF_LAMIA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_LAMIA, 0)

        def DISTRICT_COURT_OF_LIVADIA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_LIVADIA, 0)

        def DISTRICT_COURT_OF_PIRAEUS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_PIRAEUS, 0)

        def DISTRICT_COURT_OF_THESSALONIKI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_THESSALONIKI, 0)

        def DISTRICT_COURT_OF_VEROIA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_VEROIA, 0)

        def DISTRICT_COURT_OF_PIERIA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_PIERIA, 0)

        def DISTRICT_COURT_OF_SERRES(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_SERRES, 0)

        def DISTRICT_COURT_OF_CORFU(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_CORFU, 0)

        def DISTRICT_COURT_OF_KOMOTINI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_KOMOTINI, 0)

        def DISTRICT_COURT_OF_KAVALA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_KAVALA, 0)

        def DISTRICT_COURT_OF_DRAMA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_DRAMA, 0)

        def DISTRICT_COURT_OF_ARTA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_ARTA, 0)

        def DISTRICT_COURT_OF_RODOS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_RODOS, 0)

        def DISTRICT_COURT_OF_CHANIA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_CHANIA, 0)

        def DISTRICT_COURT_OF_RETHYMNO(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_RETHYMNO, 0)

        def DISTRICT_COURT_OF_KOZANI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_KOZANI, 0)

        def DISTRICT_COURT_OF_KLEISOURA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_KLEISOURA, 0)

        def DISTRICT_COURT_OF_LARISA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_LARISA, 0)

        def DISTRICT_COURT_OF_ELASSONAS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_ELASSONAS, 0)

        def DISTRICT_COURT_OF_VOLOS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_VOLOS, 0)

        def DISTRICT_COURT_OF_KARDITSA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_KARDITSA, 0)

        def DISTRICT_COURT_OF_TRIKALA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_TRIKALA, 0)

        def DISTRICT_COURT_OF_NAFPLIO(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_NAFPLIO, 0)

        def DISTRICT_COURT_OF_ARGOS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_ARGOS, 0)

        def DISTRICT_COURT_OF_CORINTH(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_CORINTH, 0)

        def DISTRICT_COURT_OF_SIKIONOS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_SIKIONOS, 0)

        def DISTRICT_COURT_OF_SPARTI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_SPARTI, 0)

        def DISTRICT_COURT_OF_TRIPOLI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_TRIPOLI, 0)

        def DISTRICT_COURT_OF_KALAMATA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_KALAMATA, 0)

        def DISTRICT_COURT_OF_PATRAS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_PATRAS, 0)

        def DISTRICT_COURT_OF_AIGIALIA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_AIGIALIA, 0)

        def DISTRICT_COURT_OF_PIRGOS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_PIRGOS, 0)

        def DISTRICT_COURT_OF_AMALIADA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_AMALIADA, 0)

        def DISTRICT_COURT_OF_AGRINIO(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_AGRINIO, 0)

        def DISTRICT_COURT_OF_VALTOS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_VALTOS, 0)

        def DISTRICT_COURT_OF_MESOLOGGI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_MESOLOGGI, 0)

        def DISTRICT_COURT_OF_MITILINI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_MITILINI, 0)

        def DISTRICT_COURT_OF_LIMNOS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_LIMNOS, 0)

        def DISTRICT_COURT_OF_PLOMARI(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_PLOMARI, 0)

        def DISTRICT_COURT_OF_HRAKLEIO(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_HRAKLEIO, 0)

        def DISTRICT_COURT_OF_MOIRES(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_MOIRES, 0)

        def DISTRICT_COURT_OF_PIRGOS_KRITIS(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_PIRGOS_KRITIS, 0)

        def DISTRICT_COURT_OF_THIVA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_THIVA, 0)

        def DISTRICT_COURT_OF_CHALKIDA(self):
            return self.getToken(Legal_refParser.DISTRICT_COURT_OF_CHALKIDA, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_dikastirio

        def enterRule(self, listener):
            if hasattr(listener, "enterDikastirio"):
                listener.enterDikastirio(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDikastirio"):
                listener.exitDikastirio(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDikastirio"):
                return visitor.visitDikastirio(self)
            else:
                return visitor.visitChildren(self)




    def dikastirio(self):

        localctx = Legal_refParser.DikastirioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dikastirio)
        self._la = 0 # Token type
        try:
            self.state = 2045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Legal_refParser.OLOMELEIA, Legal_refParser.STE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Legal_refParser.OLOMELEIA:
                    self.state = 1755
                    self.match(Legal_refParser.OLOMELEIA)
                    self.state = 1756
                    self.match(Legal_refParser.SPACE)


                self.state = 1759
                self.match(Legal_refParser.STE)
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1760
                    self.match(Legal_refParser.SPACE)


                self.state = 1764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1763
                    self.match(Legal_refParser.OLOMELEIA)


                pass
            elif token in [Legal_refParser.SUPREME_COURT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1766
                self.match(Legal_refParser.SUPREME_COURT)
                pass
            elif token in [Legal_refParser.AED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1767
                self.match(Legal_refParser.AED)
                pass
            elif token in [Legal_refParser.MAGISTRATE_COURT_OF_THESSALONIKI]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1768
                self.match(Legal_refParser.MAGISTRATE_COURT_OF_THESSALONIKI)
                pass
            elif token in [Legal_refParser.MAGISTRATE_COURT_OF_LAMIA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1769
                self.match(Legal_refParser.MAGISTRATE_COURT_OF_LAMIA)
                pass
            elif token in [Legal_refParser.MAGISTRATE_COURT_OF_PIRAEUS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1770
                self.match(Legal_refParser.MAGISTRATE_COURT_OF_PIRAEUS)
                pass
            elif token in [Legal_refParser.MAGISTRATE_COURT_OF_ATHENS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1771
                self.match(Legal_refParser.MAGISTRATE_COURT_OF_ATHENS)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_ATHENS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1772
                self.match(Legal_refParser.APELLATE_COURT_OF_ATHENS)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_LAMIA]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1773
                self.match(Legal_refParser.APELLATE_COURT_OF_LAMIA)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_PIRAEUS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1774
                self.match(Legal_refParser.APELLATE_COURT_OF_PIRAEUS)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_THESSALONIKI]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1775
                self.match(Legal_refParser.APELLATE_COURT_OF_THESSALONIKI)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_CORFU]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1776
                self.match(Legal_refParser.APELLATE_COURT_OF_CORFU)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_THRAKI]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1777
                self.match(Legal_refParser.APELLATE_COURT_OF_THRAKI)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_IOANNINA]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1778
                self.match(Legal_refParser.APELLATE_COURT_OF_IOANNINA)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_DODEKANISA]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1779
                self.match(Legal_refParser.APELLATE_COURT_OF_DODEKANISA)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_AEGEAN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1780
                self.match(Legal_refParser.APELLATE_COURT_OF_AEGEAN)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_CRETE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1781
                self.match(Legal_refParser.APELLATE_COURT_OF_CRETE)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_WEST_MACEDONIA]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1782
                self.match(Legal_refParser.APELLATE_COURT_OF_WEST_MACEDONIA)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_LARISA]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1783
                self.match(Legal_refParser.APELLATE_COURT_OF_LARISA)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_NAFPLIO]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1784
                self.match(Legal_refParser.APELLATE_COURT_OF_NAFPLIO)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_PATRAS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1785
                self.match(Legal_refParser.APELLATE_COURT_OF_PATRAS)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_WEST_STEREAS]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1786
                self.match(Legal_refParser.APELLATE_COURT_OF_WEST_STEREAS)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_NORTH_AEGEAN]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1787
                self.match(Legal_refParser.APELLATE_COURT_OF_NORTH_AEGEAN)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_EAST_CRETE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1788
                self.match(Legal_refParser.APELLATE_COURT_OF_EAST_CRETE)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_KALAMATA]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1789
                self.match(Legal_refParser.APELLATE_COURT_OF_KALAMATA)
                pass
            elif token in [Legal_refParser.APELLATE_COURT_OF_EVOIA]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1790
                self.match(Legal_refParser.APELLATE_COURT_OF_EVOIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_ATHENS]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1791
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_ATHENS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_LAMIA]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1792
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_LAMIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_AMFISSA]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1793
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_AMFISSA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_EVRITANIA]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1794
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_EVRITANIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_LIVADIA]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1795
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_LIVADIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_PIRAEUS]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1796
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_PIRAEUS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_THESSALONIKI]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1797
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_THESSALONIKI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_VEROIA]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1798
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_VEROIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_EDESSA]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1799
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_EDESSA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KATERINI]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1800
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KATERINI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KILKIS]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1801
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KILKIS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_SERRES]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1802
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_SERRES)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_XALKIDIKI]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1803
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_XALKIDIKI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_CORFU]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1804
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_CORFU)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_GIANNITSA]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1805
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_GIANNITSA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_THESPRWTIA]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1806
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_THESPRWTIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOPI]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1807
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOPI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_DRAMA]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1808
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_DRAMA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_EVROS]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1809
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_EVROS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KAVALA]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1810
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KAVALA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_XANTHI]:
                self.enterOuterAlt(localctx, 47)
                self.state = 1811
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_XANTHI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_ORESTIADA]:
                self.enterOuterAlt(localctx, 48)
                self.state = 1812
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_ORESTIADA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_IOANNINA]:
                self.enterOuterAlt(localctx, 49)
                self.state = 1813
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_IOANNINA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_ARTA]:
                self.enterOuterAlt(localctx, 50)
                self.state = 1814
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_ARTA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_PREVEZA]:
                self.enterOuterAlt(localctx, 51)
                self.state = 1815
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_PREVEZA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOS]:
                self.enterOuterAlt(localctx, 52)
                self.state = 1816
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_RODOS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KOS]:
                self.enterOuterAlt(localctx, 53)
                self.state = 1817
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KOS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_SYROS]:
                self.enterOuterAlt(localctx, 54)
                self.state = 1818
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_SYROS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_SAMOS]:
                self.enterOuterAlt(localctx, 55)
                self.state = 1819
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_SAMOS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_NAXOS]:
                self.enterOuterAlt(localctx, 56)
                self.state = 1820
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_NAXOS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_CHANIA]:
                self.enterOuterAlt(localctx, 57)
                self.state = 1821
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_CHANIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_RETHYMNO]:
                self.enterOuterAlt(localctx, 58)
                self.state = 1822
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_RETHYMNO)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KOZANI]:
                self.enterOuterAlt(localctx, 59)
                self.state = 1823
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KOZANI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_GREVENA]:
                self.enterOuterAlt(localctx, 60)
                self.state = 1824
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_GREVENA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KASTORIA]:
                self.enterOuterAlt(localctx, 61)
                self.state = 1825
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KASTORIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_FLORINA]:
                self.enterOuterAlt(localctx, 62)
                self.state = 1826
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_FLORINA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_LARISA]:
                self.enterOuterAlt(localctx, 63)
                self.state = 1827
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_LARISA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_VOLOS]:
                self.enterOuterAlt(localctx, 64)
                self.state = 1828
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_VOLOS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KARDITSA]:
                self.enterOuterAlt(localctx, 65)
                self.state = 1829
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KARDITSA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIKALA]:
                self.enterOuterAlt(localctx, 66)
                self.state = 1830
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIKALA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_NAFPLIO]:
                self.enterOuterAlt(localctx, 67)
                self.state = 1831
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_NAFPLIO)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_CORINTH]:
                self.enterOuterAlt(localctx, 68)
                self.state = 1832
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_CORINTH)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_SPARTI]:
                self.enterOuterAlt(localctx, 69)
                self.state = 1833
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_SPARTI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIPOLI]:
                self.enterOuterAlt(localctx, 70)
                self.state = 1834
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_TRIPOLI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAMATA]:
                self.enterOuterAlt(localctx, 71)
                self.state = 1835
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAMATA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KIPARISSIA]:
                self.enterOuterAlt(localctx, 72)
                self.state = 1836
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KIPARISSIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_GYHTEIO]:
                self.enterOuterAlt(localctx, 73)
                self.state = 1837
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_GYHTEIO)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_PATRAS]:
                self.enterOuterAlt(localctx, 74)
                self.state = 1838
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_PATRAS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_AIGIO]:
                self.enterOuterAlt(localctx, 75)
                self.state = 1839
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_AIGIO)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAVRITA]:
                self.enterOuterAlt(localctx, 76)
                self.state = 1840
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KALAVRITA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_HLEIAS]:
                self.enterOuterAlt(localctx, 77)
                self.state = 1841
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_HLEIAS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_AMALIADA]:
                self.enterOuterAlt(localctx, 78)
                self.state = 1842
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_AMALIADA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_ZAKINTHOS]:
                self.enterOuterAlt(localctx, 79)
                self.state = 1843
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_ZAKINTHOS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_KEFALLONIA]:
                self.enterOuterAlt(localctx, 80)
                self.state = 1844
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_KEFALLONIA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_AGRINIO]:
                self.enterOuterAlt(localctx, 81)
                self.state = 1845
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_AGRINIO)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_LEFKADA]:
                self.enterOuterAlt(localctx, 82)
                self.state = 1846
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_LEFKADA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_MESOLOGGI]:
                self.enterOuterAlt(localctx, 83)
                self.state = 1847
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_MESOLOGGI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_MITILINI]:
                self.enterOuterAlt(localctx, 84)
                self.state = 1848
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_MITILINI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_CHIOS]:
                self.enterOuterAlt(localctx, 85)
                self.state = 1849
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_CHIOS)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_HRAKLEIO]:
                self.enterOuterAlt(localctx, 86)
                self.state = 1850
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_HRAKLEIO)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_LASITHI]:
                self.enterOuterAlt(localctx, 87)
                self.state = 1851
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_LASITHI)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_THIVA]:
                self.enterOuterAlt(localctx, 88)
                self.state = 1852
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_THIVA)
                pass
            elif token in [Legal_refParser.FIRST_INSTANCE_COURT_OF_CHALKIDA]:
                self.enterOuterAlt(localctx, 89)
                self.state = 1853
                self.match(Legal_refParser.FIRST_INSTANCE_COURT_OF_CHALKIDA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ATHENS]:
                self.enterOuterAlt(localctx, 90)
                self.state = 1854
                self.match(Legal_refParser.COUNTY_COURT_OF_ATHENS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MAROUSSI]:
                self.enterOuterAlt(localctx, 91)
                self.state = 1855
                self.match(Legal_refParser.COUNTY_COURT_OF_MAROUSSI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AXARNON]:
                self.enterOuterAlt(localctx, 92)
                self.state = 1856
                self.match(Legal_refParser.COUNTY_COURT_OF_AXARNON)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ELEFSINA]:
                self.enterOuterAlt(localctx, 93)
                self.state = 1857
                self.match(Legal_refParser.COUNTY_COURT_OF_ELEFSINA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KALLITHEA]:
                self.enterOuterAlt(localctx, 94)
                self.state = 1858
                self.match(Legal_refParser.COUNTY_COURT_OF_KALLITHEA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KROPIA]:
                self.enterOuterAlt(localctx, 95)
                self.state = 1859
                self.match(Legal_refParser.COUNTY_COURT_OF_KROPIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LAVRIO]:
                self.enterOuterAlt(localctx, 96)
                self.state = 1860
                self.match(Legal_refParser.COUNTY_COURT_OF_LAVRIO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NEAS_IONIAS]:
                self.enterOuterAlt(localctx, 97)
                self.state = 1861
                self.match(Legal_refParser.COUNTY_COURT_OF_NEAS_IONIAS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NEA_LIOSIA]:
                self.enterOuterAlt(localctx, 98)
                self.state = 1862
                self.match(Legal_refParser.COUNTY_COURT_OF_NEA_LIOSIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MARATHONA]:
                self.enterOuterAlt(localctx, 99)
                self.state = 1863
                self.match(Legal_refParser.COUNTY_COURT_OF_MARATHONA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MEGARA]:
                self.enterOuterAlt(localctx, 100)
                self.state = 1864
                self.match(Legal_refParser.COUNTY_COURT_OF_MEGARA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PERISTERI]:
                self.enterOuterAlt(localctx, 101)
                self.state = 1865
                self.match(Legal_refParser.COUNTY_COURT_OF_PERISTERI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_CHALANDRI]:
                self.enterOuterAlt(localctx, 102)
                self.state = 1866
                self.match(Legal_refParser.COUNTY_COURT_OF_CHALANDRI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LAMIA]:
                self.enterOuterAlt(localctx, 103)
                self.state = 1867
                self.match(Legal_refParser.COUNTY_COURT_OF_LAMIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ATALANTI]:
                self.enterOuterAlt(localctx, 104)
                self.state = 1868
                self.match(Legal_refParser.COUNTY_COURT_OF_ATALANTI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AMFISSA]:
                self.enterOuterAlt(localctx, 105)
                self.state = 1869
                self.match(Legal_refParser.COUNTY_COURT_OF_AMFISSA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_EVRITANIA]:
                self.enterOuterAlt(localctx, 106)
                self.state = 1870
                self.match(Legal_refParser.COUNTY_COURT_OF_EVRITANIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LIVADIA]:
                self.enterOuterAlt(localctx, 107)
                self.state = 1871
                self.match(Legal_refParser.COUNTY_COURT_OF_LIVADIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AIGINA]:
                self.enterOuterAlt(localctx, 108)
                self.state = 1872
                self.match(Legal_refParser.COUNTY_COURT_OF_AIGINA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KALAVRIA]:
                self.enterOuterAlt(localctx, 109)
                self.state = 1873
                self.match(Legal_refParser.COUNTY_COURT_OF_KALAVRIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KITHIRA]:
                self.enterOuterAlt(localctx, 110)
                self.state = 1874
                self.match(Legal_refParser.COUNTY_COURT_OF_KITHIRA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NIKAIAS]:
                self.enterOuterAlt(localctx, 111)
                self.state = 1875
                self.match(Legal_refParser.COUNTY_COURT_OF_NIKAIAS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SALAMINA]:
                self.enterOuterAlt(localctx, 112)
                self.state = 1876
                self.match(Legal_refParser.COUNTY_COURT_OF_SALAMINA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SPETSES]:
                self.enterOuterAlt(localctx, 113)
                self.state = 1877
                self.match(Legal_refParser.COUNTY_COURT_OF_SPETSES)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_THESSALONIKI]:
                self.enterOuterAlt(localctx, 114)
                self.state = 1878
                self.match(Legal_refParser.COUNTY_COURT_OF_THESSALONIKI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PIRAEUS]:
                self.enterOuterAlt(localctx, 115)
                self.state = 1879
                self.match(Legal_refParser.COUNTY_COURT_OF_PIRAEUS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_VASILIKON]:
                self.enterOuterAlt(localctx, 116)
                self.state = 1880
                self.match(Legal_refParser.COUNTY_COURT_OF_VASILIKON)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KOUFALION]:
                self.enterOuterAlt(localctx, 117)
                self.state = 1881
                self.match(Legal_refParser.COUNTY_COURT_OF_KOUFALION)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LAGKADA]:
                self.enterOuterAlt(localctx, 118)
                self.state = 1882
                self.match(Legal_refParser.COUNTY_COURT_OF_LAGKADA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ALEXANDRIA]:
                self.enterOuterAlt(localctx, 119)
                self.state = 1883
                self.match(Legal_refParser.COUNTY_COURT_OF_ALEXANDRIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NAOUSA]:
                self.enterOuterAlt(localctx, 120)
                self.state = 1884
                self.match(Legal_refParser.COUNTY_COURT_OF_NAOUSA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_EDESSA]:
                self.enterOuterAlt(localctx, 121)
                self.state = 1885
                self.match(Legal_refParser.COUNTY_COURT_OF_EDESSA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ALMOPIA]:
                self.enterOuterAlt(localctx, 122)
                self.state = 1886
                self.match(Legal_refParser.COUNTY_COURT_OF_ALMOPIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SKYDRA]:
                self.enterOuterAlt(localctx, 123)
                self.state = 1887
                self.match(Legal_refParser.COUNTY_COURT_OF_SKYDRA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PIERIA]:
                self.enterOuterAlt(localctx, 124)
                self.state = 1888
                self.match(Legal_refParser.COUNTY_COURT_OF_PIERIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KOLINDROU]:
                self.enterOuterAlt(localctx, 125)
                self.state = 1889
                self.match(Legal_refParser.COUNTY_COURT_OF_KOLINDROU)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_POLIKASTRO]:
                self.enterOuterAlt(localctx, 126)
                self.state = 1890
                self.match(Legal_refParser.COUNTY_COURT_OF_POLIKASTRO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SERRES]:
                self.enterOuterAlt(localctx, 127)
                self.state = 1891
                self.match(Legal_refParser.COUNTY_COURT_OF_SERRES)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NIGRITA]:
                self.enterOuterAlt(localctx, 128)
                self.state = 1892
                self.match(Legal_refParser.COUNTY_COURT_OF_NIGRITA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_RODOLIVON]:
                self.enterOuterAlt(localctx, 129)
                self.state = 1893
                self.match(Legal_refParser.COUNTY_COURT_OF_RODOLIVON)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SINTIKIS]:
                self.enterOuterAlt(localctx, 130)
                self.state = 1894
                self.match(Legal_refParser.COUNTY_COURT_OF_SINTIKIS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_POLIGIROU]:
                self.enterOuterAlt(localctx, 131)
                self.state = 1895
                self.match(Legal_refParser.COUNTY_COURT_OF_POLIGIROU)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ARNAIA]:
                self.enterOuterAlt(localctx, 132)
                self.state = 1896
                self.match(Legal_refParser.COUNTY_COURT_OF_ARNAIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KASSANDRA]:
                self.enterOuterAlt(localctx, 133)
                self.state = 1897
                self.match(Legal_refParser.COUNTY_COURT_OF_KASSANDRA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NEA_MOUDANIA]:
                self.enterOuterAlt(localctx, 134)
                self.state = 1898
                self.match(Legal_refParser.COUNTY_COURT_OF_NEA_MOUDANIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_CORFU]:
                self.enterOuterAlt(localctx, 135)
                self.state = 1899
                self.match(Legal_refParser.COUNTY_COURT_OF_CORFU)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_IGOUMENITSA]:
                self.enterOuterAlt(localctx, 136)
                self.state = 1900
                self.match(Legal_refParser.COUNTY_COURT_OF_IGOUMENITSA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KOMOTINI]:
                self.enterOuterAlt(localctx, 137)
                self.state = 1901
                self.match(Legal_refParser.COUNTY_COURT_OF_KOMOTINI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_DRAMA]:
                self.enterOuterAlt(localctx, 138)
                self.state = 1902
                self.match(Legal_refParser.COUNTY_COURT_OF_DRAMA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_THASOS]:
                self.enterOuterAlt(localctx, 139)
                self.state = 1903
                self.match(Legal_refParser.COUNTY_COURT_OF_THASOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PAGGAIOU]:
                self.enterOuterAlt(localctx, 140)
                self.state = 1904
                self.match(Legal_refParser.COUNTY_COURT_OF_PAGGAIOU)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ORESTIADA]:
                self.enterOuterAlt(localctx, 141)
                self.state = 1905
                self.match(Legal_refParser.COUNTY_COURT_OF_ORESTIADA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ALEXANDROUPOLI]:
                self.enterOuterAlt(localctx, 142)
                self.state = 1906
                self.match(Legal_refParser.COUNTY_COURT_OF_ALEXANDROUPOLI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KAVALA]:
                self.enterOuterAlt(localctx, 143)
                self.state = 1907
                self.match(Legal_refParser.COUNTY_COURT_OF_KAVALA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_DIDIMOTEIXO]:
                self.enterOuterAlt(localctx, 144)
                self.state = 1908
                self.match(Legal_refParser.COUNTY_COURT_OF_DIDIMOTEIXO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_IOANNINA]:
                self.enterOuterAlt(localctx, 145)
                self.state = 1909
                self.match(Legal_refParser.COUNTY_COURT_OF_IOANNINA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KONITSA]:
                self.enterOuterAlt(localctx, 146)
                self.state = 1910
                self.match(Legal_refParser.COUNTY_COURT_OF_KONITSA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ARTA]:
                self.enterOuterAlt(localctx, 147)
                self.state = 1911
                self.match(Legal_refParser.COUNTY_COURT_OF_ARTA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PREVEZA]:
                self.enterOuterAlt(localctx, 148)
                self.state = 1912
                self.match(Legal_refParser.COUNTY_COURT_OF_PREVEZA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_RODOS]:
                self.enterOuterAlt(localctx, 149)
                self.state = 1913
                self.match(Legal_refParser.COUNTY_COURT_OF_RODOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KARPATHOS]:
                self.enterOuterAlt(localctx, 150)
                self.state = 1914
                self.match(Legal_refParser.COUNTY_COURT_OF_KARPATHOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KALIMNOS]:
                self.enterOuterAlt(localctx, 151)
                self.state = 1915
                self.match(Legal_refParser.COUNTY_COURT_OF_KALIMNOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KOS]:
                self.enterOuterAlt(localctx, 152)
                self.state = 1916
                self.match(Legal_refParser.COUNTY_COURT_OF_KOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LEROS]:
                self.enterOuterAlt(localctx, 153)
                self.state = 1917
                self.match(Legal_refParser.COUNTY_COURT_OF_LEROS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ANDROS]:
                self.enterOuterAlt(localctx, 154)
                self.state = 1918
                self.match(Legal_refParser.COUNTY_COURT_OF_ANDROS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ERMOUPOLI]:
                self.enterOuterAlt(localctx, 155)
                self.state = 1919
                self.match(Legal_refParser.COUNTY_COURT_OF_ERMOUPOLI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MILOS]:
                self.enterOuterAlt(localctx, 156)
                self.state = 1920
                self.match(Legal_refParser.COUNTY_COURT_OF_MILOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MYKONOS]:
                self.enterOuterAlt(localctx, 157)
                self.state = 1921
                self.match(Legal_refParser.COUNTY_COURT_OF_MYKONOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PAROS]:
                self.enterOuterAlt(localctx, 158)
                self.state = 1922
                self.match(Legal_refParser.COUNTY_COURT_OF_PAROS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_TINOS]:
                self.enterOuterAlt(localctx, 159)
                self.state = 1923
                self.match(Legal_refParser.COUNTY_COURT_OF_TINOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SAMOS]:
                self.enterOuterAlt(localctx, 160)
                self.state = 1924
                self.match(Legal_refParser.COUNTY_COURT_OF_SAMOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_IKARIA]:
                self.enterOuterAlt(localctx, 161)
                self.state = 1925
                self.match(Legal_refParser.COUNTY_COURT_OF_IKARIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KARLOVASI]:
                self.enterOuterAlt(localctx, 162)
                self.state = 1926
                self.match(Legal_refParser.COUNTY_COURT_OF_KARLOVASI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NAXOS]:
                self.enterOuterAlt(localctx, 163)
                self.state = 1927
                self.match(Legal_refParser.COUNTY_COURT_OF_NAXOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_CHANIA]:
                self.enterOuterAlt(localctx, 164)
                self.state = 1928
                self.match(Legal_refParser.COUNTY_COURT_OF_CHANIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_VAMOU]:
                self.enterOuterAlt(localctx, 165)
                self.state = 1929
                self.match(Legal_refParser.COUNTY_COURT_OF_VAMOU)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_RETHYMNO]:
                self.enterOuterAlt(localctx, 166)
                self.state = 1930
                self.match(Legal_refParser.COUNTY_COURT_OF_RETHYMNO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KOZANI]:
                self.enterOuterAlt(localctx, 167)
                self.state = 1931
                self.match(Legal_refParser.COUNTY_COURT_OF_KOZANI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_EORDAIA]:
                self.enterOuterAlt(localctx, 168)
                self.state = 1932
                self.match(Legal_refParser.COUNTY_COURT_OF_EORDAIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_GREVENA]:
                self.enterOuterAlt(localctx, 169)
                self.state = 1933
                self.match(Legal_refParser.COUNTY_COURT_OF_GREVENA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KASTORIA]:
                self.enterOuterAlt(localctx, 170)
                self.state = 1934
                self.match(Legal_refParser.COUNTY_COURT_OF_KASTORIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_FLORINA]:
                self.enterOuterAlt(localctx, 171)
                self.state = 1935
                self.match(Legal_refParser.COUNTY_COURT_OF_FLORINA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AMUNTAIO]:
                self.enterOuterAlt(localctx, 172)
                self.state = 1936
                self.match(Legal_refParser.COUNTY_COURT_OF_AMUNTAIO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LARISA]:
                self.enterOuterAlt(localctx, 173)
                self.state = 1937
                self.match(Legal_refParser.COUNTY_COURT_OF_LARISA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ELASSONAS]:
                self.enterOuterAlt(localctx, 174)
                self.state = 1938
                self.match(Legal_refParser.COUNTY_COURT_OF_ELASSONAS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_FARSALA]:
                self.enterOuterAlt(localctx, 175)
                self.state = 1939
                self.match(Legal_refParser.COUNTY_COURT_OF_FARSALA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_VOLOS]:
                self.enterOuterAlt(localctx, 176)
                self.state = 1940
                self.match(Legal_refParser.COUNTY_COURT_OF_VOLOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ALMIROS]:
                self.enterOuterAlt(localctx, 177)
                self.state = 1941
                self.match(Legal_refParser.COUNTY_COURT_OF_ALMIROS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SKOPELOS]:
                self.enterOuterAlt(localctx, 178)
                self.state = 1942
                self.match(Legal_refParser.COUNTY_COURT_OF_SKOPELOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KARDITSA]:
                self.enterOuterAlt(localctx, 179)
                self.state = 1943
                self.match(Legal_refParser.COUNTY_COURT_OF_KARDITSA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_TRIKALA]:
                self.enterOuterAlt(localctx, 180)
                self.state = 1944
                self.match(Legal_refParser.COUNTY_COURT_OF_TRIKALA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KALAMPAKA]:
                self.enterOuterAlt(localctx, 181)
                self.state = 1945
                self.match(Legal_refParser.COUNTY_COURT_OF_KALAMPAKA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NAFPLIO]:
                self.enterOuterAlt(localctx, 182)
                self.state = 1946
                self.match(Legal_refParser.COUNTY_COURT_OF_NAFPLIO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ASTROS]:
                self.enterOuterAlt(localctx, 183)
                self.state = 1947
                self.match(Legal_refParser.COUNTY_COURT_OF_ASTROS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ARGOS]:
                self.enterOuterAlt(localctx, 184)
                self.state = 1948
                self.match(Legal_refParser.COUNTY_COURT_OF_ARGOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MASSITOS]:
                self.enterOuterAlt(localctx, 185)
                self.state = 1949
                self.match(Legal_refParser.COUNTY_COURT_OF_MASSITOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_THIRA]:
                self.enterOuterAlt(localctx, 186)
                self.state = 1950
                self.match(Legal_refParser.COUNTY_COURT_OF_THIRA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_CORINTH]:
                self.enterOuterAlt(localctx, 187)
                self.state = 1951
                self.match(Legal_refParser.COUNTY_COURT_OF_CORINTH)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SIKIONOS]:
                self.enterOuterAlt(localctx, 188)
                self.state = 1952
                self.match(Legal_refParser.COUNTY_COURT_OF_SIKIONOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NEMEA]:
                self.enterOuterAlt(localctx, 189)
                self.state = 1953
                self.match(Legal_refParser.COUNTY_COURT_OF_NEMEA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_XYLOKASTRO]:
                self.enterOuterAlt(localctx, 190)
                self.state = 1954
                self.match(Legal_refParser.COUNTY_COURT_OF_XYLOKASTRO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SPARTI]:
                self.enterOuterAlt(localctx, 191)
                self.state = 1955
                self.match(Legal_refParser.COUNTY_COURT_OF_SPARTI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_EPIDAVROS_LIMIRAS]:
                self.enterOuterAlt(localctx, 192)
                self.state = 1956
                self.match(Legal_refParser.COUNTY_COURT_OF_EPIDAVROS_LIMIRAS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_TRIPOLI]:
                self.enterOuterAlt(localctx, 193)
                self.state = 1957
                self.match(Legal_refParser.COUNTY_COURT_OF_TRIPOLI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MEGALOPOLI]:
                self.enterOuterAlt(localctx, 194)
                self.state = 1958
                self.match(Legal_refParser.COUNTY_COURT_OF_MEGALOPOLI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PSOFIDA]:
                self.enterOuterAlt(localctx, 195)
                self.state = 1959
                self.match(Legal_refParser.COUNTY_COURT_OF_PSOFIDA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KALAMATA]:
                self.enterOuterAlt(localctx, 196)
                self.state = 1960
                self.match(Legal_refParser.COUNTY_COURT_OF_KALAMATA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PILOS]:
                self.enterOuterAlt(localctx, 197)
                self.state = 1961
                self.match(Legal_refParser.COUNTY_COURT_OF_PILOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KIPARISSIA]:
                self.enterOuterAlt(localctx, 198)
                self.state = 1962
                self.match(Legal_refParser.COUNTY_COURT_OF_KIPARISSIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PLATAMODA]:
                self.enterOuterAlt(localctx, 199)
                self.state = 1963
                self.match(Legal_refParser.COUNTY_COURT_OF_PLATAMODA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_GYTHEIO]:
                self.enterOuterAlt(localctx, 200)
                self.state = 1964
                self.match(Legal_refParser.COUNTY_COURT_OF_GYTHEIO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NEAPOLI_VOIWN]:
                self.enterOuterAlt(localctx, 201)
                self.state = 1965
                self.match(Legal_refParser.COUNTY_COURT_OF_NEAPOLI_VOIWN)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PATRAS]:
                self.enterOuterAlt(localctx, 202)
                self.state = 1966
                self.match(Legal_refParser.COUNTY_COURT_OF_PATRAS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_DIMI]:
                self.enterOuterAlt(localctx, 203)
                self.state = 1967
                self.match(Legal_refParser.COUNTY_COURT_OF_DIMI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AIGIALIA]:
                self.enterOuterAlt(localctx, 204)
                self.state = 1968
                self.match(Legal_refParser.COUNTY_COURT_OF_AIGIALIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KALAVRITA]:
                self.enterOuterAlt(localctx, 205)
                self.state = 1969
                self.match(Legal_refParser.COUNTY_COURT_OF_KALAVRITA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AKRATA]:
                self.enterOuterAlt(localctx, 206)
                self.state = 1970
                self.match(Legal_refParser.COUNTY_COURT_OF_AKRATA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_PIRGOS]:
                self.enterOuterAlt(localctx, 207)
                self.state = 1971
                self.match(Legal_refParser.COUNTY_COURT_OF_PIRGOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_OLYMPIA]:
                self.enterOuterAlt(localctx, 208)
                self.state = 1972
                self.match(Legal_refParser.COUNTY_COURT_OF_OLYMPIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ARINI]:
                self.enterOuterAlt(localctx, 209)
                self.state = 1973
                self.match(Legal_refParser.COUNTY_COURT_OF_ARINI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AMALIADA]:
                self.enterOuterAlt(localctx, 210)
                self.state = 1974
                self.match(Legal_refParser.COUNTY_COURT_OF_AMALIADA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_GASTOUNI]:
                self.enterOuterAlt(localctx, 211)
                self.state = 1975
                self.match(Legal_refParser.COUNTY_COURT_OF_GASTOUNI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MYRTOUNTION]:
                self.enterOuterAlt(localctx, 212)
                self.state = 1976
                self.match(Legal_refParser.COUNTY_COURT_OF_MYRTOUNTION)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ZAKINTHOS]:
                self.enterOuterAlt(localctx, 213)
                self.state = 1977
                self.match(Legal_refParser.COUNTY_COURT_OF_ZAKINTHOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ARGOSTOLI]:
                self.enterOuterAlt(localctx, 214)
                self.state = 1978
                self.match(Legal_refParser.COUNTY_COURT_OF_ARGOSTOLI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SAMEON]:
                self.enterOuterAlt(localctx, 215)
                self.state = 1979
                self.match(Legal_refParser.COUNTY_COURT_OF_SAMEON)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_AGRINIO]:
                self.enterOuterAlt(localctx, 216)
                self.state = 1980
                self.match(Legal_refParser.COUNTY_COURT_OF_AGRINIO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_VALTOS]:
                self.enterOuterAlt(localctx, 217)
                self.state = 1981
                self.match(Legal_refParser.COUNTY_COURT_OF_VALTOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LEFKADA]:
                self.enterOuterAlt(localctx, 218)
                self.state = 1982
                self.match(Legal_refParser.COUNTY_COURT_OF_LEFKADA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_VONITSA]:
                self.enterOuterAlt(localctx, 219)
                self.state = 1983
                self.match(Legal_refParser.COUNTY_COURT_OF_VONITSA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MESOLOGGI]:
                self.enterOuterAlt(localctx, 220)
                self.state = 1984
                self.match(Legal_refParser.COUNTY_COURT_OF_MESOLOGGI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_NAFPAKTOS]:
                self.enterOuterAlt(localctx, 221)
                self.state = 1985
                self.match(Legal_refParser.COUNTY_COURT_OF_NAFPAKTOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_MITILINI]:
                self.enterOuterAlt(localctx, 222)
                self.state = 1986
                self.match(Legal_refParser.COUNTY_COURT_OF_MITILINI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KALLONI]:
                self.enterOuterAlt(localctx, 223)
                self.state = 1987
                self.match(Legal_refParser.COUNTY_COURT_OF_KALLONI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_CHIOS]:
                self.enterOuterAlt(localctx, 224)
                self.state = 1988
                self.match(Legal_refParser.COUNTY_COURT_OF_CHIOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_HRAKLEIO]:
                self.enterOuterAlt(localctx, 225)
                self.state = 1989
                self.match(Legal_refParser.COUNTY_COURT_OF_HRAKLEIO)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KASTELI]:
                self.enterOuterAlt(localctx, 226)
                self.state = 1990
                self.match(Legal_refParser.COUNTY_COURT_OF_KASTELI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_LASITHI]:
                self.enterOuterAlt(localctx, 227)
                self.state = 1991
                self.match(Legal_refParser.COUNTY_COURT_OF_LASITHI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_IERAPETRA]:
                self.enterOuterAlt(localctx, 228)
                self.state = 1992
                self.match(Legal_refParser.COUNTY_COURT_OF_IERAPETRA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_SITEIA]:
                self.enterOuterAlt(localctx, 229)
                self.state = 1993
                self.match(Legal_refParser.COUNTY_COURT_OF_SITEIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_THIVA]:
                self.enterOuterAlt(localctx, 230)
                self.state = 1994
                self.match(Legal_refParser.COUNTY_COURT_OF_THIVA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_CHALKIDA]:
                self.enterOuterAlt(localctx, 231)
                self.state = 1995
                self.match(Legal_refParser.COUNTY_COURT_OF_CHALKIDA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_ISTIAIA]:
                self.enterOuterAlt(localctx, 232)
                self.state = 1996
                self.match(Legal_refParser.COUNTY_COURT_OF_ISTIAIA)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KARYSTOS]:
                self.enterOuterAlt(localctx, 233)
                self.state = 1997
                self.match(Legal_refParser.COUNTY_COURT_OF_KARYSTOS)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_KIMI]:
                self.enterOuterAlt(localctx, 234)
                self.state = 1998
                self.match(Legal_refParser.COUNTY_COURT_OF_KIMI)
                pass
            elif token in [Legal_refParser.COUNTY_COURT_OF_TAMINEON]:
                self.enterOuterAlt(localctx, 235)
                self.state = 1999
                self.match(Legal_refParser.COUNTY_COURT_OF_TAMINEON)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_ATHENS]:
                self.enterOuterAlt(localctx, 236)
                self.state = 2000
                self.match(Legal_refParser.DISTRICT_COURT_OF_ATHENS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_LAMIA]:
                self.enterOuterAlt(localctx, 237)
                self.state = 2001
                self.match(Legal_refParser.DISTRICT_COURT_OF_LAMIA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_LIVADIA]:
                self.enterOuterAlt(localctx, 238)
                self.state = 2002
                self.match(Legal_refParser.DISTRICT_COURT_OF_LIVADIA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_PIRAEUS]:
                self.enterOuterAlt(localctx, 239)
                self.state = 2003
                self.match(Legal_refParser.DISTRICT_COURT_OF_PIRAEUS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_THESSALONIKI]:
                self.enterOuterAlt(localctx, 240)
                self.state = 2004
                self.match(Legal_refParser.DISTRICT_COURT_OF_THESSALONIKI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_VEROIA]:
                self.enterOuterAlt(localctx, 241)
                self.state = 2005
                self.match(Legal_refParser.DISTRICT_COURT_OF_VEROIA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_PIERIA]:
                self.enterOuterAlt(localctx, 242)
                self.state = 2006
                self.match(Legal_refParser.DISTRICT_COURT_OF_PIERIA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_SERRES]:
                self.enterOuterAlt(localctx, 243)
                self.state = 2007
                self.match(Legal_refParser.DISTRICT_COURT_OF_SERRES)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_CORFU]:
                self.enterOuterAlt(localctx, 244)
                self.state = 2008
                self.match(Legal_refParser.DISTRICT_COURT_OF_CORFU)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_KOMOTINI]:
                self.enterOuterAlt(localctx, 245)
                self.state = 2009
                self.match(Legal_refParser.DISTRICT_COURT_OF_KOMOTINI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_KAVALA]:
                self.enterOuterAlt(localctx, 246)
                self.state = 2010
                self.match(Legal_refParser.DISTRICT_COURT_OF_KAVALA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_DRAMA]:
                self.enterOuterAlt(localctx, 247)
                self.state = 2011
                self.match(Legal_refParser.DISTRICT_COURT_OF_DRAMA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_ARTA]:
                self.enterOuterAlt(localctx, 248)
                self.state = 2012
                self.match(Legal_refParser.DISTRICT_COURT_OF_ARTA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_RODOS]:
                self.enterOuterAlt(localctx, 249)
                self.state = 2013
                self.match(Legal_refParser.DISTRICT_COURT_OF_RODOS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_CHANIA]:
                self.enterOuterAlt(localctx, 250)
                self.state = 2014
                self.match(Legal_refParser.DISTRICT_COURT_OF_CHANIA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_RETHYMNO]:
                self.enterOuterAlt(localctx, 251)
                self.state = 2015
                self.match(Legal_refParser.DISTRICT_COURT_OF_RETHYMNO)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_KOZANI]:
                self.enterOuterAlt(localctx, 252)
                self.state = 2016
                self.match(Legal_refParser.DISTRICT_COURT_OF_KOZANI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_KLEISOURA]:
                self.enterOuterAlt(localctx, 253)
                self.state = 2017
                self.match(Legal_refParser.DISTRICT_COURT_OF_KLEISOURA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_LARISA]:
                self.enterOuterAlt(localctx, 254)
                self.state = 2018
                self.match(Legal_refParser.DISTRICT_COURT_OF_LARISA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_ELASSONAS]:
                self.enterOuterAlt(localctx, 255)
                self.state = 2019
                self.match(Legal_refParser.DISTRICT_COURT_OF_ELASSONAS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_VOLOS]:
                self.enterOuterAlt(localctx, 256)
                self.state = 2020
                self.match(Legal_refParser.DISTRICT_COURT_OF_VOLOS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_KARDITSA]:
                self.enterOuterAlt(localctx, 257)
                self.state = 2021
                self.match(Legal_refParser.DISTRICT_COURT_OF_KARDITSA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_TRIKALA]:
                self.enterOuterAlt(localctx, 258)
                self.state = 2022
                self.match(Legal_refParser.DISTRICT_COURT_OF_TRIKALA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_NAFPLIO]:
                self.enterOuterAlt(localctx, 259)
                self.state = 2023
                self.match(Legal_refParser.DISTRICT_COURT_OF_NAFPLIO)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_ARGOS]:
                self.enterOuterAlt(localctx, 260)
                self.state = 2024
                self.match(Legal_refParser.DISTRICT_COURT_OF_ARGOS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_CORINTH]:
                self.enterOuterAlt(localctx, 261)
                self.state = 2025
                self.match(Legal_refParser.DISTRICT_COURT_OF_CORINTH)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_SIKIONOS]:
                self.enterOuterAlt(localctx, 262)
                self.state = 2026
                self.match(Legal_refParser.DISTRICT_COURT_OF_SIKIONOS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_SPARTI]:
                self.enterOuterAlt(localctx, 263)
                self.state = 2027
                self.match(Legal_refParser.DISTRICT_COURT_OF_SPARTI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_TRIPOLI]:
                self.enterOuterAlt(localctx, 264)
                self.state = 2028
                self.match(Legal_refParser.DISTRICT_COURT_OF_TRIPOLI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_KALAMATA]:
                self.enterOuterAlt(localctx, 265)
                self.state = 2029
                self.match(Legal_refParser.DISTRICT_COURT_OF_KALAMATA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_PATRAS]:
                self.enterOuterAlt(localctx, 266)
                self.state = 2030
                self.match(Legal_refParser.DISTRICT_COURT_OF_PATRAS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_AIGIALIA]:
                self.enterOuterAlt(localctx, 267)
                self.state = 2031
                self.match(Legal_refParser.DISTRICT_COURT_OF_AIGIALIA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_PIRGOS]:
                self.enterOuterAlt(localctx, 268)
                self.state = 2032
                self.match(Legal_refParser.DISTRICT_COURT_OF_PIRGOS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_AMALIADA]:
                self.enterOuterAlt(localctx, 269)
                self.state = 2033
                self.match(Legal_refParser.DISTRICT_COURT_OF_AMALIADA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_AGRINIO]:
                self.enterOuterAlt(localctx, 270)
                self.state = 2034
                self.match(Legal_refParser.DISTRICT_COURT_OF_AGRINIO)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_VALTOS]:
                self.enterOuterAlt(localctx, 271)
                self.state = 2035
                self.match(Legal_refParser.DISTRICT_COURT_OF_VALTOS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_MESOLOGGI]:
                self.enterOuterAlt(localctx, 272)
                self.state = 2036
                self.match(Legal_refParser.DISTRICT_COURT_OF_MESOLOGGI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_MITILINI]:
                self.enterOuterAlt(localctx, 273)
                self.state = 2037
                self.match(Legal_refParser.DISTRICT_COURT_OF_MITILINI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_LIMNOS]:
                self.enterOuterAlt(localctx, 274)
                self.state = 2038
                self.match(Legal_refParser.DISTRICT_COURT_OF_LIMNOS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_PLOMARI]:
                self.enterOuterAlt(localctx, 275)
                self.state = 2039
                self.match(Legal_refParser.DISTRICT_COURT_OF_PLOMARI)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_HRAKLEIO]:
                self.enterOuterAlt(localctx, 276)
                self.state = 2040
                self.match(Legal_refParser.DISTRICT_COURT_OF_HRAKLEIO)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_MOIRES]:
                self.enterOuterAlt(localctx, 277)
                self.state = 2041
                self.match(Legal_refParser.DISTRICT_COURT_OF_MOIRES)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_PIRGOS_KRITIS]:
                self.enterOuterAlt(localctx, 278)
                self.state = 2042
                self.match(Legal_refParser.DISTRICT_COURT_OF_PIRGOS_KRITIS)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_THIVA]:
                self.enterOuterAlt(localctx, 279)
                self.state = 2043
                self.match(Legal_refParser.DISTRICT_COURT_OF_THIVA)
                pass
            elif token in [Legal_refParser.DISTRICT_COURT_OF_CHALKIDA]:
                self.enterOuterAlt(localctx, 280)
                self.state = 2044
                self.match(Legal_refParser.DISTRICT_COURT_OF_CHALKIDA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitCourtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ImplicitCourtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(Legal_refParser.OF, 0)

        def SPACE(self, i=None):
            if i is None:
                return self.getTokens(Legal_refParser.SPACE)
            else:
                return self.getToken(Legal_refParser.SPACE, i)

        def special(self):
            return self.getTypedRuleContext(Legal_refParser.SpecialContext,0)


        def COURT_TEXT(self):
            return self.getToken(Legal_refParser.COURT_TEXT, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_implicitCourt

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicitCourt"):
                listener.enterImplicitCourt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicitCourt"):
                listener.exitImplicitCourt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImplicitCourt"):
                return visitor.visitImplicitCourt(self)
            else:
                return visitor.visitChildren(self)




    def implicitCourt(self):

        localctx = Legal_refParser.ImplicitCourtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_implicitCourt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self.match(Legal_refParser.OF)
            self.state = 2048
            self.match(Legal_refParser.SPACE)
            self.state = 2049
            self.special()
            self.state = 2050
            self.match(Legal_refParser.SPACE)
            self.state = 2051
            self.match(Legal_refParser.COURT_TEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParartimaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.ParartimaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PARARTIMA_TEXT(self):
            return self.getToken(Legal_refParser.PARARTIMA_TEXT, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_parartima

        def enterRule(self, listener):
            if hasattr(listener, "enterParartima"):
                listener.enterParartima(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParartima"):
                listener.exitParartima(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitParartima"):
                return visitor.visitParartima(self)
            else:
                return visitor.visitChildren(self)




    def parartima(self):

        localctx = Legal_refParser.ParartimaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_parartima)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.match(Legal_refParser.PARARTIMA_TEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BtrimelesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Legal_refParser.BtrimelesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BT(self):
            return self.getToken(Legal_refParser.BT, 0)

        def getRuleIndex(self):
            return Legal_refParser.RULE_btrimeles

        def enterRule(self, listener):
            if hasattr(listener, "enterBtrimeles"):
                listener.enterBtrimeles(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBtrimeles"):
                listener.exitBtrimeles(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBtrimeles"):
                return visitor.visitBtrimeles(self)
            else:
                return visitor.visitChildren(self)




    def btrimeles(self):

        localctx = Legal_refParser.BtrimelesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_btrimeles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(Legal_refParser.BT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





